// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Caddyfile.flex

package cc.allape.caddyfile.language;

// DO NOT OPTIMIZE IMPORT
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import cc.allape.caddyfile.language.psi.CaddyfileTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayList;
import java.util.Stack;
// DO NOT OPTIMIZE IMPORT


public class CaddyfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HOSTNAME_MATCHER = 2;
  public static final int PORT = 4;
  public static final int MATCH = 6;
  public static final int BINDING_HOSTNAME = 8;
  public static final int QUOTED_STRING = 10;
  public static final int VARIABLE = 12;
  public static final int VARIABLE_STRING = 14;
  public static final int MATCHER = 16;
  public static final int MATCHER_ONE = 18;
  public static final int MATCHER_TWO = 20;
  public static final int MATCHER_THR = 22;
  public static final int MATCH_DECLARE = 24;
  public static final int MATCH_DECLARE_DIRECTIVE = 26;
  public static final int MATCH_DECLARE_DIR_HEADER = 28;
  public static final int MATCH_DECLARE_DIR_HEADER_VALUE = 30;
  public static final int MATCH_DECLARE_DIR_METHOD = 32;
  public static final int MATCH_DECLARE_DIR_STATUS = 34;
  public static final int GROUP = 36;
  public static final int GROUP_DIRECTIVE_ABORT = 38;
  public static final int GROUP_DIRECTIVE_ACME_SERVER = 40;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH = 42;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH_SERECTS = 44;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH_PASSWORD = 46;
  public static final int GROUP_DIRECTIVE_BIND = 48;
  public static final int GROUP_DIRECTIVE_ENCODE = 50;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS = 52;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_GZIP = 54;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MINIMUM_LENGTH = 56;
  public static final int GROUP_DIRECTIVE_ERROR = 58;
  public static final int GROUP_DIRECTIVE_ERROR_ARGS = 60;
  public static final int GROUP_DIRECTIVE_ERROR_ARGS_MESSAGE = 62;
  public static final int GROUP_DIRECTIVE_FILE_SERVER = 64;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS = 66;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_FS = 68;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_ROOT = 70;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_HIDE = 72;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_INDEX = 74;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_BROWSE = 76;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_BROWSE_ARGS = 78;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_PRECOMPRESSED = 80;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_STATUS = 82;
  public static final int GROUP_DIRECTIVE_FORWARD_AUTH = 84;
  public static final int GROUP_DIRECTIVE_FORWARD_AUTH_ARG = 86;
  public static final int GROUP_DIRECTIVE_FORWARD_AUTH_ARG_URI = 88;
  public static final int GROUP_DIRECTIVE_FORWARD_AUTH_ARG_COPY_HEADERS = 90;
  public static final int GROUP_DIRECTIVE_FORWARD_AUTH_ARG_COPY_HEADERS_ARG = 92;
  public static final int GROUP_DIRECTIVE_FORWARD_AUTH_ARG_HEADER_UP = 94;
  public static final int GROUP_DIRECTIVE_FORWARD_AUTH_ARG_HEADER_UP_VALUE = 96;
  public static final int GROUP_DIRECTIVE_TLS = 98;
  public static final int GROUP_DIRECTIVE_REDIR = 100;
  public static final int GROUP_DIRECTIVE_RESPOND = 102;
  public static final int GROUP_DIRECTIVE_REVERSE_PROXY = 104;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 
    39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 
    47, 47, 48, 48, 49, 49, 50, 50, 51, 51
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\6\1\0\1\7\4\0\1\10\2\0\1\11"+
    "\1\12\1\13\12\14\1\15\3\0\1\16\1\0\1\17"+
    "\6\20\24\21\1\22\1\23\1\24\1\0\1\25\1\0"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\21\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\21\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\7\0\1\3\32\0"+
    "\1\3\11\0\1\21\12\0\1\21\4\0\1\21\5\0"+
    "\27\21\1\0\37\21\1\0\u01ca\21\4\0\14\21\16\0"+
    "\5\21\7\0\1\21\1\0\1\21\21\0\165\21\1\0"+
    "\2\21\2\0\4\21\1\0\1\21\6\0\1\21\1\0"+
    "\3\21\1\0\1\21\1\0\24\21\1\0\123\21\1\0"+
    "\213\21\1\0\255\21\1\0\46\21\2\0\1\21\6\0"+
    "\51\21\10\0\55\21\1\0\1\21\1\0\2\21\1\0"+
    "\2\21\1\0\1\21\10\0\33\21\4\0\4\21\35\0"+
    "\13\21\5\0\100\21\12\61\4\0\146\21\1\0\10\21"+
    "\2\0\12\21\1\0\6\21\12\61\3\21\2\0\1\21"+
    "\20\0\73\21\2\0\145\21\16\0\12\61\54\21\4\0"+
    "\1\21\2\0\1\21\2\0\56\21\22\0\34\21\4\0"+
    "\13\21\65\0\25\21\1\0\10\21\25\0\17\21\1\0"+
    "\201\21\2\0\12\61\1\0\23\21\1\0\10\21\2\0"+
    "\2\21\2\0\26\21\1\0\7\21\1\0\1\21\3\0"+
    "\4\21\2\0\11\21\2\0\2\21\2\0\4\21\10\0"+
    "\1\21\4\0\2\21\1\0\5\21\2\0\12\61\2\21"+
    "\12\0\1\21\1\0\1\21\2\0\3\21\1\0\6\21"+
    "\4\0\2\21\2\0\26\21\1\0\7\21\1\0\2\21"+
    "\1\0\2\21\1\0\2\21\2\0\1\21\1\0\5\21"+
    "\4\0\2\21\2\0\3\21\3\0\1\21\7\0\4\21"+
    "\1\0\1\21\7\0\12\61\6\21\13\0\3\21\1\0"+
    "\11\21\1\0\3\21\1\0\26\21\1\0\7\21\1\0"+
    "\2\21\1\0\5\21\2\0\12\21\1\0\3\21\1\0"+
    "\3\21\2\0\1\21\17\0\4\21\2\0\12\61\11\0"+
    "\7\21\1\0\3\21\1\0\10\21\2\0\2\21\2\0"+
    "\26\21\1\0\7\21\1\0\2\21\1\0\5\21\2\0"+
    "\11\21\2\0\2\21\2\0\3\21\10\0\2\21\4\0"+
    "\2\21\1\0\5\21\2\0\12\61\1\0\1\21\20\0"+
    "\2\21\1\0\6\21\3\0\3\21\1\0\4\21\3\0"+
    "\2\21\1\0\1\21\1\0\2\21\3\0\2\21\3\0"+
    "\3\21\3\0\14\21\4\0\5\21\3\0\3\21\1\0"+
    "\4\21\2\0\1\21\6\0\1\21\16\0\12\61\20\0"+
    "\15\21\1\0\3\21\1\0\27\21\1\0\20\21\3\0"+
    "\10\21\1\0\3\21\1\0\4\21\7\0\2\21\1\0"+
    "\3\21\5\0\4\21\2\0\12\61\20\0\4\21\1\0"+
    "\10\21\1\0\3\21\1\0\27\21\1\0\12\21\1\0"+
    "\5\21\2\0\11\21\1\0\3\21\1\0\4\21\7\0"+
    "\2\21\7\0\1\21\1\0\4\21\2\0\12\61\1\0"+
    "\2\21\15\0\4\21\1\0\10\21\1\0\3\21\1\0"+
    "\63\21\1\0\3\21\1\0\5\21\5\0\4\21\7\0"+
    "\5\21\2\0\12\61\12\0\6\21\2\0\2\21\1\0"+
    "\22\21\3\0\30\21\1\0\11\21\1\0\1\21\2\0"+
    "\7\21\3\0\1\21\4\0\6\21\1\0\1\21\1\0"+
    "\10\21\6\0\12\61\2\0\2\21\15\0\72\21\5\0"+
    "\17\21\1\0\12\61\47\0\2\21\1\0\1\21\1\0"+
    "\5\21\1\0\30\21\1\0\1\21\1\0\27\21\2\0"+
    "\5\21\1\0\1\21\1\0\6\21\2\0\12\61\2\0"+
    "\4\21\40\0\1\21\27\0\2\21\6\0\12\61\13\0"+
    "\1\21\1\0\1\21\1\0\1\21\4\0\12\21\1\0"+
    "\44\21\4\0\24\21\1\0\22\21\1\0\44\21\11\0"+
    "\1\21\71\0\100\21\12\61\6\0\100\21\12\61\4\21"+
    "\2\0\46\21\1\0\1\21\5\0\1\21\2\0\53\21"+
    "\1\0\115\21\1\0\4\21\2\0\7\21\1\0\1\21"+
    "\1\0\4\21\2\0\51\21\1\0\4\21\2\0\41\21"+
    "\1\0\4\21\2\0\7\21\1\0\1\21\1\0\4\21"+
    "\2\0\17\21\1\0\71\21\1\0\4\21\2\0\103\21"+
    "\2\0\3\21\40\0\20\21\20\0\126\21\2\0\6\21"+
    "\3\0\u016c\21\2\0\21\21\1\3\32\21\5\0\113\21"+
    "\3\0\13\21\7\0\15\21\1\0\7\21\13\0\25\21"+
    "\13\0\24\21\14\0\15\21\1\0\3\21\1\0\2\21"+
    "\14\0\124\21\3\0\1\21\4\0\2\21\2\0\12\61"+
    "\41\0\3\21\2\0\12\61\6\0\131\21\7\0\53\21"+
    "\5\0\106\21\12\0\37\21\1\0\14\21\4\0\14\21"+
    "\12\0\12\61\36\21\2\0\5\21\13\0\54\21\4\0"+
    "\32\21\6\0\12\61\46\0\34\21\4\0\77\21\1\0"+
    "\35\21\2\0\1\21\12\61\6\0\12\61\15\0\1\21"+
    "\10\0\17\21\101\0\114\21\4\0\12\61\21\0\11\21"+
    "\14\0\60\21\12\61\72\21\14\0\70\21\10\0\12\61"+
    "\3\0\3\21\12\61\44\21\2\0\11\21\7\0\53\21"+
    "\2\0\3\21\20\0\3\21\1\0\47\21\5\0\372\21"+
    "\1\0\33\21\2\0\6\21\2\0\46\21\2\0\6\21"+
    "\2\0\10\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\37\21\2\0\65\21\1\0\7\21\1\0\1\21"+
    "\3\0\3\21\1\0\7\21\3\0\4\21\2\0\6\21"+
    "\4\0\15\21\5\0\3\21\1\0\7\21\3\0\13\3"+
    "\35\0\2\3\5\0\1\3\17\0\2\21\23\0\1\21"+
    "\12\0\1\3\21\0\1\21\15\0\1\21\20\0\15\21"+
    "\63\0\41\21\21\0\1\21\4\0\1\21\2\0\12\21"+
    "\1\0\1\21\3\0\5\21\6\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\4\21\1\0\13\21\2\0\4\21"+
    "\5\0\5\21\4\0\1\21\21\0\51\21\u022d\0\64\21"+
    "\26\0\57\21\1\0\57\21\1\0\205\21\6\0\11\21"+
    "\14\0\46\21\1\0\1\21\5\0\1\21\2\0\70\21"+
    "\7\0\1\21\17\0\30\21\11\0\7\21\1\0\7\21"+
    "\1\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\7\21\1\0\7\21\1\0\40\21\57\0\1\21"+
    "\320\0\1\3\4\0\3\21\31\0\17\21\1\0\5\21"+
    "\2\0\5\21\4\0\126\21\2\0\2\21\2\0\3\21"+
    "\1\0\132\21\1\0\4\21\5\0\53\21\1\0\136\21"+
    "\21\0\33\21\65\0\306\21\112\0\360\21\20\0\215\21"+
    "\103\0\56\21\2\0\15\21\3\0\20\21\12\61\2\21"+
    "\24\0\63\21\1\0\12\21\1\0\163\21\45\0\11\21"+
    "\2\0\147\21\2\0\65\21\2\0\5\21\60\0\61\21"+
    "\30\0\64\21\14\0\106\21\12\0\12\61\6\0\30\21"+
    "\3\0\1\21\1\0\3\21\12\61\44\21\2\0\44\21"+
    "\14\0\35\21\3\0\101\21\16\0\1\21\12\61\6\0"+
    "\20\21\12\61\5\21\1\0\67\21\11\0\16\21\2\0"+
    "\12\61\6\0\27\21\3\0\111\21\30\0\3\21\2\0"+
    "\20\21\2\0\5\21\12\0\6\21\2\0\6\21\2\0"+
    "\6\21\11\0\7\21\1\0\7\21\1\0\53\21\1\0"+
    "\14\21\10\0\173\21\1\0\2\21\2\0\12\61\6\0"+
    "\244\21\14\0\27\21\4\0\61\21\4\0\156\21\2\0"+
    "\152\21\46\0\7\21\14\0\5\21\5\0\14\21\1\0"+
    "\15\21\1\0\5\21\1\0\1\21\1\0\2\21\1\0"+
    "\2\21\1\0\154\21\41\0\153\21\22\0\100\21\2\0"+
    "\66\21\50\0\14\21\4\0\20\21\20\0\20\21\3\0"+
    "\2\21\30\0\3\21\40\0\5\21\1\0\207\21\23\0"+
    "\12\61\7\0\32\21\4\0\1\21\1\0\32\21\13\0"+
    "\131\21\3\0\6\21\2\0\6\21\2\0\6\21\2\0"+
    "\3\21\43\0\14\21\1\0\32\21\1\0\23\21\1\0"+
    "\2\21\1\0\17\21\2\0\16\21\42\0\173\21\105\0"+
    "\65\21\210\0\1\21\202\0\35\21\3\0\61\21\17\0"+
    "\1\21\37\0\40\21\15\0\36\21\5\0\53\21\5\0"+
    "\36\21\2\0\44\21\4\0\10\21\1\0\5\21\52\0"+
    "\236\21\2\0\12\61\6\0\44\21\4\0\44\21\4\0"+
    "\50\21\10\0\64\21\234\0\67\21\11\0\26\21\12\0"+
    "\10\21\230\0\6\21\2\0\1\21\1\0\54\21\1\0"+
    "\2\21\3\0\1\21\2\0\27\21\12\0\27\21\11\0"+
    "\37\21\101\0\23\21\1\0\2\21\12\0\26\21\12\0"+
    "\32\21\106\0\70\21\6\0\2\21\100\0\4\21\1\0"+
    "\2\21\5\0\10\21\1\0\3\21\1\0\35\21\2\0"+
    "\3\21\4\0\1\21\40\0\35\21\3\0\35\21\43\0"+
    "\10\21\1\0\36\21\31\0\66\21\12\0\26\21\12\0"+
    "\23\21\15\0\22\21\156\0\111\21\67\0\63\21\15\0"+
    "\63\21\15\0\50\21\10\0\12\61\306\0\35\21\12\0"+
    "\1\21\10\0\41\21\217\0\27\21\11\0\107\21\37\0"+
    "\12\61\17\0\74\21\25\0\31\21\7\0\12\61\6\0"+
    "\65\21\1\0\12\61\4\0\3\21\11\0\44\21\2\0"+
    "\1\21\11\0\105\21\4\0\4\21\3\0\12\61\1\21"+
    "\1\0\1\21\43\0\22\21\1\0\45\21\6\0\1\21"+
    "\101\0\7\21\1\0\1\21\1\0\4\21\1\0\17\21"+
    "\1\0\12\21\7\0\73\21\5\0\12\61\6\0\4\21"+
    "\1\0\10\21\2\0\2\21\2\0\26\21\1\0\7\21"+
    "\1\0\2\21\1\0\5\21\1\0\12\21\2\0\2\21"+
    "\2\0\3\21\2\0\1\21\6\0\1\21\5\0\7\21"+
    "\2\0\7\21\3\0\5\21\213\0\113\21\5\0\12\61"+
    "\4\0\2\21\40\0\106\21\1\0\1\21\10\0\12\61"+
    "\246\0\66\21\2\0\11\21\27\0\6\21\42\0\101\21"+
    "\3\0\1\21\13\0\12\61\46\0\71\21\7\0\12\61"+
    "\66\0\33\21\2\0\17\21\4\0\12\61\306\0\73\21"+
    "\145\0\100\21\12\61\25\0\1\21\240\0\10\21\2\0"+
    "\56\21\2\0\10\21\1\0\2\21\33\0\77\21\10\0"+
    "\1\21\10\0\112\21\3\0\1\21\42\0\71\21\7\0"+
    "\11\21\1\0\55\21\1\0\11\21\17\0\12\61\30\0"+
    "\36\21\2\0\26\21\1\0\16\21\111\0\7\21\1\0"+
    "\2\21\1\0\54\21\3\0\1\21\1\0\2\21\1\0"+
    "\11\21\10\0\12\61\6\0\6\21\1\0\2\21\1\0"+
    "\45\21\1\0\2\21\1\0\6\21\7\0\12\61\u0136\0"+
    "\27\21\11\0\232\21\146\0\157\21\21\0\304\21\274\0"+
    "\57\21\321\0\107\21\271\0\71\21\7\0\37\21\1\0"+
    "\12\61\146\0\36\21\2\0\5\21\13\0\67\21\11\0"+
    "\4\21\14\0\12\61\11\0\25\21\5\0\23\21\260\0"+
    "\100\21\200\0\113\21\4\0\71\21\7\0\21\21\100\0"+
    "\2\21\1\0\1\21\34\0\370\21\10\0\363\21\15\0"+
    "\37\21\61\0\3\21\21\0\4\21\10\0\u018c\21\4\0"+
    "\153\21\5\0\15\21\3\0\11\21\7\0\12\21\3\0"+
    "\2\21\306\0\5\21\3\0\6\21\10\0\10\21\2\0"+
    "\7\21\36\0\4\21\224\0\3\21\273\0\125\21\1\0"+
    "\107\21\1\0\2\21\2\0\1\21\2\0\2\21\2\0"+
    "\4\21\1\0\14\21\1\0\1\21\1\0\7\21\1\0"+
    "\101\21\1\0\4\21\2\0\10\21\1\0\7\21\1\0"+
    "\34\21\1\0\4\21\1\0\5\21\1\0\1\21\3\0"+
    "\7\21\1\0\u0154\21\2\0\31\21\1\0\31\21\1\0"+
    "\37\21\1\0\31\21\1\0\37\21\1\0\31\21\1\0"+
    "\37\21\1\0\31\21\1\0\37\21\1\0\31\21\1\0"+
    "\10\21\2\0\62\61\67\21\4\0\62\21\10\0\1\21"+
    "\16\0\1\21\26\0\5\21\1\0\17\21\120\0\7\21"+
    "\1\0\21\21\2\0\7\21\1\0\2\21\1\0\5\21"+
    "\325\0\55\21\3\0\16\21\2\0\12\61\4\0\1\21"+
    "\u0171\0\60\21\12\61\6\0\305\21\13\0\7\21\51\0"+
    "\114\21\4\0\12\61\246\0\4\21\1\0\33\21\1\0"+
    "\2\21\1\0\1\21\2\0\1\21\1\0\12\21\1\0"+
    "\4\21\1\0\1\21\1\0\1\21\6\0\1\21\4\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\3\21\1\0"+
    "\2\21\1\0\1\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\2\21\1\0"+
    "\1\21\2\0\4\21\1\0\7\21\1\0\4\21\1\0"+
    "\4\21\1\0\1\21\1\0\12\21\1\0\21\21\5\0"+
    "\3\21\1\0\5\21\1\0\21\21\164\0\32\21\6\0"+
    "\32\21\6\0\32\21\166\0\327\21\51\0\65\21\13\0"+
    "\336\21\2\0\u0182\21\16\0\u0131\21\37\0\36\21\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\64\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\10\1\11\1\2\1\12\2\13\1\14\1\5"+
    "\1\15\1\5\2\16\1\17\1\20\1\5\1\21\1\5"+
    "\1\22\3\21\1\23\1\24\1\25\1\26\2\5\1\27"+
    "\2\30\1\31\1\6\1\31\1\32\4\3\1\33\1\34"+
    "\1\35\2\36\2\37\2\40\1\41\1\42\6\3\1\43"+
    "\1\44\1\45\1\46\1\2\1\47\1\20\2\50\3\3"+
    "\1\51\3\3\1\52\1\53\3\3\1\54\1\55\1\56"+
    "\1\57\1\3\2\60\1\3\1\61\10\3\2\62\1\3"+
    "\2\63\1\3\2\64\2\5\1\65\1\3\2\66\1\67"+
    "\2\70\1\45\1\71\3\3\2\72\2\73\1\74\2\73"+
    "\1\75\2\76\2\37\3\77\1\100\1\101\1\102\1\100"+
    "\23\0\1\66\12\0\1\103\10\0\1\63\2\0\1\64"+
    "\26\0\1\104\33\0\1\105\3\0\1\106\4\0\1\107"+
    "\15\0\1\110\1\0\1\111\2\0\1\112\4\0\1\113"+
    "\3\0\1\114\4\0\1\115\3\0\1\116\3\0\1\117"+
    "\2\0\1\120\12\0\1\121\5\0\1\122\6\0\1\123"+
    "\1\124\1\125\2\0\1\126\13\0\1\127\2\0\1\130"+
    "\1\131\3\0\1\132\7\0\1\133\1\0\1\134\7\0"+
    "\1\135\13\0\1\134\21\0\1\134\6\0\1\136\3\0"+
    "\1\137\1\0\1\140\13\0\1\141\1\142\11\0\1\143"+
    "\6\0\1\144\1\145\2\0\1\146\1\0\1\147\3\0"+
    "\1\150\6\0\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[498];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e"+
    "\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0a8c\0\u0a8c\0\u0a8c\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0a8c\0\u0c4e\0\u0a8c\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u0a8c\0\u0a8c\0\u0d16\0\u0d48\0\u0d7a\0\u0a8c\0\u0a8c\0\u0b86"+
    "\0\u0abe\0\u0a8c\0\u0a8c\0\u0a8c\0\u0a8c\0\u0dac\0\u0dde\0\u0a8c"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0a8c\0\u0ea6\0\u0a8c\0\u0ed8\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u0a8c\0\u0a8c\0\u0a8c\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u0a8c\0\u10fe\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u0a8c\0\u0a8c\0\u0a8c\0\u0a8c\0\u0a8c"+
    "\0\u122a\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u0a8c"+
    "\0\u1356\0\u1388\0\u13ba\0\u0a8c\0\u0a8c\0\u13ec\0\u141e\0\u1450"+
    "\0\u1482\0\u14b4\0\u0a8c\0\u0a8c\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u0a8c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da"+
    "\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u0a8c\0\u1806\0\u1838"+
    "\0\u0a8c\0\u186a\0\u189c\0\u0a8c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u1996\0\u0a8c\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u0a8c\0\u1b58\0\u1b8a\0\u0a8c\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u0a8c\0\u0abe\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u0a8c\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6"+
    "\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u0a8c\0\u2102\0\u2134"+
    "\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4"+
    "\0\u0a8c\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422"+
    "\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2"+
    "\0\u25e4\0\u1c84\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710"+
    "\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0"+
    "\0\u28d2\0\u2904\0\u2936\0\u0a8c\0\u2968\0\u299a\0\u29cc\0\u29fe"+
    "\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e"+
    "\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e"+
    "\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u0a8c"+
    "\0\u2eae\0\u2ee0\0\u2f12\0\u0a8c\0\u2f44\0\u2f76\0\u2fa8\0\u2fda"+
    "\0\u0a8c\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138"+
    "\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u0a8c\0\u3296"+
    "\0\u0a8c\0\u32c8\0\u32fa\0\u0a8c\0\u332c\0\u335e\0\u3390\0\u33c2"+
    "\0\u0a8c\0\u33f4\0\u3426\0\u3458\0\u0a8c\0\u348a\0\u34bc\0\u34ee"+
    "\0\u3520\0\u0a8c\0\u3552\0\u3584\0\u35b6\0\u0a8c\0\u35e8\0\u361a"+
    "\0\u364c\0\u0a8c\0\u367e\0\u36b0\0\u0a8c\0\u36e2\0\u3714\0\u3746"+
    "\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u0a8c"+
    "\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e\0\u0a8c\0\u39d0\0\u3a02"+
    "\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u0a8c\0\u0a8c\0\u0a8c\0\u3afc"+
    "\0\u3b2e\0\u0a8c\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a"+
    "\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u38a4\0\u3d86\0\u3db8"+
    "\0\u0a8c\0\u0a8c\0\u3dea\0\u3e1c\0\u3e4e\0\u0a8c\0\u3e80\0\u3eb2"+
    "\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u0a8c\0\u3fde\0\u4010"+
    "\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e\0\u0a8c"+
    "\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe"+
    "\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e"+
    "\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e"+
    "\0\u4650\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u0a8c\0\u474a\0\u477c"+
    "\0\u47ae\0\u47e0\0\u4812\0\u4844\0\u0a8c\0\u4876\0\u48a8\0\u48da"+
    "\0\u0a8c\0\u490c\0\u0a8c\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06"+
    "\0\u4a38\0\u4a6a\0\u4a9c\0\u4ace\0\u4b00\0\u4b32\0\u0a8c\0\u0a8c"+
    "\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c\0\u4c5e\0\u4c90\0\u4cc2"+
    "\0\u4cf4\0\u0a8c\0\u4d26\0\u4d58\0\u4d8a\0\u4dbc\0\u4dee\0\u4e20"+
    "\0\u0a8c\0\u0a8c\0\u4e52\0\u4e84\0\u0a8c\0\u4eb6\0\u0a8c\0\u4ee8"+
    "\0\u4f1a\0\u4f4c\0\u0a8c\0\u4f7e\0\u4fb0\0\u4fe2\0\u5014\0\u5046"+
    "\0\u5078\0\u0a8c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[498];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\65\2\66\1\67\1\66\1\65\1\70\53\65\1\71"+
    "\1\72\2\67\1\72\1\71\1\73\1\71\1\74\1\71"+
    "\1\75\2\71\1\76\44\71\1\67\1\77\2\67\1\77"+
    "\1\67\1\70\5\67\1\100\44\67\1\100\1\67\1\77"+
    "\2\67\1\77\1\67\1\70\53\67\1\101\1\77\2\67"+
    "\1\77\1\101\1\102\47\101\1\103\3\101\2\104\1\67"+
    "\2\104\1\105\1\106\53\104\1\107\1\77\2\67\1\77"+
    "\1\107\1\110\47\107\1\111\1\107\1\112\1\107\1\113"+
    "\2\114\1\67\1\114\1\113\1\115\47\113\1\116\3\113"+
    "\1\117\1\120\2\117\1\120\1\117\1\121\1\117\1\122"+
    "\2\117\1\123\3\117\1\124\42\117\1\67\1\77\2\67"+
    "\1\77\1\67\1\70\1\67\1\125\51\67\1\126\1\120"+
    "\2\117\1\120\1\126\1\127\1\126\1\74\2\126\1\130"+
    "\46\126\1\131\1\77\2\67\1\77\1\131\1\132\53\131"+
    "\1\133\1\77\1\134\1\67\1\77\1\133\1\135\53\133"+
    "\1\67\1\77\1\136\1\67\1\77\1\67\1\70\26\67"+
    "\1\137\3\67\1\140\2\67\1\141\1\67\1\142\7\67"+
    "\1\143\1\144\1\145\1\67\1\146\1\77\1\117\1\67"+
    "\1\77\1\146\1\147\50\146\1\117\2\146\1\150\1\77"+
    "\1\117\1\67\1\77\1\150\1\151\50\150\1\117\2\150"+
    "\1\152\1\77\1\117\1\67\1\77\1\152\1\153\50\152"+
    "\1\117\2\152\1\67\1\77\1\117\1\67\1\77\1\67"+
    "\1\70\5\67\1\154\42\67\1\117\1\67\1\154\1\67"+
    "\2\66\1\67\1\66\1\67\1\70\10\67\1\155\6\67"+
    "\1\156\1\157\2\67\1\160\1\161\11\67\1\162\1\67"+
    "\1\163\10\67\1\164\2\67\1\77\1\165\1\67\1\77"+
    "\1\67\1\70\1\67\1\166\2\67\1\166\3\67\1\166"+
    "\43\67\1\77\1\165\1\67\1\77\1\67\1\70\1\67"+
    "\1\166\2\67\1\166\3\67\1\166\36\67\1\167\4\67"+
    "\1\77\1\170\1\67\1\77\1\67\1\70\2\67\1\171"+
    "\2\67\1\171\3\67\2\171\3\67\31\171\2\67\1\172"+
    "\1\171\1\173\1\77\2\67\1\77\1\173\1\174\51\173"+
    "\1\67\1\173\1\67\1\77\1\165\1\67\1\77\1\67"+
    "\1\70\5\67\1\175\5\67\1\176\25\67\1\177\10\67"+
    "\1\175\1\67\1\77\1\200\1\67\1\77\1\67\1\70"+
    "\1\67\1\166\2\67\1\166\3\67\1\166\7\67\1\201"+
    "\4\67\1\202\20\67\1\203\1\204\1\67\1\205\2\67"+
    "\1\77\1\170\1\67\1\77\1\67\1\70\25\67\1\206"+
    "\4\67\1\207\13\67\1\210\2\67\1\117\2\67\1\77"+
    "\1\134\1\67\1\77\1\67\1\70\5\67\1\211\44\67"+
    "\1\211\1\67\1\77\1\134\1\67\1\77\1\67\1\70"+
    "\5\67\1\212\44\67\1\212\1\67\1\77\1\200\1\67"+
    "\1\77\1\213\1\70\1\67\1\166\2\67\1\166\1\154"+
    "\2\67\1\166\36\67\1\214\1\67\1\205\1\154\1\67"+
    "\1\77\1\170\1\67\1\77\1\67\1\70\32\67\1\215"+
    "\16\67\1\117\1\67\1\216\1\77\1\117\1\67\1\77"+
    "\1\213\1\217\53\216\1\67\1\77\1\200\1\67\1\77"+
    "\1\67\1\70\1\67\1\166\2\67\1\166\3\67\1\166"+
    "\7\67\1\220\26\67\1\221\1\67\1\205\2\67\1\77"+
    "\1\170\1\67\1\77\1\67\1\70\20\67\1\222\1\67"+
    "\1\223\1\67\1\224\1\67\1\225\1\226\5\67\1\227"+
    "\1\230\1\231\11\67\1\117\1\67\1\232\1\77\1\134"+
    "\1\67\1\77\1\232\1\233\53\232\1\67\1\77\2\67"+
    "\1\77\1\234\1\70\1\235\1\67\2\235\1\236\1\235"+
    "\3\67\2\235\1\67\1\236\1\67\31\235\3\67\1\235"+
    "\1\67\1\77\1\134\1\67\1\77\1\237\1\70\1\240"+
    "\1\67\2\240\1\241\1\240\3\67\2\240\1\67\1\241"+
    "\1\67\31\240\3\67\1\240\1\242\1\77\1\134\1\67"+
    "\1\77\1\242\1\243\53\242\1\67\1\77\1\170\1\67"+
    "\1\77\1\237\1\70\1\240\1\67\2\240\1\241\1\240"+
    "\3\67\2\240\1\67\1\241\1\67\31\240\1\244\1\67"+
    "\1\112\1\240\1\67\1\77\1\170\1\67\1\77\1\67"+
    "\1\70\36\67\1\245\12\67\1\117\1\67\1\246\1\77"+
    "\1\134\1\67\1\77\1\246\1\247\53\246\1\67\1\77"+
    "\1\134\1\67\1\77\1\67\1\70\5\67\1\250\44\67"+
    "\1\250\1\251\1\77\1\170\1\67\1\77\1\251\1\252"+
    "\1\251\1\253\2\251\1\253\3\251\1\253\36\251\1\254"+
    "\1\251\1\112\1\251\1\67\1\77\1\170\1\67\1\77"+
    "\1\67\1\70\21\67\1\255\4\67\1\256\12\67\1\257"+
    "\7\67\1\205\1\67\1\260\1\77\2\67\1\77\1\260"+
    "\1\261\53\260\1\262\1\77\1\134\1\67\1\77\1\262"+
    "\1\263\47\262\1\264\1\262\1\112\1\262\1\265\1\77"+
    "\1\170\1\67\1\77\1\265\1\266\7\265\1\267\41\265"+
    "\1\117\1\265\1\270\1\77\1\134\1\67\1\77\1\270"+
    "\1\271\53\270\1\272\1\77\1\117\1\67\1\77\1\213"+
    "\1\273\47\272\1\116\3\272\1\67\1\77\1\165\1\67"+
    "\1\77\1\237\1\70\1\240\1\67\2\240\1\241\1\240"+
    "\3\67\2\240\1\67\1\241\1\67\31\240\3\67\1\240"+
    "\1\274\1\77\1\165\1\67\1\77\1\274\1\275\1\274"+
    "\1\166\2\274\1\166\1\276\2\274\1\166\2\276\3\274"+
    "\31\276\3\274\1\276\1\67\1\77\1\165\1\67\1\77"+
    "\1\67\1\70\1\67\1\166\2\67\1\166\1\154\2\67"+
    "\1\166\41\67\1\154\1\67\1\77\1\165\1\67\1\77"+
    "\1\67\1\70\1\67\1\166\1\277\1\67\1\166\1\300"+
    "\1\301\1\67\1\166\2\302\3\67\31\302\3\67\1\300"+
    "\1\65\4\0\1\65\1\0\53\65\1\0\2\66\1\0"+
    "\1\66\137\0\2\70\1\0\57\70\1\71\4\0\3\71"+
    "\1\0\1\71\1\0\2\71\1\0\44\71\1\0\1\72"+
    "\2\0\1\72\55\0\1\73\1\70\1\0\2\70\3\73"+
    "\1\70\1\73\1\70\2\73\1\70\44\73\1\0\1\77"+
    "\2\0\1\77\71\0\1\100\44\0\1\100\1\101\4\0"+
    "\51\101\1\0\3\101\1\102\1\70\1\0\2\70\51\102"+
    "\1\70\3\102\2\104\1\0\2\104\1\0\54\104\2\106"+
    "\1\0\2\106\1\70\54\106\1\107\4\0\51\107\1\0"+
    "\1\107\1\0\1\107\1\110\1\70\1\0\2\70\51\110"+
    "\1\70\1\110\1\70\1\110\1\113\4\0\51\113\1\0"+
    "\3\113\1\0\2\114\1\0\1\114\55\0\1\115\1\70"+
    "\1\0\2\70\51\115\1\70\3\115\1\126\4\0\3\126"+
    "\1\0\2\126\1\0\46\126\1\127\1\70\1\0\2\70"+
    "\3\127\1\70\2\127\1\70\46\127\1\131\4\0\55\131"+
    "\1\132\1\70\1\0\2\70\55\132\1\133\4\0\55\133"+
    "\1\135\1\70\1\0\2\70\55\135\32\0\1\303\61\0"+
    "\1\304\55\0\1\305\102\0\1\306\12\0\1\146\4\0"+
    "\52\146\1\0\2\146\1\147\1\70\1\0\2\70\52\147"+
    "\1\70\2\147\1\150\4\0\52\150\1\0\2\150\1\151"+
    "\1\70\1\0\2\70\52\151\1\70\2\151\1\152\4\0"+
    "\52\152\1\0\2\152\1\153\1\70\1\0\2\70\52\153"+
    "\1\70\2\153\14\0\1\154\44\0\1\154\27\0\1\307"+
    "\1\310\57\0\1\311\7\0\1\312\65\0\1\313\2\0"+
    "\1\314\52\0\1\315\4\0\1\316\50\0\1\317\67\0"+
    "\1\320\32\0\1\171\2\0\1\171\3\0\2\171\3\0"+
    "\31\171\2\0\2\171\1\173\4\0\53\173\1\0\1\173"+
    "\1\174\1\70\1\0\2\70\53\174\1\70\1\174\12\0"+
    "\1\321\1\0\1\322\44\0\1\322\14\0\1\323\1\324"+
    "\2\0\1\323\5\0\6\323\70\0\1\325\64\0\1\326"+
    "\71\0\1\327\52\0\1\330\70\0\1\331\32\0\1\332"+
    "\7\0\1\333\71\0\1\334\27\0\1\211\44\0\1\211"+
    "\14\0\1\212\44\0\1\212\32\0\1\335\27\0\1\216"+
    "\5\0\54\216\1\217\1\70\1\0\3\70\54\217\45\0"+
    "\1\336\61\0\1\337\52\0\1\340\71\0\1\341\51\0"+
    "\1\342\65\0\1\343\45\0\1\344\16\0\1\345\57\0"+
    "\1\346\65\0\1\347\12\0\1\232\4\0\55\232\1\233"+
    "\1\70\1\0\2\70\55\233\4\0\1\350\2\0\1\350"+
    "\1\0\2\350\1\351\1\350\3\0\2\350\1\0\1\351"+
    "\1\0\31\350\3\0\1\350\7\0\1\235\1\0\2\235"+
    "\1\352\1\235\3\0\2\235\1\0\1\352\1\0\31\235"+
    "\3\0\1\235\4\0\1\353\2\0\1\353\1\0\2\353"+
    "\1\354\1\353\3\0\2\353\1\0\1\354\1\0\31\353"+
    "\3\0\1\353\7\0\1\240\1\0\2\240\1\355\1\240"+
    "\3\0\2\240\1\0\1\355\1\0\31\240\3\0\1\240"+
    "\1\242\4\0\55\242\1\243\1\70\1\0\2\70\55\243"+
    "\32\0\1\356\27\0\1\246\4\0\55\246\1\247\1\70"+
    "\1\0\2\70\55\247\14\0\1\250\44\0\1\250\1\251"+
    "\4\0\51\251\1\0\1\251\1\0\1\251\1\252\1\70"+
    "\1\0\2\70\51\252\1\70\1\252\1\70\1\252\43\0"+
    "\1\357\50\0\1\360\74\0\1\361\14\0\1\260\4\0"+
    "\55\260\1\261\1\70\1\0\2\70\55\261\1\262\4\0"+
    "\51\262\1\0\1\262\1\0\1\262\1\263\1\70\1\0"+
    "\2\70\51\263\1\70\1\263\1\70\1\263\1\265\4\0"+
    "\11\265\1\0\41\265\1\0\1\265\1\266\1\70\1\0"+
    "\2\70\11\266\1\70\41\266\1\70\1\266\1\270\4\0"+
    "\55\270\1\271\1\70\1\0\2\70\55\271\1\272\5\0"+
    "\50\272\1\0\3\272\1\273\1\70\1\0\3\70\50\273"+
    "\1\70\3\273\14\0\1\362\1\363\2\0\2\362\3\0"+
    "\31\362\3\0\1\362\11\0\1\277\1\364\1\0\1\277"+
    "\3\0\2\277\3\0\31\277\3\0\1\277\11\0\1\277"+
    "\1\364\1\0\1\300\1\363\2\0\2\302\3\0\31\302"+
    "\3\0\1\300\11\0\1\277\1\364\1\0\1\302\1\363"+
    "\2\0\2\302\3\0\31\302\3\0\1\302\26\0\1\365"+
    "\102\0\1\366\61\0\1\367\40\0\1\370\76\0\1\371"+
    "\57\0\1\372\66\0\1\373\55\0\1\374\47\0\1\375"+
    "\76\0\1\376\54\0\1\377\66\0\1\u0100\45\0\1\u0101"+
    "\14\0\1\u0102\2\0\1\u0103\56\0\1\u0104\27\0\1\u0105"+
    "\44\0\1\u0105\12\0\1\321\1\0\1\u0106\44\0\1\u0106"+
    "\14\0\1\u0107\1\324\2\0\1\u0107\5\0\6\u0107\42\0"+
    "\1\u0108\1\u0109\2\0\1\u0108\5\0\6\u0108\64\0\1\u010a"+
    "\61\0\1\u010b\72\0\1\u010c\50\0\1\u010d\72\0\1\u010e"+
    "\54\0\1\u010f\66\0\1\u0110\60\0\1\u0111\56\0\1\u0112"+
    "\61\0\1\u0113\64\0\1\u0114\44\0\1\u0115\61\0\1\u0116"+
    "\76\0\1\u0117\45\0\1\u0118\72\0\1\u0119\44\0\1\u011a"+
    "\37\0\1\350\1\236\1\0\1\350\1\0\2\350\1\u011b"+
    "\1\350\3\0\2\350\1\0\1\u011b\1\0\31\350\3\0"+
    "\1\350\4\0\1\350\2\0\1\350\1\0\2\350\1\0"+
    "\1\350\3\0\2\350\3\0\31\350\3\0\1\350\7\0"+
    "\1\235\1\0\2\235\1\0\1\235\3\0\2\235\3\0"+
    "\31\235\3\0\1\235\4\0\1\353\1\241\1\0\1\353"+
    "\1\0\2\353\1\u011c\1\353\3\0\2\353\1\0\1\u011c"+
    "\1\0\31\353\3\0\1\353\4\0\1\353\2\0\1\353"+
    "\1\0\2\353\1\0\1\353\3\0\2\353\3\0\31\353"+
    "\3\0\1\353\7\0\1\240\1\0\2\240\1\0\1\240"+
    "\3\0\2\240\3\0\31\240\3\0\1\240\51\0\1\u011d"+
    "\54\0\1\u011e\43\0\1\u011f\71\0\1\u0120\36\0\1\u0121"+
    "\57\0\1\277\2\0\1\277\3\0\2\277\3\0\31\277"+
    "\3\0\1\277\31\0\1\u0122\65\0\1\u0123\61\0\1\u0124"+
    "\73\0\1\u0125\57\0\1\u0126\46\0\1\u0127\65\0\1\u0128"+
    "\54\0\1\u0129\73\0\1\u012a\61\0\1\u012b\50\0\1\u012c"+
    "\101\0\1\u012d\45\0\1\u012e\67\0\1\u012f\47\0\1\u0130"+
    "\41\0\1\u0131\1\0\1\u0132\44\0\1\u0132\12\0\1\321"+
    "\63\0\1\u0133\1\324\2\0\1\u0133\5\0\6\u0133\42\0"+
    "\1\u0134\1\u0109\2\0\1\u0134\5\0\6\u0134\42\0\1\u0135"+
    "\1\u0136\2\0\1\u0135\3\0\1\u0137\1\0\6\u0135\101\0"+
    "\1\u0138\52\0\1\326\46\0\1\326\74\0\1\u0139\45\0"+
    "\1\u013a\67\0\1\u013b\54\0\1\u013c\76\0\1\u013d\65\0"+
    "\1\u013e\61\0\1\u013f\35\0\1\u0140\65\0\1\u0141\61\0"+
    "\1\u0142\75\0\1\u0143\43\0\1\u0144\100\0\1\u0145\61\0"+
    "\1\u0146\16\0\1\350\1\236\1\0\1\350\1\0\2\350"+
    "\1\0\1\350\3\0\2\350\3\0\31\350\3\0\1\350"+
    "\4\0\1\353\1\241\1\0\1\353\1\0\2\353\1\0"+
    "\1\353\3\0\2\353\3\0\31\353\3\0\1\353\32\0"+
    "\1\u0147\103\0\1\u0148\36\0\1\u0149\43\0\1\u014a\100\0"+
    "\1\u014b\72\0\1\u014c\66\0\1\u014d\60\0\1\u014e\37\0"+
    "\1\u014f\64\0\1\u0150\62\0\1\u0151\75\0\1\u0152\41\0"+
    "\1\u0153\62\0\1\u0154\100\0\1\u0155\57\0\1\u0156\63\0"+
    "\1\u0157\30\0\1\u0158\44\0\1\u0158\12\0\1\u0131\1\0"+
    "\1\u0159\44\0\1\u0159\14\0\1\u015a\1\324\2\0\1\u015a"+
    "\5\0\6\u015a\42\0\1\u015b\1\u0109\2\0\1\u015b\5\0"+
    "\6\u015b\42\0\1\u015c\1\u0136\2\0\1\u015c\3\0\1\u0137"+
    "\1\0\6\u015c\42\0\1\u015d\1\u015e\2\0\1\u015d\3\0"+
    "\1\u0137\1\0\6\u015d\41\0\1\u015f\103\0\1\u0160\65\0"+
    "\1\u0161\46\0\1\u0162\101\0\1\u0163\61\0\1\u0164\42\0"+
    "\1\u0165\105\0\1\u0166\33\0\1\u0167\77\0\1\u0168\66\0"+
    "\1\u0169\37\0\1\u016a\60\0\1\u016b\66\0\1\u016c\74\0"+
    "\1\u016d\45\0\1\u016e\76\0\1\u016f\61\0\1\u0170\40\0"+
    "\1\u0171\66\0\1\u0172\75\0\1\u0173\60\0\1\u0174\56\0"+
    "\1\u0175\65\0\1\u0176\25\0\1\u0177\1\0\1\u0178\44\0"+
    "\1\u0178\12\0\1\u0131\64\0\1\324\60\0\1\u0179\1\u0109"+
    "\2\0\1\u0179\5\0\6\u0179\42\0\1\u017a\1\u0136\2\0"+
    "\1\u017a\3\0\1\u0137\1\0\6\u017a\42\0\1\u017b\1\u015e"+
    "\2\0\1\u017b\3\0\1\u0137\1\0\6\u017b\42\0\1\u017c"+
    "\1\u017d\2\0\1\u017c\3\0\1\u0137\1\0\6\u017c\26\0"+
    "\1\u017e\4\0\55\u017e\50\0\1\u017f\45\0\1\u0180\57\0"+
    "\1\u0181\61\0\1\u0182\67\0\1\u0183\70\0\1\u0184\53\0"+
    "\1\u0185\66\0\1\u0186\53\0\1\u0187\56\0\1\u0188\71\0"+
    "\1\u0189\46\0\1\u018a\55\0\1\u018b\65\0\1\u018c\60\0"+
    "\1\u018d\61\0\1\u018e\62\0\1\u018f\43\0\1\u0190\44\0"+
    "\1\u0190\12\0\1\u0177\1\0\1\u0191\44\0\1\u0191\15\0"+
    "\1\u0109\60\0\1\u0192\1\u0136\2\0\1\u0192\3\0\1\u0137"+
    "\1\0\6\u0192\42\0\1\u0193\1\u015e\2\0\1\u0193\3\0"+
    "\1\u0137\1\0\6\u0193\42\0\1\u0194\1\u017d\2\0\1\u0194"+
    "\3\0\1\u0137\1\0\6\u0194\42\0\1\u0195\1\u0196\2\0"+
    "\1\u0195\3\0\1\u0137\1\0\6\u0195\67\0\1\u0197\52\0"+
    "\1\u0198\61\0\1\u0199\64\0\1\u019a\70\0\1\u019b\42\0"+
    "\1\u019c\66\0\1\u019d\54\0\1\u019e\101\0\1\u019f\64\0"+
    "\1\u01a0\56\0\1\u01a1\41\0\1\u01a2\61\0\1\u01a3\50\0"+
    "\1\u01a4\44\0\1\u01a4\12\0\1\u0177\64\0\1\u0136\6\0"+
    "\1\u0137\51\0\1\u01a5\1\u015e\2\0\1\u01a5\3\0\1\u0137"+
    "\1\0\6\u01a5\42\0\1\u01a6\1\u017d\2\0\1\u01a6\3\0"+
    "\1\u0137\1\0\6\u01a6\42\0\1\u01a7\1\u0196\2\0\1\u01a7"+
    "\3\0\1\u0137\1\0\6\u01a7\42\0\1\u01a8\1\u01a9\2\0"+
    "\1\u01a8\3\0\1\u0137\1\0\6\u01a8\53\0\1\u01aa\61\0"+
    "\1\u01ab\101\0\1\u01ac\61\0\1\u01ad\62\0\1\u01ae\41\0"+
    "\1\u01af\103\0\1\u01b0\62\0\1\u01b1\57\0\1\u01b2\63\0"+
    "\1\u01b3\36\0\1\u01b4\77\0\1\u01b5\31\0\1\u01b6\44\0"+
    "\1\u01b6\15\0\1\u015e\6\0\1\u0137\51\0\1\u01b7\1\u017d"+
    "\2\0\1\u01b7\3\0\1\u0137\1\0\6\u01b7\42\0\1\u01b8"+
    "\1\u0196\2\0\1\u01b8\3\0\1\u0137\1\0\6\u01b8\42\0"+
    "\1\u01b9\1\u01a9\2\0\1\u01b9\3\0\1\u0137\1\0\6\u01b9"+
    "\42\0\1\u01ba\3\0\1\u01ba\3\0\1\u0137\1\0\6\u01ba"+
    "\66\0\1\u01bb\51\0\1\u01bc\101\0\1\u01bd\43\0\1\u01be"+
    "\103\0\1\u01bf\36\0\1\u01c0\74\0\1\u01c1\47\0\1\u01c2"+
    "\64\0\1\u01c3\56\0\1\u01c4\77\0\1\u01c5\56\0\1\u01c6"+
    "\31\0\1\u017d\6\0\1\u0137\51\0\1\u01c7\1\u0196\2\0"+
    "\1\u01c7\3\0\1\u0137\1\0\6\u01c7\42\0\1\u01c8\1\u01a9"+
    "\2\0\1\u01c8\3\0\1\u0137\1\0\6\u01c8\42\0\1\u01c9"+
    "\3\0\1\u01c9\3\0\1\u0137\1\0\6\u01c9\60\0\1\u01ca"+
    "\55\0\1\u01cb\101\0\1\u01cc\54\0\1\u01cd\52\0\1\u01ce"+
    "\74\0\1\u01cf\61\0\1\u01d0\63\0\1\u01d1\55\0\1\u01d2"+
    "\33\0\1\u0196\6\0\1\u0137\51\0\1\u01d3\1\u01a9\2\0"+
    "\1\u01d3\3\0\1\u0137\1\0\6\u01d3\42\0\1\u01d4\3\0"+
    "\1\u01d4\3\0\1\u0137\1\0\6\u01d4\70\0\1\u01d5\61\0"+
    "\1\u01d6\65\0\1\u01d7\53\0\1\u01d8\66\0\1\u01d9\51\0"+
    "\1\u01da\77\0\1\u01db\23\0\1\u01a9\6\0\1\u0137\51\0"+
    "\1\u01dc\3\0\1\u01dc\3\0\1\u0137\1\0\6\u01dc\62\0"+
    "\1\u01dd\70\0\1\u01de\50\0\1\u01df\65\0\1\u01e0\71\0"+
    "\1\u01e1\67\0\1\u01e2\31\0\1\u0137\104\0\1\u01e3\54\0"+
    "\1\u01e4\50\0\1\u01e5\72\0\1\u01e6\54\0\1\u01e7\62\0"+
    "\1\u01e8\62\0\1\u01e9\52\0\1\u01ea\77\0\1\u01eb\41\0"+
    "\1\u01ec\73\0\1\u01ed\46\0\1\u01ee\104\0\1\u01ef\56\0"+
    "\1\u01f0\52\0\1\u01f1\71\0\1\u01f2\13\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20650];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\64\0\2\1\1\11\4\1\3\11\4\1\1\11\1\1"+
    "\1\11\3\1\2\11\3\1\2\11\2\1\4\11\2\1"+
    "\1\11\3\1\1\11\1\1\1\11\4\1\3\11\7\1"+
    "\1\11\6\1\5\11\7\1\1\11\3\1\2\11\5\1"+
    "\2\11\4\1\1\11\14\1\1\11\2\1\1\11\2\1"+
    "\1\11\7\1\1\11\7\1\1\11\2\1\1\11\4\1"+
    "\1\11\4\1\1\11\1\1\23\0\1\11\12\0\1\11"+
    "\10\0\1\1\2\0\1\1\26\0\1\11\33\0\1\11"+
    "\3\0\1\11\4\0\1\11\15\0\1\11\1\0\1\11"+
    "\2\0\1\11\4\0\1\11\3\0\1\11\4\0\1\11"+
    "\3\0\1\11\3\0\1\11\2\0\1\11\12\0\1\11"+
    "\5\0\1\11\6\0\3\11\2\0\1\11\13\0\1\1"+
    "\2\0\2\11\3\0\1\11\7\0\1\11\1\0\1\1"+
    "\7\0\1\11\13\0\1\1\21\0\1\11\6\0\1\11"+
    "\3\0\1\11\1\0\1\11\13\0\2\11\11\0\1\11"+
    "\6\0\2\11\2\0\1\11\1\0\1\11\3\0\1\11"+
    "\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[498];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> _stateStack = new Stack<Integer>();
    private void _pushState(int state) {
        _stateStack.push(zzLexicalState);
        yybegin(state);
    }
    private void _popState() {
        yybegin(_stateStack.pop());
    }
    private void _clearStack() {
        _stateStack.clear();
    }
    private boolean _isStackEmpty() {
        return _stateStack.empty();
    }
    private boolean __IN_MATCH_DECLARE_ONE = false;
    private boolean __IN_GROUP_DIRECTIVE_ENCODE_ARGS = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaddyfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(BINDING_HOSTNAME); yypushback(yylength());
            }
          // fall through
          case 106: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 107: break;
          case 3:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 108: break;
          case 4:
            { return CaddyfileTypes.COMMENT;
            }
          // fall through
          case 109: break;
          case 5:
            { return CaddyfileTypes.TEXT;
            }
          // fall through
          case 110: break;
          case 6:
            { _popState(); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 111: break;
          case 7:
            { return CaddyfileTypes.STAR;
            }
          // fall through
          case 112: break;
          case 8:
            { return CaddyfileTypes.DOT;
            }
          // fall through
          case 113: break;
          case 9:
            { _pushState(PORT); return CaddyfileTypes.COLON;
            }
          // fall through
          case 114: break;
          case 10:
            { _popState(); return CaddyfileTypes.PORT;
            }
          // fall through
          case 115: break;
          case 11:
            { _pushState(HOSTNAME_MATCHER); yypushback(yylength());
            }
          // fall through
          case 116: break;
          case 12:
            { yybegin(GROUP); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 117: break;
          case 13:
            { if (yycharat(yylength()-2) != '\\') { _popState(); return CaddyfileTypes.QUOTATION; }
            }
          // fall through
          case 118: break;
          case 14:
            { return CaddyfileTypes.VARIABLE_NAME;
            }
          // fall through
          case 119: break;
          case 15:
            { return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 120: break;
          case 16:
            { _popState(); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 121: break;
          case 17:
            { _popState(); yypushback(yylength());
            }
          // fall through
          case 122: break;
          case 18:
            { _pushState(VARIABLE); yypushback(yylength());
            }
          // fall through
          case 123: break;
          case 19:
            { _pushState(MATCHER_ONE); yypushback(yylength());
            }
          // fall through
          case 124: break;
          case 20:
            { _pushState(MATCHER_TWO); yypushback(yylength());
            }
          // fall through
          case 125: break;
          case 21:
            { _pushState(MATCHER_THR); return CaddyfileTypes.AT;
            }
          // fall through
          case 126: break;
          case 22:
            { _popState(); return CaddyfileTypes.STAR;
            }
          // fall through
          case 127: break;
          case 23:
            { return CaddyfileTypes.SLASH;
            }
          // fall through
          case 128: break;
          case 24:
            { _popState(); return CaddyfileTypes.MATCHER_NAME;
            }
          // fall through
          case 129: break;
          case 25:
            { _pushState(MATCH_DECLARE_DIRECTIVE); return CaddyfileTypes.MATCH_NAME;
            }
          // fall through
          case 130: break;
          case 26:
            { if (!__IN_MATCH_DECLARE_ONE) { _popState(); yypushback(yylength()); } else { return TokenType.WHITE_SPACE; }
            }
          // fall through
          case 131: break;
          case 27:
            { __IN_MATCH_DECLARE_ONE = true; return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 132: break;
          case 28:
            { return CaddyfileTypes.MATCH_DECLARE_TWO_SEP;
            }
          // fall through
          case 133: break;
          case 29:
            { __IN_MATCH_DECLARE_ONE = false; _popState(); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 134: break;
          case 30:
            { _pushState(MATCH_DECLARE_DIR_HEADER_VALUE); return CaddyfileTypes.HEADER;
            }
          // fall through
          case 135: break;
          case 31:
            { _popState(); return CaddyfileTypes.HEADER_VALUE;
            }
          // fall through
          case 136: break;
          case 32:
            { return CaddyfileTypes.METHOD;
            }
          // fall through
          case 137: break;
          case 33:
            { return CaddyfileTypes.STATUS_CODE;
            }
          // fall through
          case 138: break;
          case 34:
            { yybegin(MATCH_DECLARE); return CaddyfileTypes.MATCH_DECLARE;
            }
          // fall through
          case 139: break;
          case 35:
            { yybegin(YYINITIAL); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 140: break;
          case 36:
            { yybegin(GROUP); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 141: break;
          case 37:
            { _pushState(MATCHER); yypushback(yylength());
            }
          // fall through
          case 142: break;
          case 38:
            { _pushState(GROUP_DIRECTIVE_BASIC_AUTH_SERECTS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 143: break;
          case 39:
            { _pushState(GROUP_DIRECTIVE_BASIC_AUTH_PASSWORD); return CaddyfileTypes.USERNAME;
            }
          // fall through
          case 144: break;
          case 40:
            { _popState(); return CaddyfileTypes.PASSWORD;
            }
          // fall through
          case 145: break;
          case 41:
            { if (_isStackEmpty()) yybegin(GROUP); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 146: break;
          case 42:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 147: break;
          case 43:
            { yybegin(GROUP); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 148: break;
          case 44:
            { _popState(); return CaddyfileTypes.GZIP_LEVEL;
            }
          // fall through
          case 149: break;
          case 45:
            { _popState(); return CaddyfileTypes.MINIMUM_LENGTH;
            }
          // fall through
          case 150: break;
          case 46:
            { _pushState(QUOTED_STRING); return CaddyfileTypes.QUOTATION;
            }
          // fall through
          case 151: break;
          case 47:
            { _pushState(GROUP_DIRECTIVE_ERROR_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 152: break;
          case 48:
            { _popState(); return CaddyfileTypes.TEXT;
            }
          // fall through
          case 153: break;
          case 49:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 154: break;
          case 50:
            { return CaddyfileTypes.BACKEND;
            }
          // fall through
          case 155: break;
          case 51:
            { _popState(); return CaddyfileTypes.FILEPATH;
            }
          // fall through
          case 156: break;
          case 52:
            { return CaddyfileTypes.FILEPATH;
            }
          // fall through
          case 157: break;
          case 53:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_BROWSE_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 158: break;
          case 54:
            { return CaddyfileTypes.COMPRESSION_METHOD;
            }
          // fall through
          case 159: break;
          case 55:
            { _popState(); return CaddyfileTypes.STATUS_CODE;
            }
          // fall through
          case 160: break;
          case 56:
            { return CaddyfileTypes.UPSTREAM;
            }
          // fall through
          case 161: break;
          case 57:
            { _pushState(GROUP_DIRECTIVE_FORWARD_AUTH_ARG); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 162: break;
          case 58:
            { _popState(); return CaddyfileTypes.URI;
            }
          // fall through
          case 163: break;
          case 59:
            { return CaddyfileTypes.HEADER;
            }
          // fall through
          case 164: break;
          case 60:
            { _pushState(GROUP_DIRECTIVE_FORWARD_AUTH_ARG_COPY_HEADERS_ARG); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 165: break;
          case 61:
            { return CaddyfileTypes.COPY_TO;
            }
          // fall through
          case 166: break;
          case 62:
            { _pushState(GROUP_DIRECTIVE_FORWARD_AUTH_ARG_HEADER_UP_VALUE); return CaddyfileTypes.HEADER;
            }
          // fall through
          case 167: break;
          case 63:
            { _pushState(VARIABLE_STRING); yypushback(yylength());
            }
          // fall through
          case 168: break;
          case 64:
            { return CaddyfileTypes.HOSTNAME;
            }
          // fall through
          case 169: break;
          case 65:
            { return CaddyfileTypes.PORT;
            }
          // fall through
          case 170: break;
          case 66:
            { return CaddyfileTypes.COLON;
            }
          // fall through
          case 171: break;
          case 67:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_FS); return CaddyfileTypes.FILE_SERVER_ARG_FS;
            }
          // fall through
          case 172: break;
          case 68:
            { yybegin(GROUP_DIRECTIVE_TLS); return CaddyfileTypes.TLS;
            }
          // fall through
          case 173: break;
          case 69:
            { _pushState(GROUP_DIRECTIVE_FORWARD_AUTH_ARG_URI); return CaddyfileTypes.FORWARD_AUTH_ARG_URI;
            }
          // fall through
          case 174: break;
          case 70:
            { _pushState(MATCHER_TWO); return CaddyfileTypes.MATCH_DECLARE_DIR_PATH;
            }
          // fall through
          case 175: break;
          case 71:
            { yybegin(GROUP_DIRECTIVE_BIND); return CaddyfileTypes.BIND;
            }
          // fall through
          case 176: break;
          case 72:
            { return CaddyfileTypes.IPV6;
            }
          // fall through
          case 177: break;
          case 73:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_GZIP); return CaddyfileTypes.ENCODE_ARG_GZIP;
            }
          // fall through
          case 178: break;
          case 74:
            { return CaddyfileTypes.ENCODE_ARG_ZSTD;
            }
          // fall through
          case 179: break;
          case 75:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_HIDE); return CaddyfileTypes.FILE_SERVER_ARG_HIDE;
            }
          // fall through
          case 180: break;
          case 76:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_ROOT); return CaddyfileTypes.FILE_SERVER_ARG_ROOT;
            }
          // fall through
          case 181: break;
          case 77:
            { return CaddyfileTypes.PROTOCOL;
            }
          // fall through
          case 182: break;
          case 78:
            { yybegin(GROUP_DIRECTIVE_ABORT); return CaddyfileTypes.ABORT;
            }
          // fall through
          case 183: break;
          case 79:
            { yybegin(GROUP_DIRECTIVE_ERROR); return CaddyfileTypes.ERROR;
            }
          // fall through
          case 184: break;
          case 80:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.REDIR;
            }
          // fall through
          case 185: break;
          case 81:
            { _pushState(MATCH_DECLARE_DIRECTIVE); return CaddyfileTypes.MATCH_DIRECTIVE;
            }
          // fall through
          case 186: break;
          case 82:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_INDEX); return CaddyfileTypes.FILE_SERVER_ARG_INDEX;
            }
          // fall through
          case 187: break;
          case 83:
            { _pushState(MATCH_DECLARE_DIR_HEADER); return CaddyfileTypes.MATCH_DECLARE_DIR_HEADER;
            }
          // fall through
          case 188: break;
          case 84:
            { _pushState(MATCH_DECLARE_DIR_METHOD); return CaddyfileTypes.MATCH_DECLARE_DIR_METHOD;
            }
          // fall through
          case 189: break;
          case 85:
            { _pushState(MATCH_DECLARE_DIR_STATUS); return CaddyfileTypes.MATCH_DECLARE_DIR_STATUS;
            }
          // fall through
          case 190: break;
          case 86:
            { yybegin(GROUP_DIRECTIVE_ENCODE); return CaddyfileTypes.ENCODE;
            }
          // fall through
          case 191: break;
          case 87:
            { return CaddyfileTypes.UNIX_SOCKET;
            }
          // fall through
          case 192: break;
          case 88:
            { return CaddyfileTypes.FILE_SERVER_BROWSE;
            }
          // fall through
          case 193: break;
          case 89:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_BROWSE); return CaddyfileTypes.FILE_SERVER_ARG_BROWSE;
            }
          // fall through
          case 194: break;
          case 90:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_STATUS); return CaddyfileTypes.FILE_SERVER_ARG_STATUS;
            }
          // fall through
          case 195: break;
          case 91:
            { yybegin(GROUP_DIRECTIVE_RESPOND); return CaddyfileTypes.RESPOND;
            }
          // fall through
          case 196: break;
          case 92:
            { return CaddyfileTypes.IPV4;
            }
          // fall through
          case 197: break;
          case 93:
            { _pushState(GROUP_DIRECTIVE_ERROR_ARGS_MESSAGE); return CaddyfileTypes.ERROR_ARG_MESSAGE;
            }
          // fall through
          case 198: break;
          case 94:
            { return CaddyfileTypes.FILE_SERVER_ARG_PASS_THRU;
            }
          // fall through
          case 199: break;
          case 95:
            { _pushState(GROUP_DIRECTIVE_FORWARD_AUTH_ARG_HEADER_UP); return CaddyfileTypes.FORWARD_AUTH_ARG_HEADER_UP;
            }
          // fall through
          case 200: break;
          case 96:
            { yybegin(GROUP_DIRECTIVE_BASIC_AUTH); return CaddyfileTypes.BASIC_AUTH;
            }
          // fall through
          case 201: break;
          case 97:
            { yybegin(GROUP_DIRECTIVE_ACME_SERVER); return CaddyfileTypes.ACME_SERVER;
            }
          // fall through
          case 202: break;
          case 98:
            { yybegin(GROUP_DIRECTIVE_FILE_SERVER); return CaddyfileTypes.FILE_SERVER;
            }
          // fall through
          case 203: break;
          case 99:
            { yybegin(GROUP_DIRECTIVE_FORWARD_AUTH); return CaddyfileTypes.FORWARD_AUTH;
            }
          // fall through
          case 204: break;
          case 100:
            { _pushState(GROUP_DIRECTIVE_FORWARD_AUTH_ARG_COPY_HEADERS); return CaddyfileTypes.FORWARD_AUTH_ARG_COPY_HEADERS;
            }
          // fall through
          case 205: break;
          case 101:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return CaddyfileTypes.REVERSE_PROXY;
            }
          // fall through
          case 206: break;
          case 102:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_PRECOMPRESSED); return CaddyfileTypes.FILE_SERVER_ARG_PRECOMPRESSED;
            }
          // fall through
          case 207: break;
          case 103:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MINIMUM_LENGTH); return CaddyfileTypes.ENCODE_ARG_MINIMUM_LENGTH;
            }
          // fall through
          case 208: break;
          case 104:
            { return CaddyfileTypes.FILE_SERVER_ARG_BROWSE_ARG_REVEAL_SYMLINKS;
            }
          // fall through
          case 209: break;
          case 105:
            { return CaddyfileTypes.FILE_SERVER_ARG_DISABLE_CANONICAL_URIS;
            }
          // fall through
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

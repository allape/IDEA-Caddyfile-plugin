// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Caddyfile.flex

package cc.allape.caddyfile.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import cc.allape.caddyfile.language.psi.CaddyfileTypes;
import com.intellij.psi.TokenType;


public class CaddyfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BINDING = 2;
  public static final int GROUP = 4;
  public static final int GROUP_DIRECTIVE_TLS = 6;
  public static final int GROUP_DIRECTIVE_REDIR = 8;
  public static final int GROUP_DIRECTIVE_RESPOND = 10;
  public static final int GROUP_DIRECTIVE_REVERSE_PROXY = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\6\11\0\1\7\1\10\1\11\12\12\1\13"+
    "\6\0\32\14\1\0\1\15\2\0\1\16\1\0\3\14"+
    "\1\17\1\20\2\14\1\21\1\22\2\14\1\23\1\14"+
    "\1\24\1\25\1\26\1\14\1\27\1\30\1\31\1\14"+
    "\1\32\1\14\1\33\1\34\1\14\1\35\1\0\1\36"+
    "\7\0\1\3\32\0\1\3\11\0\1\14\12\0\1\14"+
    "\4\0\1\14\5\0\27\14\1\0\37\14\1\0\u01ca\14"+
    "\4\0\14\14\16\0\5\14\7\0\1\14\1\0\1\14"+
    "\21\0\165\14\1\0\2\14\2\0\4\14\1\0\1\14"+
    "\6\0\1\14\1\0\3\14\1\0\1\14\1\0\24\14"+
    "\1\0\123\14\1\0\213\14\1\0\255\14\1\0\46\14"+
    "\2\0\1\14\6\0\51\14\10\0\55\14\1\0\1\14"+
    "\1\0\2\14\1\0\2\14\1\0\1\14\10\0\33\14"+
    "\4\0\4\14\35\0\13\14\5\0\100\14\12\12\4\0"+
    "\146\14\1\0\10\14\2\0\12\14\1\0\6\14\12\12"+
    "\3\14\2\0\1\14\20\0\73\14\2\0\145\14\16\0"+
    "\12\12\54\14\4\0\1\14\2\0\1\14\2\0\56\14"+
    "\22\0\34\14\4\0\13\14\65\0\25\14\1\0\10\14"+
    "\25\0\17\14\1\0\201\14\2\0\12\12\1\0\23\14"+
    "\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14"+
    "\1\0\1\14\3\0\4\14\2\0\11\14\2\0\2\14"+
    "\2\0\4\14\10\0\1\14\4\0\2\14\1\0\5\14"+
    "\2\0\12\12\2\14\12\0\1\14\1\0\1\14\2\0"+
    "\3\14\1\0\6\14\4\0\2\14\2\0\26\14\1\0"+
    "\7\14\1\0\2\14\1\0\2\14\1\0\2\14\2\0"+
    "\1\14\1\0\5\14\4\0\2\14\2\0\3\14\3\0"+
    "\1\14\7\0\4\14\1\0\1\14\7\0\12\12\6\14"+
    "\13\0\3\14\1\0\11\14\1\0\3\14\1\0\26\14"+
    "\1\0\7\14\1\0\2\14\1\0\5\14\2\0\12\14"+
    "\1\0\3\14\1\0\3\14\2\0\1\14\17\0\4\14"+
    "\2\0\12\12\11\0\7\14\1\0\3\14\1\0\10\14"+
    "\2\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14"+
    "\1\0\5\14\2\0\11\14\2\0\2\14\2\0\3\14"+
    "\10\0\2\14\4\0\2\14\1\0\5\14\2\0\12\12"+
    "\1\0\1\14\20\0\2\14\1\0\6\14\3\0\3\14"+
    "\1\0\4\14\3\0\2\14\1\0\1\14\1\0\2\14"+
    "\3\0\2\14\3\0\3\14\3\0\14\14\4\0\5\14"+
    "\3\0\3\14\1\0\4\14\2\0\1\14\6\0\1\14"+
    "\16\0\12\12\20\0\15\14\1\0\3\14\1\0\27\14"+
    "\1\0\20\14\3\0\10\14\1\0\3\14\1\0\4\14"+
    "\7\0\2\14\1\0\3\14\5\0\4\14\2\0\12\12"+
    "\20\0\4\14\1\0\10\14\1\0\3\14\1\0\27\14"+
    "\1\0\12\14\1\0\5\14\2\0\11\14\1\0\3\14"+
    "\1\0\4\14\7\0\2\14\7\0\1\14\1\0\4\14"+
    "\2\0\12\12\1\0\2\14\15\0\4\14\1\0\10\14"+
    "\1\0\3\14\1\0\63\14\1\0\3\14\1\0\5\14"+
    "\5\0\4\14\7\0\5\14\2\0\12\12\12\0\6\14"+
    "\2\0\2\14\1\0\22\14\3\0\30\14\1\0\11\14"+
    "\1\0\1\14\2\0\7\14\3\0\1\14\4\0\6\14"+
    "\1\0\1\14\1\0\10\14\6\0\12\12\2\0\2\14"+
    "\15\0\72\14\5\0\17\14\1\0\12\12\47\0\2\14"+
    "\1\0\1\14\1\0\5\14\1\0\30\14\1\0\1\14"+
    "\1\0\27\14\2\0\5\14\1\0\1\14\1\0\6\14"+
    "\2\0\12\12\2\0\4\14\40\0\1\14\27\0\2\14"+
    "\6\0\12\12\13\0\1\14\1\0\1\14\1\0\1\14"+
    "\4\0\12\14\1\0\44\14\4\0\24\14\1\0\22\14"+
    "\1\0\44\14\11\0\1\14\71\0\100\14\12\12\6\0"+
    "\100\14\12\12\4\14\2\0\46\14\1\0\1\14\5\0"+
    "\1\14\2\0\53\14\1\0\115\14\1\0\4\14\2\0"+
    "\7\14\1\0\1\14\1\0\4\14\2\0\51\14\1\0"+
    "\4\14\2\0\41\14\1\0\4\14\2\0\7\14\1\0"+
    "\1\14\1\0\4\14\2\0\17\14\1\0\71\14\1\0"+
    "\4\14\2\0\103\14\2\0\3\14\40\0\20\14\20\0"+
    "\126\14\2\0\6\14\3\0\u016c\14\2\0\21\14\1\3"+
    "\32\14\5\0\113\14\3\0\13\14\7\0\15\14\1\0"+
    "\7\14\13\0\25\14\13\0\24\14\14\0\15\14\1\0"+
    "\3\14\1\0\2\14\14\0\124\14\3\0\1\14\4\0"+
    "\2\14\2\0\12\12\41\0\3\14\2\0\12\12\6\0"+
    "\131\14\7\0\53\14\5\0\106\14\12\0\37\14\1\0"+
    "\14\14\4\0\14\14\12\0\12\12\36\14\2\0\5\14"+
    "\13\0\54\14\4\0\32\14\6\0\12\12\46\0\34\14"+
    "\4\0\77\14\1\0\35\14\2\0\1\14\12\12\6\0"+
    "\12\12\15\0\1\14\10\0\17\14\101\0\114\14\4\0"+
    "\12\12\21\0\11\14\14\0\60\14\12\12\72\14\14\0"+
    "\70\14\10\0\12\12\3\0\3\14\12\12\44\14\2\0"+
    "\11\14\7\0\53\14\2\0\3\14\20\0\3\14\1\0"+
    "\47\14\5\0\372\14\1\0\33\14\2\0\6\14\2\0"+
    "\46\14\2\0\6\14\2\0\10\14\1\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\37\14\2\0\65\14\1\0"+
    "\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0"+
    "\4\14\2\0\6\14\4\0\15\14\5\0\3\14\1\0"+
    "\7\14\3\0\13\3\35\0\2\3\5\0\1\3\17\0"+
    "\2\14\23\0\1\14\12\0\1\3\21\0\1\14\15\0"+
    "\1\14\20\0\15\14\63\0\41\14\21\0\1\14\4\0"+
    "\1\14\2\0\12\14\1\0\1\14\3\0\5\14\6\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\4\14\1\0"+
    "\13\14\2\0\4\14\5\0\5\14\4\0\1\14\21\0"+
    "\51\14\u022d\0\64\14\26\0\57\14\1\0\57\14\1\0"+
    "\205\14\6\0\11\14\14\0\46\14\1\0\1\14\5\0"+
    "\1\14\2\0\70\14\7\0\1\14\17\0\30\14\11\0"+
    "\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0"+
    "\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0"+
    "\40\14\57\0\1\14\320\0\1\3\4\0\3\14\31\0"+
    "\17\14\1\0\5\14\2\0\5\14\4\0\126\14\2\0"+
    "\2\14\2\0\3\14\1\0\132\14\1\0\4\14\5\0"+
    "\53\14\1\0\136\14\21\0\33\14\65\0\306\14\112\0"+
    "\360\14\20\0\215\14\103\0\56\14\2\0\15\14\3\0"+
    "\20\14\12\12\2\14\24\0\63\14\1\0\12\14\1\0"+
    "\163\14\45\0\11\14\2\0\147\14\2\0\65\14\2\0"+
    "\5\14\60\0\61\14\30\0\64\14\14\0\106\14\12\0"+
    "\12\12\6\0\30\14\3\0\1\14\1\0\3\14\12\12"+
    "\44\14\2\0\44\14\14\0\35\14\3\0\101\14\16\0"+
    "\1\14\12\12\6\0\20\14\12\12\5\14\1\0\67\14"+
    "\11\0\16\14\2\0\12\12\6\0\27\14\3\0\111\14"+
    "\30\0\3\14\2\0\20\14\2\0\5\14\12\0\6\14"+
    "\2\0\6\14\2\0\6\14\11\0\7\14\1\0\7\14"+
    "\1\0\53\14\1\0\14\14\10\0\173\14\1\0\2\14"+
    "\2\0\12\12\6\0\244\14\14\0\27\14\4\0\61\14"+
    "\4\0\156\14\2\0\152\14\46\0\7\14\14\0\5\14"+
    "\5\0\14\14\1\0\15\14\1\0\5\14\1\0\1\14"+
    "\1\0\2\14\1\0\2\14\1\0\154\14\41\0\153\14"+
    "\22\0\100\14\2\0\66\14\50\0\14\14\4\0\20\14"+
    "\20\0\20\14\3\0\2\14\30\0\3\14\40\0\5\14"+
    "\1\0\207\14\23\0\12\12\7\0\32\14\4\0\1\14"+
    "\1\0\32\14\13\0\131\14\3\0\6\14\2\0\6\14"+
    "\2\0\6\14\2\0\3\14\43\0\14\14\1\0\32\14"+
    "\1\0\23\14\1\0\2\14\1\0\17\14\2\0\16\14"+
    "\42\0\173\14\105\0\65\14\210\0\1\14\202\0\35\14"+
    "\3\0\61\14\17\0\1\14\37\0\40\14\15\0\36\14"+
    "\5\0\53\14\5\0\36\14\2\0\44\14\4\0\10\14"+
    "\1\0\5\14\52\0\236\14\2\0\12\12\6\0\44\14"+
    "\4\0\44\14\4\0\50\14\10\0\64\14\234\0\67\14"+
    "\11\0\26\14\12\0\10\14\230\0\6\14\2\0\1\14"+
    "\1\0\54\14\1\0\2\14\3\0\1\14\2\0\27\14"+
    "\12\0\27\14\11\0\37\14\101\0\23\14\1\0\2\14"+
    "\12\0\26\14\12\0\32\14\106\0\70\14\6\0\2\14"+
    "\100\0\4\14\1\0\2\14\5\0\10\14\1\0\3\14"+
    "\1\0\35\14\2\0\3\14\4\0\1\14\40\0\35\14"+
    "\3\0\35\14\43\0\10\14\1\0\36\14\31\0\66\14"+
    "\12\0\26\14\12\0\23\14\15\0\22\14\156\0\111\14"+
    "\67\0\63\14\15\0\63\14\15\0\50\14\10\0\12\12"+
    "\306\0\35\14\12\0\1\14\10\0\41\14\217\0\27\14"+
    "\11\0\107\14\37\0\12\12\17\0\74\14\25\0\31\14"+
    "\7\0\12\12\6\0\65\14\1\0\12\12\4\0\3\14"+
    "\11\0\44\14\2\0\1\14\11\0\105\14\4\0\4\14"+
    "\3\0\12\12\1\14\1\0\1\14\43\0\22\14\1\0"+
    "\45\14\6\0\1\14\101\0\7\14\1\0\1\14\1\0"+
    "\4\14\1\0\17\14\1\0\12\14\7\0\73\14\5\0"+
    "\12\12\6\0\4\14\1\0\10\14\2\0\2\14\2\0"+
    "\26\14\1\0\7\14\1\0\2\14\1\0\5\14\1\0"+
    "\12\14\2\0\2\14\2\0\3\14\2\0\1\14\6\0"+
    "\1\14\5\0\7\14\2\0\7\14\3\0\5\14\213\0"+
    "\113\14\5\0\12\12\4\0\2\14\40\0\106\14\1\0"+
    "\1\14\10\0\12\12\246\0\66\14\2\0\11\14\27\0"+
    "\6\14\42\0\101\14\3\0\1\14\13\0\12\12\46\0"+
    "\71\14\7\0\12\12\66\0\33\14\2\0\17\14\4\0"+
    "\12\12\306\0\73\14\145\0\100\14\12\12\25\0\1\14"+
    "\240\0\10\14\2\0\56\14\2\0\10\14\1\0\2\14"+
    "\33\0\77\14\10\0\1\14\10\0\112\14\3\0\1\14"+
    "\42\0\71\14\7\0\11\14\1\0\55\14\1\0\11\14"+
    "\17\0\12\12\30\0\36\14\2\0\26\14\1\0\16\14"+
    "\111\0\7\14\1\0\2\14\1\0\54\14\3\0\1\14"+
    "\1\0\2\14\1\0\11\14\10\0\12\12\6\0\6\14"+
    "\1\0\2\14\1\0\45\14\1\0\2\14\1\0\6\14"+
    "\7\0\12\12\u0136\0\27\14\11\0\232\14\146\0\157\14"+
    "\21\0\304\14\274\0\57\14\321\0\107\14\271\0\71\14"+
    "\7\0\37\14\1\0\12\12\146\0\36\14\2\0\5\14"+
    "\13\0\67\14\11\0\4\14\14\0\12\12\11\0\25\14"+
    "\5\0\23\14\260\0\100\14\200\0\113\14\4\0\71\14"+
    "\7\0\21\14\100\0\2\14\1\0\1\14\34\0\370\14"+
    "\10\0\363\14\15\0\37\14\61\0\3\14\21\0\4\14"+
    "\10\0\u018c\14\4\0\153\14\5\0\15\14\3\0\11\14"+
    "\7\0\12\14\3\0\2\14\306\0\5\14\3\0\6\14"+
    "\10\0\10\14\2\0\7\14\36\0\4\14\224\0\3\14"+
    "\273\0\125\14\1\0\107\14\1\0\2\14\2\0\1\14"+
    "\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1\14"+
    "\1\0\7\14\1\0\101\14\1\0\4\14\2\0\10\14"+
    "\1\0\7\14\1\0\34\14\1\0\4\14\1\0\5\14"+
    "\1\0\1\14\3\0\7\14\1\0\u0154\14\2\0\31\14"+
    "\1\0\31\14\1\0\37\14\1\0\31\14\1\0\37\14"+
    "\1\0\31\14\1\0\37\14\1\0\31\14\1\0\37\14"+
    "\1\0\31\14\1\0\10\14\2\0\62\12\67\14\4\0"+
    "\62\14\10\0\1\14\16\0\1\14\26\0\5\14\1\0"+
    "\17\14\120\0\7\14\1\0\21\14\2\0\7\14\1\0"+
    "\2\14\1\0\5\14\325\0\55\14\3\0\16\14\2\0"+
    "\12\12\4\0\1\14\u0171\0\60\14\12\12\6\0\305\14"+
    "\13\0\7\14\51\0\114\14\4\0\12\12\246\0\4\14"+
    "\1\0\33\14\1\0\2\14\1\0\1\14\2\0\1\14"+
    "\1\0\12\14\1\0\4\14\1\0\1\14\1\0\1\14"+
    "\6\0\1\14\4\0\1\14\1\0\1\14\1\0\1\14"+
    "\1\0\3\14\1\0\2\14\1\0\1\14\2\0\1\14"+
    "\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14"+
    "\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7\14"+
    "\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12\14"+
    "\1\0\21\14\5\0\3\14\1\0\5\14\1\0\21\14"+
    "\164\0\32\14\6\0\32\14\6\0\32\14\166\0\327\14"+
    "\51\0\65\14\13\0\336\14\2\0\u0182\14\16\0\u0131\14"+
    "\37\0\36\14\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\3\1\13\1\14\1\11\1\3"+
    "\1\15\1\3\1\16\1\17\1\20\1\21\1\17\1\3"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\25\16\0"+
    "\1\30\1\15\7\0\1\31\1\0\1\32\1\33\5\0"+
    "\1\34\1\35\6\0\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0117\0\u0117\0\u0193"+
    "\0\u01b2\0\u01d1\0\u01f0\0\u0117\0\u020f\0\u0117\0\u022e\0\u024d"+
    "\0\u026c\0\u028b\0\u02aa\0\u02c9\0\u0117\0\u02e8\0\u0307\0\u0326"+
    "\0\u0345\0\u0364\0\u0383\0\u03a2\0\u0117\0\u03c1\0\u03e0\0\u03ff"+
    "\0\u041e\0\u043d\0\u026c\0\u045c\0\u047b\0\u049a\0\u04b9\0\u04d8"+
    "\0\u04f7\0\u0516\0\u0535\0\u0554\0\u0117\0\u0117\0\u0573\0\u0592"+
    "\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u0117\0\u064c\0\u0117"+
    "\0\u0117\0\u066b\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u0117\0\u0117"+
    "\0\u0706\0\u0725\0\u0744\0\u0763\0\u0782\0\u07a1\0\u0117";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\12\1\11\1\10\1\13\30\10\1\12"+
    "\1\14\2\12\1\14\5\12\1\15\1\16\21\12\1\17"+
    "\2\12\2\20\1\12\1\20\1\12\1\21\20\12\1\22"+
    "\1\12\1\23\4\12\1\24\1\12\1\25\1\26\1\12"+
    "\1\25\1\27\1\12\2\30\1\31\1\30\1\12\1\30"+
    "\1\31\17\30\3\12\1\32\1\26\1\12\1\32\2\12"+
    "\1\33\2\12\1\34\1\35\1\36\1\12\17\36\1\37"+
    "\2\12\1\40\1\26\1\12\1\40\5\12\1\41\25\12"+
    "\1\42\1\26\1\12\1\42\2\12\1\43\2\12\1\44"+
    "\1\45\1\46\1\12\17\46\2\12\1\10\4\0\32\10"+
    "\1\0\2\11\1\0\1\11\71\0\2\13\1\0\34\13"+
    "\1\0\1\14\2\0\1\14\44\0\1\15\25\0\2\20"+
    "\1\0\1\20\32\0\2\21\1\0\34\21\20\0\1\47"+
    "\41\0\1\50\14\0\1\25\2\0\1\25\36\0\1\51"+
    "\2\0\2\51\1\52\1\51\1\0\1\51\1\52\17\51"+
    "\11\0\2\30\1\53\1\30\1\0\1\30\1\53\17\30"+
    "\11\0\2\30\1\0\1\30\1\0\1\30\1\0\17\30"+
    "\3\0\1\32\2\0\1\32\41\0\1\33\1\54\1\0"+
    "\1\33\1\0\1\33\1\0\17\33\11\0\1\33\1\54"+
    "\1\0\1\34\1\55\1\36\1\0\17\36\11\0\1\33"+
    "\1\54\1\0\1\36\1\55\1\36\1\0\17\36\23\0"+
    "\1\56\4\0\1\57\11\0\1\40\2\0\1\40\44\0"+
    "\1\41\25\0\1\42\2\0\1\42\41\0\1\43\1\60"+
    "\1\0\1\43\1\0\1\43\1\0\17\43\11\0\1\43"+
    "\1\60\1\0\1\44\1\61\1\46\1\0\17\46\11\0"+
    "\1\43\1\60\1\0\1\46\1\61\1\46\1\0\17\46"+
    "\21\0\1\62\10\0\1\63\1\0\1\64\34\0\1\65"+
    "\12\0\1\51\1\66\1\0\2\51\1\52\1\51\1\0"+
    "\1\51\1\52\17\51\6\0\1\51\2\0\2\51\1\0"+
    "\1\51\1\0\1\51\1\0\17\51\11\0\1\33\2\0"+
    "\1\33\1\0\1\33\1\0\17\33\13\0\1\67\52\0"+
    "\1\70\36\0\1\71\20\0\1\43\2\0\1\43\1\0"+
    "\1\43\1\0\17\43\13\0\1\72\47\0\1\73\42\0"+
    "\1\74\30\0\1\75\27\0\1\76\55\0\1\77\35\0"+
    "\1\77\20\0\1\100\54\0\1\101\34\0\1\102\40\0"+
    "\1\103\40\0\1\104\31\0\1\105\42\0\1\106\44\0"+
    "\1\107\17\0\1\110\37\0\1\111\34\0\1\112\46\0"+
    "\1\113\37\0\1\114\34\0\1\115\44\0\1\116\37\0"+
    "\1\117\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1984];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\1\1\11\3\1\2\11\4\1\1\11\1\1"+
    "\1\11\6\1\1\11\7\1\1\11\1\1\16\0\2\11"+
    "\7\0\1\11\1\0\2\11\5\0\2\11\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[79];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaddyfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(BINDING); return CaddyfileTypes.BINDING_HOSTNAME;
            }
          // fall through
          case 31: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 32: break;
          case 3:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 33: break;
          case 4:
            { yybegin(YYINITIAL); return CaddyfileTypes.COMMENT;
            }
          // fall through
          case 34: break;
          case 5:
            { yybegin(BINDING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 35: break;
          case 6:
            { yybegin(BINDING); return CaddyfileTypes.PORT;
            }
          // fall through
          case 36: break;
          case 7:
            { yybegin(BINDING); return CaddyfileTypes.COLON;
            }
          // fall through
          case 37: break;
          case 8:
            { yybegin(GROUP); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 38: break;
          case 9:
            { yybegin(GROUP); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 39: break;
          case 10:
            { yybegin(GROUP); return CaddyfileTypes.COMMENT;
            }
          // fall through
          case 40: break;
          case 11:
            { yybegin(YYINITIAL); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 41: break;
          case 12:
            { yybegin(GROUP_DIRECTIVE_TLS); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 42: break;
          case 13:
            { yybegin(GROUP_DIRECTIVE_TLS); return CaddyfileTypes.FILEPATH;
            }
          // fall through
          case 43: break;
          case 14:
            { yybegin(GROUP_DIRECTIVE_REDIR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 44: break;
          case 15:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.HOSTNAME;
            }
          // fall through
          case 45: break;
          case 16:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.PORT;
            }
          // fall through
          case 46: break;
          case 17:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.COLON;
            }
          // fall through
          case 47: break;
          case 18:
            { yybegin(GROUP_DIRECTIVE_RESPOND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 48: break;
          case 19:
            { yybegin(GROUP_DIRECTIVE_RESPOND); return CaddyfileTypes.STATUS_CODE;
            }
          // fall through
          case 49: break;
          case 20:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 50: break;
          case 21:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return CaddyfileTypes.HOSTNAME;
            }
          // fall through
          case 51: break;
          case 22:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return CaddyfileTypes.PORT;
            }
          // fall through
          case 52: break;
          case 23:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return CaddyfileTypes.COLON;
            }
          // fall through
          case 53: break;
          case 24:
            { yybegin(GROUP_DIRECTIVE_TLS); return CaddyfileTypes.TLS;
            }
          // fall through
          case 54: break;
          case 25:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.PROTOCOL;
            }
          // fall through
          case 55: break;
          case 26:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return CaddyfileTypes.PROTOCOL;
            }
          // fall through
          case 56: break;
          case 27:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.REDIR;
            }
          // fall through
          case 57: break;
          case 28:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.VARIABLE;
            }
          // fall through
          case 58: break;
          case 29:
            { yybegin(GROUP_DIRECTIVE_RESPOND); return CaddyfileTypes.RESPOND;
            }
          // fall through
          case 59: break;
          case 30:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return CaddyfileTypes.REVERSE_PROXY;
            }
          // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

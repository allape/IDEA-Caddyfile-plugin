// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Caddyfile.flex

package cc.allape.caddyfile.language;

// DO NOT OPTIMIZE IMPORT
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import cc.allape.caddyfile.language.psi.CaddyfileTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayList;
import java.util.Stack;
// DO NOT OPTIMIZE IMPORT


public class CaddyfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HOSTNAME_MATCHER = 2;
  public static final int PORT = 4;
  public static final int MATCH = 6;
  public static final int BINDING_HOSTNAME = 8;
  public static final int QUOTED_STRING = 10;
  public static final int VARIABLE = 12;
  public static final int VARIABLE_STRING = 14;
  public static final int QUOTED_VARIABLE_STRING = 16;
  public static final int MATCHER = 18;
  public static final int MATCHER_ONE = 20;
  public static final int MATCHER_TWO = 22;
  public static final int MATCHER_THR = 24;
  public static final int MATCH_DECLARE = 26;
  public static final int MATCH_DECLARE_DIRECTIVE = 28;
  public static final int MATCH_DECLARE_DIR_HEADER = 30;
  public static final int MATCH_DECLARE_DIR_HEADER_VALUE = 32;
  public static final int MATCH_DECLARE_DIR_METHOD = 34;
  public static final int MATCH_DECLARE_DIR_STATUS = 36;
  public static final int GROUP = 38;
  public static final int GROUP_DIRECTIVE_ABORT = 40;
  public static final int GROUP_DIRECTIVE_ACME_SERVER = 42;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH = 44;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH_SERECTS = 46;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH_PASSWORD = 48;
  public static final int GROUP_DIRECTIVE_BIND = 50;
  public static final int GROUP_DIRECTIVE_ENCODE = 52;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS = 54;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_GZIP = 56;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MINIMUM_LENGTH = 58;
  public static final int GROUP_DIRECTIVE_ERROR = 60;
  public static final int GROUP_DIRECTIVE_ERROR_ARGS = 62;
  public static final int GROUP_DIRECTIVE_ERROR_ARGS_MESSAGE = 64;
  public static final int GROUP_DIRECTIVE_TLS = 66;
  public static final int GROUP_DIRECTIVE_REDIR = 68;
  public static final int GROUP_DIRECTIVE_RESPOND = 70;
  public static final int GROUP_DIRECTIVE_REVERSE_PROXY = 72;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     3,  3,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 
    30, 30, 31, 31, 32, 32, 33, 33, 34, 34
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\6\6\0\1\7\2\0\1\10\1\11\1\12"+
    "\12\13\1\14\5\0\1\15\6\16\24\17\1\20\1\21"+
    "\1\22\1\0\1\23\1\0\1\24\1\25\1\26\1\27"+
    "\1\30\1\16\1\31\1\32\1\33\2\17\1\34\1\35"+
    "\1\36\1\37\1\40\1\17\1\41\1\42\1\43\1\44"+
    "\1\45\1\17\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\7\0\1\3\32\0\1\3\11\0\1\17\12\0\1\17"+
    "\4\0\1\17\5\0\27\17\1\0\37\17\1\0\u01ca\17"+
    "\4\0\14\17\16\0\5\17\7\0\1\17\1\0\1\17"+
    "\21\0\165\17\1\0\2\17\2\0\4\17\1\0\1\17"+
    "\6\0\1\17\1\0\3\17\1\0\1\17\1\0\24\17"+
    "\1\0\123\17\1\0\213\17\1\0\255\17\1\0\46\17"+
    "\2\0\1\17\6\0\51\17\10\0\55\17\1\0\1\17"+
    "\1\0\2\17\1\0\2\17\1\0\1\17\10\0\33\17"+
    "\4\0\4\17\35\0\13\17\5\0\100\17\12\54\4\0"+
    "\146\17\1\0\10\17\2\0\12\17\1\0\6\17\12\54"+
    "\3\17\2\0\1\17\20\0\73\17\2\0\145\17\16\0"+
    "\12\54\54\17\4\0\1\17\2\0\1\17\2\0\56\17"+
    "\22\0\34\17\4\0\13\17\65\0\25\17\1\0\10\17"+
    "\25\0\17\17\1\0\201\17\2\0\12\54\1\0\23\17"+
    "\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17"+
    "\1\0\1\17\3\0\4\17\2\0\11\17\2\0\2\17"+
    "\2\0\4\17\10\0\1\17\4\0\2\17\1\0\5\17"+
    "\2\0\12\54\2\17\12\0\1\17\1\0\1\17\2\0"+
    "\3\17\1\0\6\17\4\0\2\17\2\0\26\17\1\0"+
    "\7\17\1\0\2\17\1\0\2\17\1\0\2\17\2\0"+
    "\1\17\1\0\5\17\4\0\2\17\2\0\3\17\3\0"+
    "\1\17\7\0\4\17\1\0\1\17\7\0\12\54\6\17"+
    "\13\0\3\17\1\0\11\17\1\0\3\17\1\0\26\17"+
    "\1\0\7\17\1\0\2\17\1\0\5\17\2\0\12\17"+
    "\1\0\3\17\1\0\3\17\2\0\1\17\17\0\4\17"+
    "\2\0\12\54\11\0\7\17\1\0\3\17\1\0\10\17"+
    "\2\0\2\17\2\0\26\17\1\0\7\17\1\0\2\17"+
    "\1\0\5\17\2\0\11\17\2\0\2\17\2\0\3\17"+
    "\10\0\2\17\4\0\2\17\1\0\5\17\2\0\12\54"+
    "\1\0\1\17\20\0\2\17\1\0\6\17\3\0\3\17"+
    "\1\0\4\17\3\0\2\17\1\0\1\17\1\0\2\17"+
    "\3\0\2\17\3\0\3\17\3\0\14\17\4\0\5\17"+
    "\3\0\3\17\1\0\4\17\2\0\1\17\6\0\1\17"+
    "\16\0\12\54\20\0\15\17\1\0\3\17\1\0\27\17"+
    "\1\0\20\17\3\0\10\17\1\0\3\17\1\0\4\17"+
    "\7\0\2\17\1\0\3\17\5\0\4\17\2\0\12\54"+
    "\20\0\4\17\1\0\10\17\1\0\3\17\1\0\27\17"+
    "\1\0\12\17\1\0\5\17\2\0\11\17\1\0\3\17"+
    "\1\0\4\17\7\0\2\17\7\0\1\17\1\0\4\17"+
    "\2\0\12\54\1\0\2\17\15\0\4\17\1\0\10\17"+
    "\1\0\3\17\1\0\63\17\1\0\3\17\1\0\5\17"+
    "\5\0\4\17\7\0\5\17\2\0\12\54\12\0\6\17"+
    "\2\0\2\17\1\0\22\17\3\0\30\17\1\0\11\17"+
    "\1\0\1\17\2\0\7\17\3\0\1\17\4\0\6\17"+
    "\1\0\1\17\1\0\10\17\6\0\12\54\2\0\2\17"+
    "\15\0\72\17\5\0\17\17\1\0\12\54\47\0\2\17"+
    "\1\0\1\17\1\0\5\17\1\0\30\17\1\0\1\17"+
    "\1\0\27\17\2\0\5\17\1\0\1\17\1\0\6\17"+
    "\2\0\12\54\2\0\4\17\40\0\1\17\27\0\2\17"+
    "\6\0\12\54\13\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\12\17\1\0\44\17\4\0\24\17\1\0\22\17"+
    "\1\0\44\17\11\0\1\17\71\0\100\17\12\54\6\0"+
    "\100\17\12\54\4\17\2\0\46\17\1\0\1\17\5\0"+
    "\1\17\2\0\53\17\1\0\115\17\1\0\4\17\2\0"+
    "\7\17\1\0\1\17\1\0\4\17\2\0\51\17\1\0"+
    "\4\17\2\0\41\17\1\0\4\17\2\0\7\17\1\0"+
    "\1\17\1\0\4\17\2\0\17\17\1\0\71\17\1\0"+
    "\4\17\2\0\103\17\2\0\3\17\40\0\20\17\20\0"+
    "\126\17\2\0\6\17\3\0\u016c\17\2\0\21\17\1\3"+
    "\32\17\5\0\113\17\3\0\13\17\7\0\15\17\1\0"+
    "\7\17\13\0\25\17\13\0\24\17\14\0\15\17\1\0"+
    "\3\17\1\0\2\17\14\0\124\17\3\0\1\17\4\0"+
    "\2\17\2\0\12\54\41\0\3\17\2\0\12\54\6\0"+
    "\131\17\7\0\53\17\5\0\106\17\12\0\37\17\1\0"+
    "\14\17\4\0\14\17\12\0\12\54\36\17\2\0\5\17"+
    "\13\0\54\17\4\0\32\17\6\0\12\54\46\0\34\17"+
    "\4\0\77\17\1\0\35\17\2\0\1\17\12\54\6\0"+
    "\12\54\15\0\1\17\10\0\17\17\101\0\114\17\4\0"+
    "\12\54\21\0\11\17\14\0\60\17\12\54\72\17\14\0"+
    "\70\17\10\0\12\54\3\0\3\17\12\54\44\17\2\0"+
    "\11\17\7\0\53\17\2\0\3\17\20\0\3\17\1\0"+
    "\47\17\5\0\372\17\1\0\33\17\2\0\6\17\2\0"+
    "\46\17\2\0\6\17\2\0\10\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\37\17\2\0\65\17\1\0"+
    "\7\17\1\0\1\17\3\0\3\17\1\0\7\17\3\0"+
    "\4\17\2\0\6\17\4\0\15\17\5\0\3\17\1\0"+
    "\7\17\3\0\13\3\35\0\2\3\5\0\1\3\17\0"+
    "\2\17\23\0\1\17\12\0\1\3\21\0\1\17\15\0"+
    "\1\17\20\0\15\17\63\0\41\17\21\0\1\17\4\0"+
    "\1\17\2\0\12\17\1\0\1\17\3\0\5\17\6\0"+
    "\1\17\1\0\1\17\1\0\1\17\1\0\4\17\1\0"+
    "\13\17\2\0\4\17\5\0\5\17\4\0\1\17\21\0"+
    "\51\17\u022d\0\64\17\26\0\57\17\1\0\57\17\1\0"+
    "\205\17\6\0\11\17\14\0\46\17\1\0\1\17\5\0"+
    "\1\17\2\0\70\17\7\0\1\17\17\0\30\17\11\0"+
    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0"+
    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0"+
    "\40\17\57\0\1\17\320\0\1\3\4\0\3\17\31\0"+
    "\17\17\1\0\5\17\2\0\5\17\4\0\126\17\2\0"+
    "\2\17\2\0\3\17\1\0\132\17\1\0\4\17\5\0"+
    "\53\17\1\0\136\17\21\0\33\17\65\0\306\17\112\0"+
    "\360\17\20\0\215\17\103\0\56\17\2\0\15\17\3\0"+
    "\20\17\12\54\2\17\24\0\63\17\1\0\12\17\1\0"+
    "\163\17\45\0\11\17\2\0\147\17\2\0\65\17\2\0"+
    "\5\17\60\0\61\17\30\0\64\17\14\0\106\17\12\0"+
    "\12\54\6\0\30\17\3\0\1\17\1\0\3\17\12\54"+
    "\44\17\2\0\44\17\14\0\35\17\3\0\101\17\16\0"+
    "\1\17\12\54\6\0\20\17\12\54\5\17\1\0\67\17"+
    "\11\0\16\17\2\0\12\54\6\0\27\17\3\0\111\17"+
    "\30\0\3\17\2\0\20\17\2\0\5\17\12\0\6\17"+
    "\2\0\6\17\2\0\6\17\11\0\7\17\1\0\7\17"+
    "\1\0\53\17\1\0\14\17\10\0\173\17\1\0\2\17"+
    "\2\0\12\54\6\0\244\17\14\0\27\17\4\0\61\17"+
    "\4\0\156\17\2\0\152\17\46\0\7\17\14\0\5\17"+
    "\5\0\14\17\1\0\15\17\1\0\5\17\1\0\1\17"+
    "\1\0\2\17\1\0\2\17\1\0\154\17\41\0\153\17"+
    "\22\0\100\17\2\0\66\17\50\0\14\17\4\0\20\17"+
    "\20\0\20\17\3\0\2\17\30\0\3\17\40\0\5\17"+
    "\1\0\207\17\23\0\12\54\7\0\32\17\4\0\1\17"+
    "\1\0\32\17\13\0\131\17\3\0\6\17\2\0\6\17"+
    "\2\0\6\17\2\0\3\17\43\0\14\17\1\0\32\17"+
    "\1\0\23\17\1\0\2\17\1\0\17\17\2\0\16\17"+
    "\42\0\173\17\105\0\65\17\210\0\1\17\202\0\35\17"+
    "\3\0\61\17\17\0\1\17\37\0\40\17\15\0\36\17"+
    "\5\0\53\17\5\0\36\17\2\0\44\17\4\0\10\17"+
    "\1\0\5\17\52\0\236\17\2\0\12\54\6\0\44\17"+
    "\4\0\44\17\4\0\50\17\10\0\64\17\234\0\67\17"+
    "\11\0\26\17\12\0\10\17\230\0\6\17\2\0\1\17"+
    "\1\0\54\17\1\0\2\17\3\0\1\17\2\0\27\17"+
    "\12\0\27\17\11\0\37\17\101\0\23\17\1\0\2\17"+
    "\12\0\26\17\12\0\32\17\106\0\70\17\6\0\2\17"+
    "\100\0\4\17\1\0\2\17\5\0\10\17\1\0\3\17"+
    "\1\0\35\17\2\0\3\17\4\0\1\17\40\0\35\17"+
    "\3\0\35\17\43\0\10\17\1\0\36\17\31\0\66\17"+
    "\12\0\26\17\12\0\23\17\15\0\22\17\156\0\111\17"+
    "\67\0\63\17\15\0\63\17\15\0\50\17\10\0\12\54"+
    "\306\0\35\17\12\0\1\17\10\0\41\17\217\0\27\17"+
    "\11\0\107\17\37\0\12\54\17\0\74\17\25\0\31\17"+
    "\7\0\12\54\6\0\65\17\1\0\12\54\4\0\3\17"+
    "\11\0\44\17\2\0\1\17\11\0\105\17\4\0\4\17"+
    "\3\0\12\54\1\17\1\0\1\17\43\0\22\17\1\0"+
    "\45\17\6\0\1\17\101\0\7\17\1\0\1\17\1\0"+
    "\4\17\1\0\17\17\1\0\12\17\7\0\73\17\5\0"+
    "\12\54\6\0\4\17\1\0\10\17\2\0\2\17\2\0"+
    "\26\17\1\0\7\17\1\0\2\17\1\0\5\17\1\0"+
    "\12\17\2\0\2\17\2\0\3\17\2\0\1\17\6\0"+
    "\1\17\5\0\7\17\2\0\7\17\3\0\5\17\213\0"+
    "\113\17\5\0\12\54\4\0\2\17\40\0\106\17\1\0"+
    "\1\17\10\0\12\54\246\0\66\17\2\0\11\17\27\0"+
    "\6\17\42\0\101\17\3\0\1\17\13\0\12\54\46\0"+
    "\71\17\7\0\12\54\66\0\33\17\2\0\17\17\4\0"+
    "\12\54\306\0\73\17\145\0\100\17\12\54\25\0\1\17"+
    "\240\0\10\17\2\0\56\17\2\0\10\17\1\0\2\17"+
    "\33\0\77\17\10\0\1\17\10\0\112\17\3\0\1\17"+
    "\42\0\71\17\7\0\11\17\1\0\55\17\1\0\11\17"+
    "\17\0\12\54\30\0\36\17\2\0\26\17\1\0\16\17"+
    "\111\0\7\17\1\0\2\17\1\0\54\17\3\0\1\17"+
    "\1\0\2\17\1\0\11\17\10\0\12\54\6\0\6\17"+
    "\1\0\2\17\1\0\45\17\1\0\2\17\1\0\6\17"+
    "\7\0\12\54\u0136\0\27\17\11\0\232\17\146\0\157\17"+
    "\21\0\304\17\274\0\57\17\321\0\107\17\271\0\71\17"+
    "\7\0\37\17\1\0\12\54\146\0\36\17\2\0\5\17"+
    "\13\0\67\17\11\0\4\17\14\0\12\54\11\0\25\17"+
    "\5\0\23\17\260\0\100\17\200\0\113\17\4\0\71\17"+
    "\7\0\21\17\100\0\2\17\1\0\1\17\34\0\370\17"+
    "\10\0\363\17\15\0\37\17\61\0\3\17\21\0\4\17"+
    "\10\0\u018c\17\4\0\153\17\5\0\15\17\3\0\11\17"+
    "\7\0\12\17\3\0\2\17\306\0\5\17\3\0\6\17"+
    "\10\0\10\17\2\0\7\17\36\0\4\17\224\0\3\17"+
    "\273\0\125\17\1\0\107\17\1\0\2\17\2\0\1\17"+
    "\2\0\2\17\2\0\4\17\1\0\14\17\1\0\1\17"+
    "\1\0\7\17\1\0\101\17\1\0\4\17\2\0\10\17"+
    "\1\0\7\17\1\0\34\17\1\0\4\17\1\0\5\17"+
    "\1\0\1\17\3\0\7\17\1\0\u0154\17\2\0\31\17"+
    "\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17"+
    "\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17"+
    "\1\0\31\17\1\0\10\17\2\0\62\54\67\17\4\0"+
    "\62\17\10\0\1\17\16\0\1\17\26\0\5\17\1\0"+
    "\17\17\120\0\7\17\1\0\21\17\2\0\7\17\1\0"+
    "\2\17\1\0\5\17\325\0\55\17\3\0\16\17\2\0"+
    "\12\54\4\0\1\17\u0171\0\60\17\12\54\6\0\305\17"+
    "\13\0\7\17\51\0\114\17\4\0\12\54\246\0\4\17"+
    "\1\0\33\17\1\0\2\17\1\0\1\17\2\0\1\17"+
    "\1\0\12\17\1\0\4\17\1\0\1\17\1\0\1\17"+
    "\6\0\1\17\4\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\3\17\1\0\2\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\2\17\1\0\1\17\2\0\4\17\1\0\7\17"+
    "\1\0\4\17\1\0\4\17\1\0\1\17\1\0\12\17"+
    "\1\0\21\17\5\0\3\17\1\0\5\17\1\0\21\17"+
    "\164\0\32\17\6\0\32\17\6\0\32\17\166\0\327\17"+
    "\51\0\65\17\13\0\336\17\2\0\u0182\17\16\0\u0131\17"+
    "\37\0\36\17\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\43\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\10\1\11\1\2\1\12\2\13\1\14\1\5"+
    "\1\15\1\5\2\16\1\17\1\20\1\5\1\21\1\5"+
    "\1\22\2\21\1\23\1\24\1\25\1\26\1\5\2\21"+
    "\1\5\1\27\2\30\1\31\1\6\1\31\1\32\4\3"+
    "\1\33\1\34\1\35\2\36\2\37\2\40\1\41\1\42"+
    "\5\3\1\43\1\44\1\45\1\46\1\2\1\47\1\20"+
    "\2\50\3\3\1\51\2\3\1\52\1\53\3\3\1\54"+
    "\1\55\1\56\1\57\1\3\2\60\1\3\1\61\1\3"+
    "\3\62\1\63\1\64\1\65\1\63\53\0\1\66\15\0"+
    "\1\61\3\0\1\67\4\0\1\70\13\0\1\71\1\0"+
    "\1\72\1\73\2\0\1\74\1\0\1\75\3\0\1\76"+
    "\3\0\1\77\1\100\12\0\1\101\2\0\1\102\1\103"+
    "\1\104\2\0\1\105\11\0\1\106\4\0\1\107\1\0"+
    "\1\110\7\0\1\111\3\0\1\110\11\0\1\110\6\0"+
    "\1\112\5\0\1\113\7\0\1\114\1\0\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0681\0\u0681\0\u0681\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0681\0\u0816\0\u0681\0\u0843\0\u0870\0\u089d\0\u0681"+
    "\0\u0681\0\u08ca\0\u08f7\0\u0924\0\u0681\0\u0951\0\u097e\0\u0681"+
    "\0\u0681\0\u0681\0\u0681\0\u09ab\0\u0762\0\u0681\0\u09d8\0\u0681"+
    "\0\u0a05\0\u0a32\0\u0a5f\0\u0681\0\u0a8c\0\u0681\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0681\0\u0681\0\u0681\0\u0b6d\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0681\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0681\0\u0681\0\u0681\0\u0681\0\u0681\0\u0d89"+
    "\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0681\0\u0e97"+
    "\0\u0ec4\0\u0681\0\u0681\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u0681\0\u0681\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u0681\0\u06ae\0\u10e0\0\u110d\0\u113a\0\u0681\0\u1167\0\u1194"+
    "\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u15f9\0\u10b3\0\u10e0\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da"+
    "\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842"+
    "\0\u186f\0\u189c\0\u0681\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d"+
    "\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u0681\0\u1b12\0\u1b3f\0\u1b6c\0\u0681\0\u1b99\0\u1bc6\0\u1bf3"+
    "\0\u1c20\0\u0681\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e"+
    "\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u0681\0\u1e3c\0\u0681"+
    "\0\u0681\0\u1e69\0\u1e96\0\u0681\0\u1ec3\0\u0681\0\u1ef0\0\u1f1d"+
    "\0\u1f4a\0\u0681\0\u1f77\0\u1fa4\0\u1fd1\0\u0681\0\u0681\0\u1ffe"+
    "\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166"+
    "\0\u2193\0\u0681\0\u21c0\0\u21ed\0\u0681\0\u0681\0\u0681\0\u221a"+
    "\0\u2247\0\u0681\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355"+
    "\0\u2382\0\u23af\0\u23dc\0\u2193\0\u2409\0\u2436\0\u2463\0\u2490"+
    "\0\u0681\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb"+
    "\0\u25f8\0\u2625\0\u0681\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706"+
    "\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e"+
    "\0\u0681\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\u0681"+
    "\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u0681\0\u2a8a\0\u2ab7"+
    "\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\u0681\0\u2bc5\0\u0681";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\44\2\45\1\46\1\45\1\44\1\47\46\44\1\50"+
    "\1\51\2\46\1\51\1\50\1\52\1\53\1\50\1\54"+
    "\2\50\1\55\40\50\1\46\1\56\2\46\1\56\1\46"+
    "\1\47\4\46\1\57\40\46\1\57\1\46\1\56\2\46"+
    "\1\56\1\46\1\47\46\46\1\60\1\56\2\46\1\56"+
    "\1\60\1\61\42\60\1\62\3\60\2\63\1\46\2\63"+
    "\1\64\1\65\46\63\1\66\1\56\2\46\1\56\1\66"+
    "\1\67\42\66\1\70\1\66\1\71\1\66\1\72\2\73"+
    "\1\46\1\73\1\72\1\74\42\72\1\75\3\72\1\76"+
    "\1\56\2\46\1\56\1\76\1\77\1\100\2\76\1\101"+
    "\2\76\1\102\37\76\1\46\1\56\2\46\1\56\1\46"+
    "\1\47\1\103\45\46\1\104\1\105\2\106\1\105\1\104"+
    "\1\107\1\53\2\104\1\110\42\104\1\111\1\56\2\46"+
    "\1\56\1\111\1\112\46\111\1\113\1\56\1\114\1\46"+
    "\1\56\1\113\1\115\46\113\1\46\1\56\1\116\1\46"+
    "\1\56\1\46\1\47\23\46\1\117\2\46\1\120\2\46"+
    "\1\121\1\46\1\122\6\46\1\123\1\124\1\125\1\46"+
    "\1\126\1\56\1\106\1\46\1\56\1\126\1\127\43\126"+
    "\1\106\2\126\1\130\1\56\1\106\1\46\1\56\1\130"+
    "\1\131\43\130\1\106\2\130\1\132\1\56\1\106\1\46"+
    "\1\56\1\132\1\133\43\132\1\106\2\132\1\46\1\56"+
    "\1\106\1\46\1\56\1\46\1\47\4\46\1\134\36\46"+
    "\1\106\1\46\1\134\1\46\2\45\1\46\1\45\1\46"+
    "\1\47\6\46\1\135\6\46\1\136\1\137\2\46\1\140"+
    "\10\46\1\141\1\46\1\142\7\46\1\143\2\46\1\56"+
    "\1\144\1\46\1\56\1\46\1\47\1\145\2\46\1\145"+
    "\2\46\1\145\40\46\1\56\1\144\1\46\1\56\1\46"+
    "\1\47\1\145\2\46\1\145\2\46\1\145\33\46\1\146"+
    "\4\46\1\56\1\147\1\46\1\56\1\46\1\47\1\46"+
    "\1\150\2\46\1\150\2\46\2\150\3\46\26\150\2\46"+
    "\1\151\1\150\1\152\1\56\2\46\1\56\1\152\1\153"+
    "\44\152\1\46\1\152\1\46\1\56\1\144\1\46\1\56"+
    "\1\46\1\47\4\46\1\154\4\46\1\155\23\46\1\156"+
    "\7\46\1\154\1\46\1\56\1\157\1\46\1\56\1\46"+
    "\1\47\1\145\2\46\1\145\2\46\1\145\13\46\1\160"+
    "\16\46\1\161\1\162\1\46\1\163\2\46\1\56\1\147"+
    "\1\46\1\56\1\46\1\47\22\46\1\164\3\46\1\165"+
    "\12\46\1\166\2\46\1\106\2\46\1\56\1\114\1\46"+
    "\1\56\1\46\1\47\4\46\1\167\40\46\1\167\1\46"+
    "\1\56\1\114\1\46\1\56\1\46\1\47\4\46\1\170"+
    "\40\46\1\170\1\46\1\56\1\157\1\46\1\56\1\171"+
    "\1\47\1\145\2\46\1\145\1\134\1\46\1\145\33\46"+
    "\1\172\1\46\1\163\1\134\1\46\1\56\1\147\1\46"+
    "\1\56\1\46\1\47\26\46\1\173\15\46\1\106\1\46"+
    "\1\174\1\56\1\106\1\46\1\56\1\171\1\175\46\174"+
    "\1\46\1\56\1\144\1\46\1\56\1\176\1\47\1\46"+
    "\2\177\1\200\1\177\2\46\2\177\1\46\1\200\1\46"+
    "\26\177\3\46\1\177\1\201\1\56\1\144\1\46\1\56"+
    "\1\201\1\202\1\145\2\201\1\145\1\203\1\201\1\145"+
    "\2\203\3\201\26\203\3\201\1\203\1\46\1\56\1\144"+
    "\1\46\1\56\1\46\1\47\1\145\2\46\1\145\1\134"+
    "\1\46\1\145\36\46\1\134\1\46\1\56\1\144\1\46"+
    "\1\56\1\46\1\47\1\145\1\204\1\46\1\145\1\205"+
    "\1\206\1\145\2\207\3\46\26\207\3\46\1\205\1\44"+
    "\4\0\1\44\1\0\46\44\1\0\2\45\1\0\1\45"+
    "\125\0\2\47\1\0\52\47\1\50\4\0\2\50\1\0"+
    "\1\50\1\0\2\50\1\0\40\50\1\0\1\51\2\0"+
    "\1\51\50\0\1\52\1\47\1\0\2\47\2\52\1\47"+
    "\1\52\1\47\2\52\1\47\40\52\1\0\1\56\2\0"+
    "\1\56\63\0\1\57\40\0\1\57\1\60\4\0\44\60"+
    "\1\0\3\60\1\61\1\47\1\0\2\47\44\61\1\47"+
    "\3\61\2\63\1\0\2\63\1\0\47\63\2\65\1\0"+
    "\2\65\1\47\47\65\1\66\4\0\44\66\1\0\1\66"+
    "\1\0\1\66\1\67\1\47\1\0\2\47\44\67\1\47"+
    "\1\67\1\47\1\67\1\72\4\0\44\72\1\0\3\72"+
    "\1\0\2\73\1\0\1\73\50\0\1\74\1\47\1\0"+
    "\2\47\44\74\1\47\3\74\1\76\4\0\2\76\1\0"+
    "\2\76\1\0\2\76\1\0\37\76\1\77\1\47\1\0"+
    "\2\47\2\77\1\47\2\77\1\47\2\77\1\47\37\77"+
    "\1\104\4\0\2\104\1\0\2\104\1\0\42\104\1\107"+
    "\1\47\1\0\2\47\2\107\1\47\2\107\1\47\42\107"+
    "\1\111\4\0\50\111\1\112\1\47\1\0\2\47\50\112"+
    "\1\113\4\0\50\113\1\115\1\47\1\0\2\47\50\115"+
    "\30\0\1\210\54\0\1\211\50\0\1\212\73\0\1\213"+
    "\11\0\1\126\4\0\45\126\1\0\2\126\1\127\1\47"+
    "\1\0\2\47\45\127\1\47\2\127\1\130\4\0\45\130"+
    "\1\0\2\130\1\131\1\47\1\0\2\47\45\131\1\47"+
    "\2\131\1\132\4\0\45\132\1\0\2\132\1\133\1\47"+
    "\1\0\2\47\45\133\1\47\2\133\13\0\1\134\40\0"+
    "\1\134\25\0\1\214\1\215\52\0\1\216\6\0\1\217"+
    "\57\0\1\220\2\0\1\221\43\0\1\222\60\0\1\223"+
    "\30\0\1\150\2\0\1\150\2\0\2\150\3\0\26\150"+
    "\2\0\2\150\1\152\4\0\46\152\1\0\1\152\1\153"+
    "\1\47\1\0\2\47\46\153\1\47\1\153\11\0\1\224"+
    "\1\0\1\225\40\0\1\225\13\0\1\226\1\227\1\0"+
    "\1\226\5\0\5\226\62\0\1\230\66\0\1\231\46\0"+
    "\1\232\62\0\1\233\30\0\1\234\6\0\1\235\63\0"+
    "\1\236\25\0\1\167\40\0\1\167\13\0\1\170\40\0"+
    "\1\170\30\0\1\237\24\0\1\174\5\0\47\174\1\175"+
    "\1\47\1\0\3\47\47\175\4\0\1\240\3\0\2\240"+
    "\1\241\1\240\2\0\2\240\1\0\1\241\1\0\26\240"+
    "\3\0\1\240\10\0\2\177\1\242\1\177\2\0\2\177"+
    "\1\0\1\242\1\0\26\177\3\0\1\177\10\0\2\177"+
    "\1\0\1\177\2\0\2\177\3\0\26\177\3\0\1\177"+
    "\13\0\1\243\1\244\1\0\2\243\3\0\26\243\3\0"+
    "\1\243\10\0\1\204\1\245\1\0\1\204\2\0\2\204"+
    "\3\0\26\204\3\0\1\204\10\0\1\204\1\245\1\0"+
    "\1\205\1\244\1\0\2\207\3\0\26\207\3\0\1\205"+
    "\10\0\1\204\1\245\1\0\1\207\1\244\1\0\2\207"+
    "\3\0\26\207\3\0\1\207\24\0\1\246\73\0\1\247"+
    "\54\0\1\250\35\0\1\251\67\0\1\252\52\0\1\253"+
    "\61\0\1\254\50\0\1\255\44\0\1\256\67\0\1\257"+
    "\42\0\1\260\12\0\1\261\2\0\1\262\51\0\1\263"+
    "\25\0\1\264\40\0\1\264\11\0\1\224\1\0\1\265"+
    "\40\0\1\265\13\0\1\266\1\227\1\0\1\266\5\0"+
    "\5\266\37\0\1\267\1\270\1\0\1\267\5\0\5\267"+
    "\57\0\1\271\54\0\1\272\64\0\1\273\44\0\1\274"+
    "\64\0\1\275\47\0\1\276\61\0\1\277\53\0\1\300"+
    "\16\0\1\240\1\301\2\0\2\240\1\241\1\240\2\0"+
    "\2\240\1\0\1\241\1\0\26\240\3\0\1\240\4\0"+
    "\1\240\3\0\2\240\1\0\1\240\2\0\2\240\3\0"+
    "\26\240\3\0\1\240\12\0\1\302\52\0\1\204\2\0"+
    "\1\204\2\0\2\204\3\0\26\204\3\0\1\204\27\0"+
    "\1\303\57\0\1\304\54\0\1\305\65\0\1\306\52\0"+
    "\1\307\43\0\1\310\57\0\1\311\50\0\1\312\64\0"+
    "\1\313\54\0\1\314\50\0\1\315\61\0\1\316\44\0"+
    "\1\317\35\0\1\320\1\0\1\321\40\0\1\321\11\0"+
    "\1\224\56\0\1\322\1\227\1\0\1\322\5\0\5\322"+
    "\37\0\1\323\1\270\1\0\1\323\5\0\5\323\37\0"+
    "\1\324\1\325\1\0\1\324\3\0\1\326\1\0\5\324"+
    "\72\0\1\327\46\0\1\330\43\0\1\330\65\0\1\331"+
    "\42\0\1\332\61\0\1\333\50\0\1\334\67\0\1\335"+
    "\24\0\1\336\72\0\1\337\63\0\1\340\61\0\1\341"+
    "\53\0\1\342\34\0\1\343\57\0\1\344\55\0\1\345"+
    "\66\0\1\346\54\0\1\347\52\0\1\350\56\0\1\351"+
    "\26\0\1\352\40\0\1\352\11\0\1\320\1\0\1\353"+
    "\40\0\1\353\13\0\1\354\1\227\1\0\1\354\5\0"+
    "\5\354\37\0\1\355\1\270\1\0\1\355\5\0\5\355"+
    "\37\0\1\356\1\325\1\0\1\356\3\0\1\326\1\0"+
    "\5\356\37\0\1\357\1\360\1\0\1\357\3\0\1\326"+
    "\1\0\5\357\36\0\1\361\74\0\1\362\57\0\1\363"+
    "\43\0\1\364\71\0\1\365\42\0\1\366\67\0\1\367"+
    "\54\0\1\370\35\0\1\371\61\0\1\372\62\0\1\373"+
    "\60\0\1\374\23\0\1\375\1\0\1\376\40\0\1\376"+
    "\11\0\1\320\57\0\1\227\53\0\1\377\1\270\1\0"+
    "\1\377\5\0\5\377\37\0\1\u0100\1\325\1\0\1\u0100"+
    "\3\0\1\326\1\0\5\u0100\37\0\1\u0101\1\360\1\0"+
    "\1\u0101\3\0\1\326\1\0\5\u0101\37\0\1\u0102\1\u0103"+
    "\1\0\1\u0102\3\0\1\326\1\0\5\u0102\24\0\1\u0104"+
    "\4\0\50\u0104\44\0\1\u0105\41\0\1\u0106\53\0\1\u0107"+
    "\50\0\1\u0108\57\0\1\u0109\55\0\1\u010a\37\0\1\u010b"+
    "\40\0\1\u010b\11\0\1\375\1\0\1\u010c\40\0\1\u010c"+
    "\14\0\1\270\53\0\1\u010d\1\325\1\0\1\u010d\3\0"+
    "\1\326\1\0\5\u010d\37\0\1\u010e\1\360\1\0\1\u010e"+
    "\3\0\1\326\1\0\5\u010e\37\0\1\u010f\1\u0103\1\0"+
    "\1\u010f\3\0\1\326\1\0\5\u010f\37\0\1\u0110\1\u0111"+
    "\1\0\1\u0110\3\0\1\326\1\0\5\u0110\61\0\1\u0112"+
    "\47\0\1\u0113\65\0\1\u0114\57\0\1\u0115\33\0\1\u0116"+
    "\44\0\1\u0117\40\0\1\u0117\11\0\1\375\57\0\1\325"+
    "\5\0\1\326\45\0\1\u0118\1\360\1\0\1\u0118\3\0"+
    "\1\326\1\0\5\u0118\37\0\1\u0119\1\u0103\1\0\1\u0119"+
    "\3\0\1\326\1\0\5\u0119\37\0\1\u011a\1\u0111\1\0"+
    "\1\u011a\3\0\1\326\1\0\5\u011a\37\0\1\u011b\1\u011c"+
    "\1\0\1\u011b\3\0\1\326\1\0\5\u011b\47\0\1\u011d"+
    "\76\0\1\u011e\52\0\1\u011f\51\0\1\u0120\27\0\1\u0121"+
    "\40\0\1\u0121\14\0\1\360\5\0\1\326\45\0\1\u0122"+
    "\1\u0103\1\0\1\u0122\3\0\1\326\1\0\5\u0122\37\0"+
    "\1\u0123\1\u0111\1\0\1\u0123\3\0\1\326\1\0\5\u0123"+
    "\37\0\1\u0124\1\u011c\1\0\1\u0124\3\0\1\326\1\0"+
    "\5\u0124\37\0\1\u0125\2\0\1\u0125\3\0\1\326\1\0"+
    "\5\u0125\60\0\1\u0126\50\0\1\u0127\56\0\1\u0128\63\0"+
    "\1\u0129\27\0\1\u0103\5\0\1\326\45\0\1\u012a\1\u0111"+
    "\1\0\1\u012a\3\0\1\326\1\0\5\u012a\37\0\1\u012b"+
    "\1\u011c\1\0\1\u012b\3\0\1\326\1\0\5\u012b\37\0"+
    "\1\u012c\2\0\1\u012c\3\0\1\326\1\0\5\u012c\54\0"+
    "\1\u012d\65\0\1\u012e\52\0\1\u012f\31\0\1\u0111\5\0"+
    "\1\326\45\0\1\u0130\1\u011c\1\0\1\u0130\3\0\1\326"+
    "\1\0\5\u0130\37\0\1\u0131\2\0\1\u0131\3\0\1\326"+
    "\1\0\5\u0131\62\0\1\u0132\64\0\1\u0133\22\0\1\u011c"+
    "\5\0\1\326\45\0\1\u0134\2\0\1\u0134\3\0\1\326"+
    "\1\0\5\u0134\55\0\1\u0135\72\0\1\u0136\27\0\1\326"+
    "\75\0\1\u0137\43\0\1\u0138\22\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11250];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\43\0\2\1\1\11\4\1\3\11\4\1\1\11\1\1"+
    "\1\11\3\1\2\11\3\1\1\11\2\1\4\11\2\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\1\11\4\1"+
    "\3\11\7\1\1\11\5\1\5\11\7\1\1\11\2\1"+
    "\2\11\5\1\2\11\6\1\1\11\4\1\1\11\1\1"+
    "\53\0\1\11\15\0\1\11\3\0\1\11\4\0\1\11"+
    "\13\0\1\11\1\0\2\11\2\0\1\11\1\0\1\11"+
    "\3\0\1\11\3\0\2\11\12\0\1\11\2\0\3\11"+
    "\2\0\1\11\11\0\1\1\4\0\1\11\1\0\1\1"+
    "\7\0\1\11\3\0\1\1\11\0\1\11\6\0\1\11"+
    "\5\0\1\11\7\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> _stateStack = new Stack<Integer>();
    private void _pushState(int state) {
        _stateStack.push(zzLexicalState);
        yybegin(state);
    }
    private void _popState() {
        yybegin(_stateStack.pop());
    }
    private void _clearStack() {
        _stateStack.clear();
    }
    private boolean _isStackEmpty() {
        return _stateStack.empty();
    }
    private boolean __IN_MATCH_DECLARE_ONE = false;
    private boolean __IN_GROUP_DIRECTIVE_ENCODE_ARGS = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaddyfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(BINDING_HOSTNAME); yypushback(yylength());
            }
          // fall through
          case 78: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 79: break;
          case 3:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 80: break;
          case 4:
            { return CaddyfileTypes.COMMENT;
            }
          // fall through
          case 81: break;
          case 5:
            { return CaddyfileTypes.TEXT;
            }
          // fall through
          case 82: break;
          case 6:
            { _popState(); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 83: break;
          case 7:
            { return CaddyfileTypes.STAR;
            }
          // fall through
          case 84: break;
          case 8:
            { return CaddyfileTypes.DOT;
            }
          // fall through
          case 85: break;
          case 9:
            { _pushState(PORT); return CaddyfileTypes.COLON;
            }
          // fall through
          case 86: break;
          case 10:
            { _popState(); return CaddyfileTypes.PORT;
            }
          // fall through
          case 87: break;
          case 11:
            { _pushState(HOSTNAME_MATCHER); yypushback(yylength());
            }
          // fall through
          case 88: break;
          case 12:
            { yybegin(GROUP); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 89: break;
          case 13:
            { if (yycharat(yylength()-2) != '\\') { _popState(); return CaddyfileTypes.QUOTATION; }
            }
          // fall through
          case 90: break;
          case 14:
            { return CaddyfileTypes.VARIABLE_NAME;
            }
          // fall through
          case 91: break;
          case 15:
            { return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 92: break;
          case 16:
            { _popState(); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 93: break;
          case 17:
            { _popState(); yypushback(yylength());
            }
          // fall through
          case 94: break;
          case 18:
            { _pushState(VARIABLE); yypushback(yylength());
            }
          // fall through
          case 95: break;
          case 19:
            { _pushState(MATCHER_ONE); yypushback(yylength());
            }
          // fall through
          case 96: break;
          case 20:
            { _pushState(MATCHER_TWO); yypushback(yylength());
            }
          // fall through
          case 97: break;
          case 21:
            { _pushState(MATCHER_THR); return CaddyfileTypes.AT;
            }
          // fall through
          case 98: break;
          case 22:
            { _popState(); return CaddyfileTypes.STAR;
            }
          // fall through
          case 99: break;
          case 23:
            { return CaddyfileTypes.SLASH;
            }
          // fall through
          case 100: break;
          case 24:
            { _popState(); return CaddyfileTypes.MATCHER_NAME;
            }
          // fall through
          case 101: break;
          case 25:
            { _pushState(MATCH_DECLARE_DIRECTIVE); return CaddyfileTypes.MATCH_NAME;
            }
          // fall through
          case 102: break;
          case 26:
            { if (!__IN_MATCH_DECLARE_ONE) { _popState(); yypushback(yylength()); } else { return TokenType.WHITE_SPACE; }
            }
          // fall through
          case 103: break;
          case 27:
            { __IN_MATCH_DECLARE_ONE = true; return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 104: break;
          case 28:
            { return CaddyfileTypes.MATCH_DECLARE_TWO_SEP;
            }
          // fall through
          case 105: break;
          case 29:
            { __IN_MATCH_DECLARE_ONE = false; _popState(); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 106: break;
          case 30:
            { _pushState(MATCH_DECLARE_DIR_HEADER_VALUE); return CaddyfileTypes.HEADER;
            }
          // fall through
          case 107: break;
          case 31:
            { _popState(); return CaddyfileTypes.HEADER_VALUE;
            }
          // fall through
          case 108: break;
          case 32:
            { return CaddyfileTypes.METHOD;
            }
          // fall through
          case 109: break;
          case 33:
            { return CaddyfileTypes.STATUS_CODE;
            }
          // fall through
          case 110: break;
          case 34:
            { yybegin(MATCH_DECLARE); return CaddyfileTypes.MATCH_DECLARE;
            }
          // fall through
          case 111: break;
          case 35:
            { yybegin(YYINITIAL); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 112: break;
          case 36:
            { yybegin(GROUP); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 113: break;
          case 37:
            { _pushState(MATCHER); yypushback(yylength());
            }
          // fall through
          case 114: break;
          case 38:
            { _pushState(GROUP_DIRECTIVE_BASIC_AUTH_SERECTS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 115: break;
          case 39:
            { _pushState(GROUP_DIRECTIVE_BASIC_AUTH_PASSWORD); return CaddyfileTypes.USERNAME;
            }
          // fall through
          case 116: break;
          case 40:
            { _popState(); return CaddyfileTypes.PASSWORD;
            }
          // fall through
          case 117: break;
          case 41:
            { if (_isStackEmpty()) yybegin(GROUP); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 118: break;
          case 42:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 119: break;
          case 43:
            { yybegin(GROUP); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 120: break;
          case 44:
            { _popState(); return CaddyfileTypes.GZIP_LEVEL;
            }
          // fall through
          case 121: break;
          case 45:
            { _popState(); return CaddyfileTypes.MINIMUM_LENGTH;
            }
          // fall through
          case 122: break;
          case 46:
            { _pushState(QUOTED_STRING); return CaddyfileTypes.QUOTATION;
            }
          // fall through
          case 123: break;
          case 47:
            { _pushState(GROUP_DIRECTIVE_ERROR_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 124: break;
          case 48:
            { _popState(); return CaddyfileTypes.TEXT;
            }
          // fall through
          case 125: break;
          case 49:
            { return CaddyfileTypes.FILEPATH;
            }
          // fall through
          case 126: break;
          case 50:
            { _pushState(VARIABLE_STRING); yypushback(yylength());
            }
          // fall through
          case 127: break;
          case 51:
            { return CaddyfileTypes.HOSTNAME;
            }
          // fall through
          case 128: break;
          case 52:
            { return CaddyfileTypes.PORT;
            }
          // fall through
          case 129: break;
          case 53:
            { return CaddyfileTypes.COLON;
            }
          // fall through
          case 130: break;
          case 54:
            { yybegin(GROUP_DIRECTIVE_TLS); return CaddyfileTypes.TLS;
            }
          // fall through
          case 131: break;
          case 55:
            { _pushState(MATCHER_TWO); return CaddyfileTypes.MATCH_DECLARE_DIR_PATH;
            }
          // fall through
          case 132: break;
          case 56:
            { yybegin(GROUP_DIRECTIVE_BIND); return CaddyfileTypes.BIND;
            }
          // fall through
          case 133: break;
          case 57:
            { return CaddyfileTypes.IPV6;
            }
          // fall through
          case 134: break;
          case 58:
            { return CaddyfileTypes.COMPRESSION_METHOD;
            }
          // fall through
          case 135: break;
          case 59:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_GZIP); return CaddyfileTypes.ENCODE_ARG_GZIP;
            }
          // fall through
          case 136: break;
          case 60:
            { return CaddyfileTypes.ENCODE_ARG_ZSTD;
            }
          // fall through
          case 137: break;
          case 61:
            { return CaddyfileTypes.PROTOCOL;
            }
          // fall through
          case 138: break;
          case 62:
            { yybegin(GROUP_DIRECTIVE_ABORT); return CaddyfileTypes.ABORT;
            }
          // fall through
          case 139: break;
          case 63:
            { yybegin(GROUP_DIRECTIVE_ERROR); return CaddyfileTypes.ERROR;
            }
          // fall through
          case 140: break;
          case 64:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.REDIR;
            }
          // fall through
          case 141: break;
          case 65:
            { _pushState(MATCH_DECLARE_DIRECTIVE); return CaddyfileTypes.MATCH_DIRECTIVE;
            }
          // fall through
          case 142: break;
          case 66:
            { _pushState(MATCH_DECLARE_DIR_HEADER); return CaddyfileTypes.MATCH_DECLARE_DIR_HEADER;
            }
          // fall through
          case 143: break;
          case 67:
            { _pushState(MATCH_DECLARE_DIR_METHOD); return CaddyfileTypes.MATCH_DECLARE_DIR_METHOD;
            }
          // fall through
          case 144: break;
          case 68:
            { _pushState(MATCH_DECLARE_DIR_STATUS); return CaddyfileTypes.MATCH_DECLARE_DIR_STATUS;
            }
          // fall through
          case 145: break;
          case 69:
            { yybegin(GROUP_DIRECTIVE_ENCODE); return CaddyfileTypes.ENCODE;
            }
          // fall through
          case 146: break;
          case 70:
            { return CaddyfileTypes.UNIX_SOCKET;
            }
          // fall through
          case 147: break;
          case 71:
            { yybegin(GROUP_DIRECTIVE_RESPOND); return CaddyfileTypes.RESPOND;
            }
          // fall through
          case 148: break;
          case 72:
            { return CaddyfileTypes.IPV4;
            }
          // fall through
          case 149: break;
          case 73:
            { _pushState(GROUP_DIRECTIVE_ERROR_ARGS_MESSAGE); return CaddyfileTypes.ERROR_ARG_MESSAGE;
            }
          // fall through
          case 150: break;
          case 74:
            { yybegin(GROUP_DIRECTIVE_BASIC_AUTH); return CaddyfileTypes.BASIC_AUTH;
            }
          // fall through
          case 151: break;
          case 75:
            { yybegin(GROUP_DIRECTIVE_ACME_SERVER); return CaddyfileTypes.ACME_SERVER;
            }
          // fall through
          case 152: break;
          case 76:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return CaddyfileTypes.REVERSE_PROXY;
            }
          // fall through
          case 153: break;
          case 77:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MINIMUM_LENGTH); return CaddyfileTypes.ENCODE_ARG_MINIMUM_LENGTH;
            }
          // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

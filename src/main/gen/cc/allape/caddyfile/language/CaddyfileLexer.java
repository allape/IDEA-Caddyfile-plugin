// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Caddyfile.flex

package cc.allape.caddyfile.language;

// DO NOT OPTIMIZE IMPORT
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import cc.allape.caddyfile.language.psi.CaddyfileTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayList;
import java.util.Stack;
// DO NOT OPTIMIZE IMPORT


public class CaddyfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STARRED_HOSTNAME = 2;
  public static final int PORT = 4;
  public static final int STARRED_PATH = 6;
  public static final int MATCH = 8;
  public static final int BINDING_HOSTNAME = 10;
  public static final int VARIABLE = 12;
  public static final int VARIABLE_STRING = 14;
  public static final int QUOTED_VARIABLE_STRING = 16;
  public static final int GROUP = 18;
  public static final int GROUP_DIRECTIVE_ABORT = 20;
  public static final int GROUP_DIRECTIVE_ACME_SERVER = 22;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH = 24;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH_SERECTS = 26;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH_PASSWORD = 28;
  public static final int GROUP_DIRECTIVE_BIND = 30;
  public static final int GROUP_DIRECTIVE_ENCODE = 32;
  public static final int GROUP_DIRECTIVE_TLS = 34;
  public static final int GROUP_DIRECTIVE_REDIR = 36;
  public static final int GROUP_DIRECTIVE_RESPOND = 38;
  public static final int GROUP_DIRECTIVE_REVERSE_PROXY = 40;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS = 42;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_GZIP = 44;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MINIMUM_LENGTH = 46;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MATCH = 48;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ONE_LINE = 50;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ONE_LINE_HEADER = 52;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ONE_LINE_HEADER_VALUE = 54;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ONE_LINE_STATUS = 56;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ARGS = 58;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ARGS_STATUS = 60;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ARGS_HEADER = 62;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ARGS_HEADER_VALUE = 64;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     4,  4,  8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 26, 26, 28, 28, 
    25, 25
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\6\6\0\1\7\2\0\1\10\1\11\1\12"+
    "\12\13\1\14\6\0\6\15\24\16\1\17\1\20\1\21"+
    "\1\0\1\22\1\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\15\1\30\1\31\1\32\2\16\1\33\1\34\1\35"+
    "\1\36\1\37\1\16\1\40\1\41\1\42\1\43\1\44"+
    "\1\16\1\45\1\46\1\47\1\50\1\51\1\52\7\0"+
    "\1\3\32\0\1\3\11\0\1\16\12\0\1\16\4\0"+
    "\1\16\5\0\27\16\1\0\37\16\1\0\u01ca\16\4\0"+
    "\14\16\16\0\5\16\7\0\1\16\1\0\1\16\21\0"+
    "\165\16\1\0\2\16\2\0\4\16\1\0\1\16\6\0"+
    "\1\16\1\0\3\16\1\0\1\16\1\0\24\16\1\0"+
    "\123\16\1\0\213\16\1\0\255\16\1\0\46\16\2\0"+
    "\1\16\6\0\51\16\10\0\55\16\1\0\1\16\1\0"+
    "\2\16\1\0\2\16\1\0\1\16\10\0\33\16\4\0"+
    "\4\16\35\0\13\16\5\0\100\16\12\53\4\0\146\16"+
    "\1\0\10\16\2\0\12\16\1\0\6\16\12\53\3\16"+
    "\2\0\1\16\20\0\73\16\2\0\145\16\16\0\12\53"+
    "\54\16\4\0\1\16\2\0\1\16\2\0\56\16\22\0"+
    "\34\16\4\0\13\16\65\0\25\16\1\0\10\16\25\0"+
    "\17\16\1\0\201\16\2\0\12\53\1\0\23\16\1\0"+
    "\10\16\2\0\2\16\2\0\26\16\1\0\7\16\1\0"+
    "\1\16\3\0\4\16\2\0\11\16\2\0\2\16\2\0"+
    "\4\16\10\0\1\16\4\0\2\16\1\0\5\16\2\0"+
    "\12\53\2\16\12\0\1\16\1\0\1\16\2\0\3\16"+
    "\1\0\6\16\4\0\2\16\2\0\26\16\1\0\7\16"+
    "\1\0\2\16\1\0\2\16\1\0\2\16\2\0\1\16"+
    "\1\0\5\16\4\0\2\16\2\0\3\16\3\0\1\16"+
    "\7\0\4\16\1\0\1\16\7\0\12\53\6\16\13\0"+
    "\3\16\1\0\11\16\1\0\3\16\1\0\26\16\1\0"+
    "\7\16\1\0\2\16\1\0\5\16\2\0\12\16\1\0"+
    "\3\16\1\0\3\16\2\0\1\16\17\0\4\16\2\0"+
    "\12\53\11\0\7\16\1\0\3\16\1\0\10\16\2\0"+
    "\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0"+
    "\5\16\2\0\11\16\2\0\2\16\2\0\3\16\10\0"+
    "\2\16\4\0\2\16\1\0\5\16\2\0\12\53\1\0"+
    "\1\16\20\0\2\16\1\0\6\16\3\0\3\16\1\0"+
    "\4\16\3\0\2\16\1\0\1\16\1\0\2\16\3\0"+
    "\2\16\3\0\3\16\3\0\14\16\4\0\5\16\3\0"+
    "\3\16\1\0\4\16\2\0\1\16\6\0\1\16\16\0"+
    "\12\53\20\0\15\16\1\0\3\16\1\0\27\16\1\0"+
    "\20\16\3\0\10\16\1\0\3\16\1\0\4\16\7\0"+
    "\2\16\1\0\3\16\5\0\4\16\2\0\12\53\20\0"+
    "\4\16\1\0\10\16\1\0\3\16\1\0\27\16\1\0"+
    "\12\16\1\0\5\16\2\0\11\16\1\0\3\16\1\0"+
    "\4\16\7\0\2\16\7\0\1\16\1\0\4\16\2\0"+
    "\12\53\1\0\2\16\15\0\4\16\1\0\10\16\1\0"+
    "\3\16\1\0\63\16\1\0\3\16\1\0\5\16\5\0"+
    "\4\16\7\0\5\16\2\0\12\53\12\0\6\16\2\0"+
    "\2\16\1\0\22\16\3\0\30\16\1\0\11\16\1\0"+
    "\1\16\2\0\7\16\3\0\1\16\4\0\6\16\1\0"+
    "\1\16\1\0\10\16\6\0\12\53\2\0\2\16\15\0"+
    "\72\16\5\0\17\16\1\0\12\53\47\0\2\16\1\0"+
    "\1\16\1\0\5\16\1\0\30\16\1\0\1\16\1\0"+
    "\27\16\2\0\5\16\1\0\1\16\1\0\6\16\2\0"+
    "\12\53\2\0\4\16\40\0\1\16\27\0\2\16\6\0"+
    "\12\53\13\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\12\16\1\0\44\16\4\0\24\16\1\0\22\16\1\0"+
    "\44\16\11\0\1\16\71\0\100\16\12\53\6\0\100\16"+
    "\12\53\4\16\2\0\46\16\1\0\1\16\5\0\1\16"+
    "\2\0\53\16\1\0\115\16\1\0\4\16\2\0\7\16"+
    "\1\0\1\16\1\0\4\16\2\0\51\16\1\0\4\16"+
    "\2\0\41\16\1\0\4\16\2\0\7\16\1\0\1\16"+
    "\1\0\4\16\2\0\17\16\1\0\71\16\1\0\4\16"+
    "\2\0\103\16\2\0\3\16\40\0\20\16\20\0\126\16"+
    "\2\0\6\16\3\0\u016c\16\2\0\21\16\1\3\32\16"+
    "\5\0\113\16\3\0\13\16\7\0\15\16\1\0\7\16"+
    "\13\0\25\16\13\0\24\16\14\0\15\16\1\0\3\16"+
    "\1\0\2\16\14\0\124\16\3\0\1\16\4\0\2\16"+
    "\2\0\12\53\41\0\3\16\2\0\12\53\6\0\131\16"+
    "\7\0\53\16\5\0\106\16\12\0\37\16\1\0\14\16"+
    "\4\0\14\16\12\0\12\53\36\16\2\0\5\16\13\0"+
    "\54\16\4\0\32\16\6\0\12\53\46\0\34\16\4\0"+
    "\77\16\1\0\35\16\2\0\1\16\12\53\6\0\12\53"+
    "\15\0\1\16\10\0\17\16\101\0\114\16\4\0\12\53"+
    "\21\0\11\16\14\0\60\16\12\53\72\16\14\0\70\16"+
    "\10\0\12\53\3\0\3\16\12\53\44\16\2\0\11\16"+
    "\7\0\53\16\2\0\3\16\20\0\3\16\1\0\47\16"+
    "\5\0\372\16\1\0\33\16\2\0\6\16\2\0\46\16"+
    "\2\0\6\16\2\0\10\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\0\37\16\2\0\65\16\1\0\7\16"+
    "\1\0\1\16\3\0\3\16\1\0\7\16\3\0\4\16"+
    "\2\0\6\16\4\0\15\16\5\0\3\16\1\0\7\16"+
    "\3\0\13\3\35\0\2\3\5\0\1\3\17\0\2\16"+
    "\23\0\1\16\12\0\1\3\21\0\1\16\15\0\1\16"+
    "\20\0\15\16\63\0\41\16\21\0\1\16\4\0\1\16"+
    "\2\0\12\16\1\0\1\16\3\0\5\16\6\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\4\16\1\0\13\16"+
    "\2\0\4\16\5\0\5\16\4\0\1\16\21\0\51\16"+
    "\u022d\0\64\16\26\0\57\16\1\0\57\16\1\0\205\16"+
    "\6\0\11\16\14\0\46\16\1\0\1\16\5\0\1\16"+
    "\2\0\70\16\7\0\1\16\17\0\30\16\11\0\7\16"+
    "\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16"+
    "\1\0\7\16\1\0\7\16\1\0\7\16\1\0\40\16"+
    "\57\0\1\16\320\0\1\3\4\0\3\16\31\0\17\16"+
    "\1\0\5\16\2\0\5\16\4\0\126\16\2\0\2\16"+
    "\2\0\3\16\1\0\132\16\1\0\4\16\5\0\53\16"+
    "\1\0\136\16\21\0\33\16\65\0\306\16\112\0\360\16"+
    "\20\0\215\16\103\0\56\16\2\0\15\16\3\0\20\16"+
    "\12\53\2\16\24\0\63\16\1\0\12\16\1\0\163\16"+
    "\45\0\11\16\2\0\147\16\2\0\65\16\2\0\5\16"+
    "\60\0\61\16\30\0\64\16\14\0\106\16\12\0\12\53"+
    "\6\0\30\16\3\0\1\16\1\0\3\16\12\53\44\16"+
    "\2\0\44\16\14\0\35\16\3\0\101\16\16\0\1\16"+
    "\12\53\6\0\20\16\12\53\5\16\1\0\67\16\11\0"+
    "\16\16\2\0\12\53\6\0\27\16\3\0\111\16\30\0"+
    "\3\16\2\0\20\16\2\0\5\16\12\0\6\16\2\0"+
    "\6\16\2\0\6\16\11\0\7\16\1\0\7\16\1\0"+
    "\53\16\1\0\14\16\10\0\173\16\1\0\2\16\2\0"+
    "\12\53\6\0\244\16\14\0\27\16\4\0\61\16\4\0"+
    "\156\16\2\0\152\16\46\0\7\16\14\0\5\16\5\0"+
    "\14\16\1\0\15\16\1\0\5\16\1\0\1\16\1\0"+
    "\2\16\1\0\2\16\1\0\154\16\41\0\153\16\22\0"+
    "\100\16\2\0\66\16\50\0\14\16\4\0\20\16\20\0"+
    "\20\16\3\0\2\16\30\0\3\16\40\0\5\16\1\0"+
    "\207\16\23\0\12\53\7\0\32\16\4\0\1\16\1\0"+
    "\32\16\13\0\131\16\3\0\6\16\2\0\6\16\2\0"+
    "\6\16\2\0\3\16\43\0\14\16\1\0\32\16\1\0"+
    "\23\16\1\0\2\16\1\0\17\16\2\0\16\16\42\0"+
    "\173\16\105\0\65\16\210\0\1\16\202\0\35\16\3\0"+
    "\61\16\17\0\1\16\37\0\40\16\15\0\36\16\5\0"+
    "\53\16\5\0\36\16\2\0\44\16\4\0\10\16\1\0"+
    "\5\16\52\0\236\16\2\0\12\53\6\0\44\16\4\0"+
    "\44\16\4\0\50\16\10\0\64\16\234\0\67\16\11\0"+
    "\26\16\12\0\10\16\230\0\6\16\2\0\1\16\1\0"+
    "\54\16\1\0\2\16\3\0\1\16\2\0\27\16\12\0"+
    "\27\16\11\0\37\16\101\0\23\16\1\0\2\16\12\0"+
    "\26\16\12\0\32\16\106\0\70\16\6\0\2\16\100\0"+
    "\4\16\1\0\2\16\5\0\10\16\1\0\3\16\1\0"+
    "\35\16\2\0\3\16\4\0\1\16\40\0\35\16\3\0"+
    "\35\16\43\0\10\16\1\0\36\16\31\0\66\16\12\0"+
    "\26\16\12\0\23\16\15\0\22\16\156\0\111\16\67\0"+
    "\63\16\15\0\63\16\15\0\50\16\10\0\12\53\306\0"+
    "\35\16\12\0\1\16\10\0\41\16\217\0\27\16\11\0"+
    "\107\16\37\0\12\53\17\0\74\16\25\0\31\16\7\0"+
    "\12\53\6\0\65\16\1\0\12\53\4\0\3\16\11\0"+
    "\44\16\2\0\1\16\11\0\105\16\4\0\4\16\3\0"+
    "\12\53\1\16\1\0\1\16\43\0\22\16\1\0\45\16"+
    "\6\0\1\16\101\0\7\16\1\0\1\16\1\0\4\16"+
    "\1\0\17\16\1\0\12\16\7\0\73\16\5\0\12\53"+
    "\6\0\4\16\1\0\10\16\2\0\2\16\2\0\26\16"+
    "\1\0\7\16\1\0\2\16\1\0\5\16\1\0\12\16"+
    "\2\0\2\16\2\0\3\16\2\0\1\16\6\0\1\16"+
    "\5\0\7\16\2\0\7\16\3\0\5\16\213\0\113\16"+
    "\5\0\12\53\4\0\2\16\40\0\106\16\1\0\1\16"+
    "\10\0\12\53\246\0\66\16\2\0\11\16\27\0\6\16"+
    "\42\0\101\16\3\0\1\16\13\0\12\53\46\0\71\16"+
    "\7\0\12\53\66\0\33\16\2\0\17\16\4\0\12\53"+
    "\306\0\73\16\145\0\100\16\12\53\25\0\1\16\240\0"+
    "\10\16\2\0\56\16\2\0\10\16\1\0\2\16\33\0"+
    "\77\16\10\0\1\16\10\0\112\16\3\0\1\16\42\0"+
    "\71\16\7\0\11\16\1\0\55\16\1\0\11\16\17\0"+
    "\12\53\30\0\36\16\2\0\26\16\1\0\16\16\111\0"+
    "\7\16\1\0\2\16\1\0\54\16\3\0\1\16\1\0"+
    "\2\16\1\0\11\16\10\0\12\53\6\0\6\16\1\0"+
    "\2\16\1\0\45\16\1\0\2\16\1\0\6\16\7\0"+
    "\12\53\u0136\0\27\16\11\0\232\16\146\0\157\16\21\0"+
    "\304\16\274\0\57\16\321\0\107\16\271\0\71\16\7\0"+
    "\37\16\1\0\12\53\146\0\36\16\2\0\5\16\13\0"+
    "\67\16\11\0\4\16\14\0\12\53\11\0\25\16\5\0"+
    "\23\16\260\0\100\16\200\0\113\16\4\0\71\16\7\0"+
    "\21\16\100\0\2\16\1\0\1\16\34\0\370\16\10\0"+
    "\363\16\15\0\37\16\61\0\3\16\21\0\4\16\10\0"+
    "\u018c\16\4\0\153\16\5\0\15\16\3\0\11\16\7\0"+
    "\12\16\3\0\2\16\306\0\5\16\3\0\6\16\10\0"+
    "\10\16\2\0\7\16\36\0\4\16\224\0\3\16\273\0"+
    "\125\16\1\0\107\16\1\0\2\16\2\0\1\16\2\0"+
    "\2\16\2\0\4\16\1\0\14\16\1\0\1\16\1\0"+
    "\7\16\1\0\101\16\1\0\4\16\2\0\10\16\1\0"+
    "\7\16\1\0\34\16\1\0\4\16\1\0\5\16\1\0"+
    "\1\16\3\0\7\16\1\0\u0154\16\2\0\31\16\1\0"+
    "\31\16\1\0\37\16\1\0\31\16\1\0\37\16\1\0"+
    "\31\16\1\0\37\16\1\0\31\16\1\0\37\16\1\0"+
    "\31\16\1\0\10\16\2\0\62\53\67\16\4\0\62\16"+
    "\10\0\1\16\16\0\1\16\26\0\5\16\1\0\17\16"+
    "\120\0\7\16\1\0\21\16\2\0\7\16\1\0\2\16"+
    "\1\0\5\16\325\0\55\16\3\0\16\16\2\0\12\53"+
    "\4\0\1\16\u0171\0\60\16\12\53\6\0\305\16\13\0"+
    "\7\16\51\0\114\16\4\0\12\53\246\0\4\16\1\0"+
    "\33\16\1\0\2\16\1\0\1\16\2\0\1\16\1\0"+
    "\12\16\1\0\4\16\1\0\1\16\1\0\1\16\6\0"+
    "\1\16\4\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\3\16\1\0\2\16\1\0\1\16\2\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\1\0\1\16\1\0"+
    "\2\16\1\0\1\16\2\0\4\16\1\0\7\16\1\0"+
    "\4\16\1\0\4\16\1\0\1\16\1\0\12\16\1\0"+
    "\21\16\5\0\3\16\1\0\5\16\1\0\21\16\164\0"+
    "\32\16\6\0\32\16\6\0\32\16\166\0\327\16\51\0"+
    "\65\16\13\0\336\16\2\0\u0182\16\16\0\u0131\16\37\0"+
    "\36\16\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\35\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\10\1\11\1\2\1\12\2\5\1\13\2\14"+
    "\1\15\2\16\1\17\1\20\1\5\1\21\1\5\1\22"+
    "\5\3\1\23\1\24\2\25\1\26\1\2\1\27\1\20"+
    "\2\30\3\3\1\31\2\3\1\32\1\33\1\3\1\34"+
    "\1\3\3\35\1\36\1\37\1\40\1\41\1\37\3\3"+
    "\1\21\1\6\1\42\1\43\2\44\1\45\2\3\1\5"+
    "\2\46\2\47\2\3\2\50\44\0\1\51\10\0\1\34"+
    "\14\0\1\52\12\0\1\53\1\0\1\54\1\55\1\56"+
    "\2\0\1\57\4\0\1\60\3\0\1\61\12\0\1\62"+
    "\7\0\1\63\11\0\1\64\1\0\1\65\1\66\1\67"+
    "\1\70\2\0\1\71\1\0\1\72\12\0\1\72\11\0"+
    "\1\72\6\0\1\73\5\0\1\74\7\0\1\75\1\0"+
    "\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554"+
    "\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0554\0\u0554\0\u0554\0\u0630"+
    "\0\u065c\0\u0688\0\u06b4\0\u0554\0\u06e0\0\u070c\0\u0554\0\u0738"+
    "\0\u0764\0\u0554\0\u0554\0\u0790\0\u07bc\0\u07e8\0\u0554\0\u0814"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u0554\0\u0554\0\u08f0\0\u091c"+
    "\0\u0554\0\u0554\0\u0948\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8"+
    "\0\u0a24\0\u0554\0\u0a50\0\u0a7c\0\u0554\0\u0554\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0554\0\u0580\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0554"+
    "\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0554\0\u0554\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0554\0\u0d3c\0\u0d68\0\u0554\0\u0d94\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20"+
    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u0b00\0\u0b2c"+
    "\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u0554\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c"+
    "\0\u15a8\0\u15d4\0\u1600\0\u0554\0\u162c\0\u1658\0\u1684\0\u16b0"+
    "\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810"+
    "\0\u0554\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944"+
    "\0\u1970\0\u199c\0\u19c8\0\u0554\0\u19f4\0\u0554\0\u0554\0\u0554"+
    "\0\u1a20\0\u1a4c\0\u0554\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u0554"+
    "\0\u1b28\0\u1b54\0\u1b80\0\u0554\0\u1bac\0\u1bd8\0\u1c04\0\u1c30"+
    "\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u0554\0\u1d64"+
    "\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u0554\0\u1e98"+
    "\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8"+
    "\0\u1d38\0\u2024\0\u0554\0\u0554\0\u0554\0\u0554\0\u2050\0\u207c"+
    "\0\u0554\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0"+
    "\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310"+
    "\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u0554"+
    "\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u0554\0\u2578"+
    "\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u0554\0\u2654\0\u2680\0\u26ac"+
    "\0\u26d8\0\u2704\0\u2730\0\u275c\0\u0554\0\u2788\0\u0554";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\36\2\37\1\40\1\37\1\36\1\41\45\36\1\42"+
    "\1\43\2\40\1\43\1\42\1\44\1\45\1\42\1\46"+
    "\2\42\1\47\37\42\1\40\1\50\2\40\1\50\1\40"+
    "\1\41\4\40\1\51\37\40\1\51\1\52\1\43\2\40"+
    "\1\43\1\52\1\53\1\45\2\52\1\54\41\52\1\40"+
    "\1\50\2\40\1\50\1\40\1\41\45\40\1\55\1\50"+
    "\2\40\1\50\1\55\1\56\41\55\1\57\3\55\1\60"+
    "\1\50\2\40\1\50\1\60\1\61\41\60\1\62\1\60"+
    "\1\63\1\60\1\64\2\65\1\40\1\65\1\64\1\66"+
    "\41\64\1\67\3\64\1\40\2\37\1\40\1\37\1\40"+
    "\1\41\14\40\1\70\1\71\2\40\1\72\10\40\1\73"+
    "\1\40\1\74\7\40\1\75\2\40\1\50\1\76\1\40"+
    "\1\50\1\40\1\41\45\40\1\77\1\50\1\76\1\40"+
    "\1\50\1\77\1\100\41\77\1\101\3\77\1\40\1\50"+
    "\1\102\1\40\1\50\1\40\1\41\1\40\1\103\2\40"+
    "\1\103\1\40\2\103\3\40\26\103\2\40\1\104\1\103"+
    "\1\105\1\50\2\40\1\50\1\105\1\106\43\105\1\40"+
    "\1\105\1\40\1\50\1\76\1\40\1\50\1\40\1\41"+
    "\4\40\1\107\3\40\1\110\23\40\1\111\7\40\1\107"+
    "\1\40\1\50\1\112\1\40\1\50\1\40\1\41\21\40"+
    "\1\113\16\40\1\114\1\115\1\40\1\116\2\40\1\50"+
    "\1\76\1\40\1\50\1\117\1\41\1\40\2\120\1\121"+
    "\1\120\1\40\2\120\1\40\1\121\1\40\26\120\3\40"+
    "\1\120\1\122\1\50\1\76\1\40\1\50\1\122\1\123"+
    "\4\122\1\124\1\122\2\124\3\122\26\124\3\122\1\124"+
    "\1\40\1\50\1\76\1\40\1\50\1\40\1\41\4\40"+
    "\1\125\37\40\1\125\1\40\1\50\1\76\1\40\1\50"+
    "\1\40\1\41\1\40\1\126\2\40\1\127\1\130\2\131"+
    "\3\40\26\131\3\40\1\127\1\40\1\50\1\102\1\40"+
    "\1\50\1\40\1\41\21\40\1\132\3\40\1\133\12\40"+
    "\1\134\2\40\1\135\2\40\1\50\1\136\1\40\1\50"+
    "\1\40\1\41\4\40\1\137\37\40\1\137\1\40\1\50"+
    "\1\136\1\40\1\50\1\40\1\41\4\40\1\140\37\40"+
    "\1\140\1\141\1\50\1\135\1\40\1\50\1\141\1\142"+
    "\41\141\1\143\3\141\1\40\1\50\1\135\1\40\1\50"+
    "\1\40\1\41\22\40\1\144\7\40\1\145\7\40\1\146"+
    "\2\40\1\147\1\50\1\135\1\40\1\50\1\147\1\150"+
    "\42\147\1\135\2\147\1\151\1\50\1\135\1\40\1\50"+
    "\1\151\1\152\45\151\1\40\1\50\1\135\1\40\1\50"+
    "\1\40\1\41\4\40\1\125\37\40\1\125\1\40\1\50"+
    "\1\102\1\40\1\50\1\40\1\41\22\40\1\153\7\40"+
    "\1\154\10\40\1\63\1\40\1\155\1\50\1\135\1\40"+
    "\1\50\1\155\1\156\45\155\1\36\4\0\1\36\1\0"+
    "\45\36\1\0\2\37\1\0\1\37\123\0\2\41\1\0"+
    "\51\41\1\42\4\0\2\42\1\0\1\42\1\0\2\42"+
    "\1\0\37\42\1\0\1\43\2\0\1\43\47\0\1\44"+
    "\1\41\1\0\2\41\2\44\1\41\1\44\1\41\2\44"+
    "\1\41\37\44\1\0\1\50\2\0\1\50\62\0\1\51"+
    "\37\0\1\51\1\52\4\0\2\52\1\0\2\52\1\0"+
    "\41\52\1\53\1\41\1\0\2\41\2\53\1\41\2\53"+
    "\1\41\41\53\1\55\4\0\43\55\1\0\3\55\1\56"+
    "\1\41\1\0\2\41\43\56\1\41\3\56\1\60\4\0"+
    "\43\60\1\0\1\60\1\0\1\60\1\61\1\41\1\0"+
    "\2\41\43\61\1\41\1\61\1\41\1\61\1\64\4\0"+
    "\43\64\1\0\3\64\1\0\2\65\1\0\1\65\47\0"+
    "\1\66\1\41\1\0\2\41\43\66\1\41\3\66\24\0"+
    "\1\157\1\160\51\0\1\161\6\0\1\162\56\0\1\163"+
    "\45\0\1\164\57\0\1\165\20\0\1\77\4\0\43\77"+
    "\1\0\3\77\1\100\1\41\1\0\2\41\43\100\1\41"+
    "\3\100\10\0\1\103\2\0\1\103\1\0\2\103\3\0"+
    "\26\103\2\0\2\103\1\105\4\0\45\105\1\0\1\105"+
    "\1\106\1\41\1\0\2\41\45\106\1\41\1\106\11\0"+
    "\1\166\1\0\1\167\37\0\1\167\13\0\1\170\1\171"+
    "\1\170\5\0\5\170\61\0\1\172\65\0\1\173\45\0"+
    "\1\174\16\0\1\175\3\0\2\175\1\176\1\175\1\0"+
    "\2\175\1\0\1\176\1\0\26\175\3\0\1\175\10\0"+
    "\2\120\1\177\1\120\1\0\2\120\1\0\1\177\1\0"+
    "\26\120\3\0\1\120\10\0\2\120\1\0\1\120\1\0"+
    "\2\120\3\0\26\120\3\0\1\120\13\0\1\200\1\201"+
    "\2\200\3\0\26\200\3\0\1\200\13\0\1\125\37\0"+
    "\1\125\10\0\1\126\1\202\1\0\1\126\1\0\2\126"+
    "\3\0\26\126\3\0\1\126\10\0\1\126\1\202\1\0"+
    "\1\127\1\201\2\131\3\0\26\131\3\0\1\127\10\0"+
    "\1\126\1\202\1\0\1\131\1\201\2\131\3\0\26\131"+
    "\3\0\1\131\47\0\1\203\27\0\1\204\6\0\1\205"+
    "\62\0\1\206\25\0\1\137\37\0\1\137\13\0\1\140"+
    "\37\0\1\140\1\141\4\0\43\141\1\0\3\141\1\142"+
    "\1\41\1\0\2\41\43\142\1\41\3\142\27\0\1\207"+
    "\66\0\1\210\11\0\1\147\4\0\44\147\1\0\2\147"+
    "\1\150\1\41\1\0\2\41\44\150\1\41\2\150\1\151"+
    "\4\0\47\151\1\152\1\41\1\0\2\41\47\152\27\0"+
    "\1\211\66\0\1\212\11\0\1\155\4\0\47\155\1\156"+
    "\1\41\1\0\2\41\47\156\36\0\1\213\51\0\1\214"+
    "\60\0\1\215\47\0\1\216\43\0\1\217\54\0\1\220"+
    "\12\0\1\221\2\0\1\222\50\0\1\223\25\0\1\224"+
    "\37\0\1\224\11\0\1\166\1\0\1\225\37\0\1\225"+
    "\13\0\1\226\1\171\1\226\5\0\5\226\37\0\1\227"+
    "\1\230\1\227\5\0\5\227\56\0\1\231\53\0\1\232"+
    "\63\0\1\233\15\0\1\175\1\234\2\0\2\175\1\176"+
    "\1\175\1\0\2\175\1\0\1\176\1\0\26\175\3\0"+
    "\1\175\4\0\1\175\3\0\2\175\1\0\1\175\1\0"+
    "\2\175\3\0\26\175\3\0\1\175\12\0\1\235\51\0"+
    "\1\126\2\0\1\126\1\0\2\126\3\0\26\126\3\0"+
    "\1\126\32\0\1\236\63\0\1\237\46\0\1\240\60\0"+
    "\1\241\34\0\1\242\53\0\1\243\53\0\1\244\53\0"+
    "\1\245\70\0\1\246\42\0\1\247\56\0\1\250\47\0"+
    "\1\251\63\0\1\252\47\0\1\253\60\0\1\254\43\0"+
    "\1\255\35\0\1\256\1\0\1\257\37\0\1\257\11\0"+
    "\1\166\55\0\1\260\1\171\1\260\5\0\5\260\37\0"+
    "\1\261\1\230\1\261\5\0\5\261\37\0\1\262\1\263"+
    "\1\262\3\0\1\264\1\0\5\262\71\0\1\265\45\0"+
    "\1\266\42\0\1\266\37\0\1\267\100\0\1\270\41\0"+
    "\1\271\60\0\1\272\47\0\1\273\53\0\1\274\67\0"+
    "\1\275\37\0\1\276\67\0\1\277\53\0\1\300\33\0"+
    "\1\301\56\0\1\302\54\0\1\303\65\0\1\304\51\0"+
    "\1\305\55\0\1\306\26\0\1\307\37\0\1\307\11\0"+
    "\1\256\1\0\1\310\37\0\1\310\13\0\1\311\1\171"+
    "\1\311\5\0\5\311\37\0\1\312\1\230\1\312\5\0"+
    "\5\312\37\0\1\313\1\263\1\313\3\0\1\264\1\0"+
    "\5\313\37\0\1\314\1\315\1\314\3\0\1\264\1\0"+
    "\5\314\36\0\1\316\72\0\1\317\56\0\1\320\46\0"+
    "\1\321\67\0\1\322\37\0\1\323\67\0\1\324\51\0"+
    "\1\325\34\0\1\326\60\0\1\327\61\0\1\330\57\0"+
    "\1\331\23\0\1\332\1\0\1\333\37\0\1\333\11\0"+
    "\1\256\56\0\1\171\52\0\1\334\1\230\1\334\5\0"+
    "\5\334\37\0\1\335\1\263\1\335\3\0\1\264\1\0"+
    "\5\335\37\0\1\336\1\315\1\336\3\0\1\264\1\0"+
    "\5\336\37\0\1\337\1\340\1\337\3\0\1\264\1\0"+
    "\5\337\24\0\1\341\4\0\47\341\43\0\1\342\50\0"+
    "\1\343\54\0\1\344\52\0\1\345\54\0\1\346\41\0"+
    "\1\347\47\0\1\350\56\0\1\351\54\0\1\352\37\0"+
    "\1\353\37\0\1\353\11\0\1\332\1\0\1\354\37\0"+
    "\1\354\14\0\1\230\52\0\1\355\1\263\1\355\3\0"+
    "\1\264\1\0\5\355\37\0\1\356\1\315\1\356\3\0"+
    "\1\264\1\0\5\356\37\0\1\357\1\340\1\357\3\0"+
    "\1\264\1\0\5\357\37\0\1\360\1\361\1\360\3\0"+
    "\1\264\1\0\5\360\60\0\1\362\57\0\1\363\56\0"+
    "\1\364\32\0\1\365\44\0\1\366\37\0\1\366\11\0"+
    "\1\332\56\0\1\263\4\0\1\264\45\0\1\367\1\315"+
    "\1\367\3\0\1\264\1\0\5\367\37\0\1\370\1\340"+
    "\1\370\3\0\1\264\1\0\5\370\37\0\1\371\1\361"+
    "\1\371\3\0\1\264\1\0\5\371\37\0\1\372\1\373"+
    "\1\372\3\0\1\264\1\0\5\372\46\0\1\374\75\0"+
    "\1\375\51\0\1\376\50\0\1\377\27\0\1\u0100\37\0"+
    "\1\u0100\14\0\1\315\4\0\1\264\45\0\1\u0101\1\340"+
    "\1\u0101\3\0\1\264\1\0\5\u0101\37\0\1\u0102\1\361"+
    "\1\u0102\3\0\1\264\1\0\5\u0102\37\0\1\u0103\1\373"+
    "\1\u0103\3\0\1\264\1\0\5\u0103\37\0\1\u0104\1\0"+
    "\1\u0104\3\0\1\264\1\0\5\u0104\57\0\1\u0105\47\0"+
    "\1\u0106\55\0\1\u0107\62\0\1\u0108\27\0\1\340\4\0"+
    "\1\264\45\0\1\u0109\1\361\1\u0109\3\0\1\264\1\0"+
    "\5\u0109\37\0\1\u010a\1\373\1\u010a\3\0\1\264\1\0"+
    "\5\u010a\37\0\1\u010b\1\0\1\u010b\3\0\1\264\1\0"+
    "\5\u010b\53\0\1\u010c\64\0\1\u010d\51\0\1\u010e\31\0"+
    "\1\361\4\0\1\264\45\0\1\u010f\1\373\1\u010f\3\0"+
    "\1\264\1\0\5\u010f\37\0\1\u0110\1\0\1\u0110\3\0"+
    "\1\264\1\0\5\u0110\61\0\1\u0111\63\0\1\u0112\22\0"+
    "\1\373\4\0\1\264\45\0\1\u0113\1\0\1\u0113\3\0"+
    "\1\264\1\0\5\u0113\54\0\1\u0114\71\0\1\u0115\26\0"+
    "\1\264\74\0\1\u0116\42\0\1\u0117\22\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10164];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\35\0\2\1\1\11\4\1\3\11\4\1\1\11\2\1"+
    "\1\11\2\1\2\11\3\1\1\11\5\1\2\11\2\1"+
    "\2\11\7\1\1\11\2\1\2\11\3\1\1\11\5\1"+
    "\1\11\4\1\2\11\4\1\1\11\2\1\1\11\10\1"+
    "\44\0\1\11\10\0\1\11\14\0\1\11\12\0\1\11"+
    "\1\0\3\11\2\0\1\11\4\0\1\11\3\0\1\11"+
    "\12\0\1\11\7\0\1\11\11\0\1\1\1\0\4\11"+
    "\2\0\1\11\1\0\1\1\12\0\1\1\11\0\1\11"+
    "\6\0\1\11\5\0\1\11\7\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> _stateStack = new Stack<Integer>();
    private void _pushState(int state) {
        _stateStack.push(zzLexicalState);
        yybegin(state);
    }
    private void _popState() {
        yybegin(_stateStack.pop());
    }
    private void _clearStack() {
        _stateStack.clear();
    }
    private boolean __IN_GROUP_DIRECTIVE_ENCODE_ARGS = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaddyfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(BINDING_HOSTNAME); yypushback(yylength());
            }
          // fall through
          case 63: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 64: break;
          case 3:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 65: break;
          case 4:
            { return CaddyfileTypes.COMMENT;
            }
          // fall through
          case 66: break;
          case 5:
            { return CaddyfileTypes.TEXT;
            }
          // fall through
          case 67: break;
          case 6:
            { _popState(); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 68: break;
          case 7:
            { return CaddyfileTypes.STAR;
            }
          // fall through
          case 69: break;
          case 8:
            { return CaddyfileTypes.DOT;
            }
          // fall through
          case 70: break;
          case 9:
            { _pushState(PORT); return CaddyfileTypes.COLON;
            }
          // fall through
          case 71: break;
          case 10:
            { _popState(); return CaddyfileTypes.PORT;
            }
          // fall through
          case 72: break;
          case 11:
            { return CaddyfileTypes.SLASH;
            }
          // fall through
          case 73: break;
          case 12:
            { _pushState(STARRED_HOSTNAME); yypushback(yylength());
            }
          // fall through
          case 74: break;
          case 13:
            { yybegin(GROUP); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 75: break;
          case 14:
            { return CaddyfileTypes.VARIABLE_NAME;
            }
          // fall through
          case 76: break;
          case 15:
            { return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 77: break;
          case 16:
            { _popState(); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 78: break;
          case 17:
            { _popState(); yypushback(yylength());
            }
          // fall through
          case 79: break;
          case 18:
            { _pushState(VARIABLE); yypushback(yylength());
            }
          // fall through
          case 80: break;
          case 19:
            { yybegin(YYINITIAL); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 81: break;
          case 20:
            { yybegin(GROUP); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 82: break;
          case 21:
            { _pushState(STARRED_PATH); yypushback(yylength());
            }
          // fall through
          case 83: break;
          case 22:
            { _pushState(GROUP_DIRECTIVE_BASIC_AUTH_SERECTS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 84: break;
          case 23:
            { _pushState(GROUP_DIRECTIVE_BASIC_AUTH_PASSWORD); return CaddyfileTypes.USERNAME;
            }
          // fall through
          case 85: break;
          case 24:
            { _popState(); return CaddyfileTypes.PASSWORD;
            }
          // fall through
          case 86: break;
          case 25:
            { if (!__IN_GROUP_DIRECTIVE_ENCODE_ARGS) yybegin(GROUP); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 87: break;
          case 26:
            { __IN_GROUP_DIRECTIVE_ENCODE_ARGS = true; _pushState(GROUP_DIRECTIVE_ENCODE_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 88: break;
          case 27:
            { __IN_GROUP_DIRECTIVE_ENCODE_ARGS = false; yybegin(GROUP); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 89: break;
          case 28:
            { return CaddyfileTypes.FILEPATH;
            }
          // fall through
          case 90: break;
          case 29:
            { _pushState(VARIABLE_STRING); yypushback(yylength());
            }
          // fall through
          case 91: break;
          case 30:
            { return CaddyfileTypes.STATUS_CODE;
            }
          // fall through
          case 92: break;
          case 31:
            { return CaddyfileTypes.HOSTNAME;
            }
          // fall through
          case 93: break;
          case 32:
            { return CaddyfileTypes.PORT;
            }
          // fall through
          case 94: break;
          case 33:
            { return CaddyfileTypes.COLON;
            }
          // fall through
          case 95: break;
          case 34:
            { _popState(); return CaddyfileTypes.GZIP_LEVEL;
            }
          // fall through
          case 96: break;
          case 35:
            { _popState(); return CaddyfileTypes.MINIMUM_LENGTH;
            }
          // fall through
          case 97: break;
          case 36:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ONE_LINE); yypushback(yylength());
            }
          // fall through
          case 98: break;
          case 37:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 99: break;
          case 38:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ONE_LINE_HEADER_VALUE); return CaddyfileTypes.HEADER;
            }
          // fall through
          case 100: break;
          case 39:
            { _popState(); return CaddyfileTypes.HEADER_VALUE;
            }
          // fall through
          case 101: break;
          case 40:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ARGS_HEADER_VALUE); return CaddyfileTypes.HEADER;
            }
          // fall through
          case 102: break;
          case 41:
            { yybegin(GROUP_DIRECTIVE_TLS); return CaddyfileTypes.TLS;
            }
          // fall through
          case 103: break;
          case 42:
            { yybegin(GROUP_DIRECTIVE_BIND); return CaddyfileTypes.BIND;
            }
          // fall through
          case 104: break;
          case 43:
            { return CaddyfileTypes.IPV6;
            }
          // fall through
          case 105: break;
          case 44:
            { return CaddyfileTypes.COMPRESSION_METHOD;
            }
          // fall through
          case 106: break;
          case 45:
            { return CaddyfileTypes.PROTOCOL;
            }
          // fall through
          case 107: break;
          case 46:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_GZIP); return CaddyfileTypes.ENCODE_ARG_GZIP;
            }
          // fall through
          case 108: break;
          case 47:
            { return CaddyfileTypes.ENCODE_ARG_ZSTD;
            }
          // fall through
          case 109: break;
          case 48:
            { yybegin(GROUP_DIRECTIVE_ABORT); return CaddyfileTypes.ABORT;
            }
          // fall through
          case 110: break;
          case 49:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.REDIR;
            }
          // fall through
          case 111: break;
          case 50:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MATCH); return CaddyfileTypes.ENCODE_ARG_MATCH;
            }
          // fall through
          case 112: break;
          case 51:
            { yybegin(GROUP_DIRECTIVE_ENCODE); return CaddyfileTypes.ENCODE;
            }
          // fall through
          case 113: break;
          case 52:
            { return CaddyfileTypes.UNIX_SOCKET;
            }
          // fall through
          case 114: break;
          case 53:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ONE_LINE_HEADER); return CaddyfileTypes.TEXT;
            }
          // fall through
          case 115: break;
          case 54:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ONE_LINE_STATUS); return CaddyfileTypes.TEXT;
            }
          // fall through
          case 116: break;
          case 55:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ARGS_HEADER); return CaddyfileTypes.ENCODE_ARG_MATCH_ARG_HEADER;
            }
          // fall through
          case 117: break;
          case 56:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MATCH_ARGS_STATUS); return CaddyfileTypes.ENCODE_ARG_MATCH_ARG_STATUS;
            }
          // fall through
          case 118: break;
          case 57:
            { yybegin(GROUP_DIRECTIVE_RESPOND); return CaddyfileTypes.RESPOND;
            }
          // fall through
          case 119: break;
          case 58:
            { return CaddyfileTypes.IPV4;
            }
          // fall through
          case 120: break;
          case 59:
            { yybegin(GROUP_DIRECTIVE_BASIC_AUTH); return CaddyfileTypes.BASIC_AUTH;
            }
          // fall through
          case 121: break;
          case 60:
            { yybegin(GROUP_DIRECTIVE_ACME_SERVER); return CaddyfileTypes.ACME_SERVER;
            }
          // fall through
          case 122: break;
          case 61:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return CaddyfileTypes.REVERSE_PROXY;
            }
          // fall through
          case 123: break;
          case 62:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MINIMUM_LENGTH); return CaddyfileTypes.ENCODE_ARG_MINIMUM_LENGTH;
            }
          // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Caddyfile.flex

package cc.allape.caddyfile.language;

// DO NOT OPTIMIZE IMPORT
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import cc.allape.caddyfile.language.psi.CaddyfileTypes;
import com.intellij.psi.TokenType;
import java.util.ArrayList;
import java.util.Stack;
// DO NOT OPTIMIZE IMPORT


public class CaddyfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int HOSTNAME_MATCHER = 2;
  public static final int PORT = 4;
  public static final int MATCH = 6;
  public static final int BINDING_HOSTNAME = 8;
  public static final int QUOTED_STRING = 10;
  public static final int VARIABLE = 12;
  public static final int VARIABLE_STRING = 14;
  public static final int QUOTED_VARIABLE_STRING = 16;
  public static final int MATCHER = 18;
  public static final int MATCHER_ONE = 20;
  public static final int MATCHER_TWO = 22;
  public static final int MATCHER_THR = 24;
  public static final int MATCH_DECLARE = 26;
  public static final int MATCH_DECLARE_DIRECTIVE = 28;
  public static final int MATCH_DECLARE_DIR_HEADER = 30;
  public static final int MATCH_DECLARE_DIR_HEADER_VALUE = 32;
  public static final int MATCH_DECLARE_DIR_METHOD = 34;
  public static final int MATCH_DECLARE_DIR_STATUS = 36;
  public static final int GROUP = 38;
  public static final int GROUP_DIRECTIVE_ABORT = 40;
  public static final int GROUP_DIRECTIVE_ACME_SERVER = 42;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH = 44;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH_SERECTS = 46;
  public static final int GROUP_DIRECTIVE_BASIC_AUTH_PASSWORD = 48;
  public static final int GROUP_DIRECTIVE_BIND = 50;
  public static final int GROUP_DIRECTIVE_ENCODE = 52;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS = 54;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_GZIP = 56;
  public static final int GROUP_DIRECTIVE_ENCODE_ARGS_MINIMUM_LENGTH = 58;
  public static final int GROUP_DIRECTIVE_ERROR = 60;
  public static final int GROUP_DIRECTIVE_ERROR_ARGS = 62;
  public static final int GROUP_DIRECTIVE_ERROR_ARGS_MESSAGE = 64;
  public static final int GROUP_DIRECTIVE_FILE_SERVER = 66;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS = 68;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_FS = 70;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_ROOT = 72;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_HIDE = 74;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_INDEX = 76;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_BROWSE = 78;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_BROWSE_ARGS = 80;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_PRECOMPRESSED = 82;
  public static final int GROUP_DIRECTIVE_FILE_SERVER_ARGS_STATUS = 84;
  public static final int GROUP_DIRECTIVE_TLS = 86;
  public static final int GROUP_DIRECTIVE_REDIR = 88;
  public static final int GROUP_DIRECTIVE_RESPOND = 90;
  public static final int GROUP_DIRECTIVE_REVERSE_PROXY = 92;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     3,  3,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 
    30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 
    38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\6\1\0\1\7\4\0\1\10\2\0\1\11"+
    "\1\12\1\13\12\14\1\15\5\0\1\16\6\17\24\20"+
    "\1\21\1\22\1\23\1\0\1\24\1\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\20"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\20\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\7\0\1\3\32\0\1\3\11\0"+
    "\1\20\12\0\1\20\4\0\1\20\5\0\27\20\1\0"+
    "\37\20\1\0\u01ca\20\4\0\14\20\16\0\5\20\7\0"+
    "\1\20\1\0\1\20\21\0\165\20\1\0\2\20\2\0"+
    "\4\20\1\0\1\20\6\0\1\20\1\0\3\20\1\0"+
    "\1\20\1\0\24\20\1\0\123\20\1\0\213\20\1\0"+
    "\255\20\1\0\46\20\2\0\1\20\6\0\51\20\10\0"+
    "\55\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0"+
    "\1\20\10\0\33\20\4\0\4\20\35\0\13\20\5\0"+
    "\100\20\12\60\4\0\146\20\1\0\10\20\2\0\12\20"+
    "\1\0\6\20\12\60\3\20\2\0\1\20\20\0\73\20"+
    "\2\0\145\20\16\0\12\60\54\20\4\0\1\20\2\0"+
    "\1\20\2\0\56\20\22\0\34\20\4\0\13\20\65\0"+
    "\25\20\1\0\10\20\25\0\17\20\1\0\201\20\2\0"+
    "\12\60\1\0\23\20\1\0\10\20\2\0\2\20\2\0"+
    "\26\20\1\0\7\20\1\0\1\20\3\0\4\20\2\0"+
    "\11\20\2\0\2\20\2\0\4\20\10\0\1\20\4\0"+
    "\2\20\1\0\5\20\2\0\12\60\2\20\12\0\1\20"+
    "\1\0\1\20\2\0\3\20\1\0\6\20\4\0\2\20"+
    "\2\0\26\20\1\0\7\20\1\0\2\20\1\0\2\20"+
    "\1\0\2\20\2\0\1\20\1\0\5\20\4\0\2\20"+
    "\2\0\3\20\3\0\1\20\7\0\4\20\1\0\1\20"+
    "\7\0\12\60\6\20\13\0\3\20\1\0\11\20\1\0"+
    "\3\20\1\0\26\20\1\0\7\20\1\0\2\20\1\0"+
    "\5\20\2\0\12\20\1\0\3\20\1\0\3\20\2\0"+
    "\1\20\17\0\4\20\2\0\12\60\11\0\7\20\1\0"+
    "\3\20\1\0\10\20\2\0\2\20\2\0\26\20\1\0"+
    "\7\20\1\0\2\20\1\0\5\20\2\0\11\20\2\0"+
    "\2\20\2\0\3\20\10\0\2\20\4\0\2\20\1\0"+
    "\5\20\2\0\12\60\1\0\1\20\20\0\2\20\1\0"+
    "\6\20\3\0\3\20\1\0\4\20\3\0\2\20\1\0"+
    "\1\20\1\0\2\20\3\0\2\20\3\0\3\20\3\0"+
    "\14\20\4\0\5\20\3\0\3\20\1\0\4\20\2\0"+
    "\1\20\6\0\1\20\16\0\12\60\20\0\15\20\1\0"+
    "\3\20\1\0\27\20\1\0\20\20\3\0\10\20\1\0"+
    "\3\20\1\0\4\20\7\0\2\20\1\0\3\20\5\0"+
    "\4\20\2\0\12\60\20\0\4\20\1\0\10\20\1\0"+
    "\3\20\1\0\27\20\1\0\12\20\1\0\5\20\2\0"+
    "\11\20\1\0\3\20\1\0\4\20\7\0\2\20\7\0"+
    "\1\20\1\0\4\20\2\0\12\60\1\0\2\20\15\0"+
    "\4\20\1\0\10\20\1\0\3\20\1\0\63\20\1\0"+
    "\3\20\1\0\5\20\5\0\4\20\7\0\5\20\2\0"+
    "\12\60\12\0\6\20\2\0\2\20\1\0\22\20\3\0"+
    "\30\20\1\0\11\20\1\0\1\20\2\0\7\20\3\0"+
    "\1\20\4\0\6\20\1\0\1\20\1\0\10\20\6\0"+
    "\12\60\2\0\2\20\15\0\72\20\5\0\17\20\1\0"+
    "\12\60\47\0\2\20\1\0\1\20\1\0\5\20\1\0"+
    "\30\20\1\0\1\20\1\0\27\20\2\0\5\20\1\0"+
    "\1\20\1\0\6\20\2\0\12\60\2\0\4\20\40\0"+
    "\1\20\27\0\2\20\6\0\12\60\13\0\1\20\1\0"+
    "\1\20\1\0\1\20\4\0\12\20\1\0\44\20\4\0"+
    "\24\20\1\0\22\20\1\0\44\20\11\0\1\20\71\0"+
    "\100\20\12\60\6\0\100\20\12\60\4\20\2\0\46\20"+
    "\1\0\1\20\5\0\1\20\2\0\53\20\1\0\115\20"+
    "\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20"+
    "\2\0\51\20\1\0\4\20\2\0\41\20\1\0\4\20"+
    "\2\0\7\20\1\0\1\20\1\0\4\20\2\0\17\20"+
    "\1\0\71\20\1\0\4\20\2\0\103\20\2\0\3\20"+
    "\40\0\20\20\20\0\126\20\2\0\6\20\3\0\u016c\20"+
    "\2\0\21\20\1\3\32\20\5\0\113\20\3\0\13\20"+
    "\7\0\15\20\1\0\7\20\13\0\25\20\13\0\24\20"+
    "\14\0\15\20\1\0\3\20\1\0\2\20\14\0\124\20"+
    "\3\0\1\20\4\0\2\20\2\0\12\60\41\0\3\20"+
    "\2\0\12\60\6\0\131\20\7\0\53\20\5\0\106\20"+
    "\12\0\37\20\1\0\14\20\4\0\14\20\12\0\12\60"+
    "\36\20\2\0\5\20\13\0\54\20\4\0\32\20\6\0"+
    "\12\60\46\0\34\20\4\0\77\20\1\0\35\20\2\0"+
    "\1\20\12\60\6\0\12\60\15\0\1\20\10\0\17\20"+
    "\101\0\114\20\4\0\12\60\21\0\11\20\14\0\60\20"+
    "\12\60\72\20\14\0\70\20\10\0\12\60\3\0\3\20"+
    "\12\60\44\20\2\0\11\20\7\0\53\20\2\0\3\20"+
    "\20\0\3\20\1\0\47\20\5\0\372\20\1\0\33\20"+
    "\2\0\6\20\2\0\46\20\2\0\6\20\2\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\37\20"+
    "\2\0\65\20\1\0\7\20\1\0\1\20\3\0\3\20"+
    "\1\0\7\20\3\0\4\20\2\0\6\20\4\0\15\20"+
    "\5\0\3\20\1\0\7\20\3\0\13\3\35\0\2\3"+
    "\5\0\1\3\17\0\2\20\23\0\1\20\12\0\1\3"+
    "\21\0\1\20\15\0\1\20\20\0\15\20\63\0\41\20"+
    "\21\0\1\20\4\0\1\20\2\0\12\20\1\0\1\20"+
    "\3\0\5\20\6\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\4\20\1\0\13\20\2\0\4\20\5\0\5\20"+
    "\4\0\1\20\21\0\51\20\u022d\0\64\20\26\0\57\20"+
    "\1\0\57\20\1\0\205\20\6\0\11\20\14\0\46\20"+
    "\1\0\1\20\5\0\1\20\2\0\70\20\7\0\1\20"+
    "\17\0\30\20\11\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\40\20\57\0\1\20\320\0\1\3"+
    "\4\0\3\20\31\0\17\20\1\0\5\20\2\0\5\20"+
    "\4\0\126\20\2\0\2\20\2\0\3\20\1\0\132\20"+
    "\1\0\4\20\5\0\53\20\1\0\136\20\21\0\33\20"+
    "\65\0\306\20\112\0\360\20\20\0\215\20\103\0\56\20"+
    "\2\0\15\20\3\0\20\20\12\60\2\20\24\0\63\20"+
    "\1\0\12\20\1\0\163\20\45\0\11\20\2\0\147\20"+
    "\2\0\65\20\2\0\5\20\60\0\61\20\30\0\64\20"+
    "\14\0\106\20\12\0\12\60\6\0\30\20\3\0\1\20"+
    "\1\0\3\20\12\60\44\20\2\0\44\20\14\0\35\20"+
    "\3\0\101\20\16\0\1\20\12\60\6\0\20\20\12\60"+
    "\5\20\1\0\67\20\11\0\16\20\2\0\12\60\6\0"+
    "\27\20\3\0\111\20\30\0\3\20\2\0\20\20\2\0"+
    "\5\20\12\0\6\20\2\0\6\20\2\0\6\20\11\0"+
    "\7\20\1\0\7\20\1\0\53\20\1\0\14\20\10\0"+
    "\173\20\1\0\2\20\2\0\12\60\6\0\244\20\14\0"+
    "\27\20\4\0\61\20\4\0\156\20\2\0\152\20\46\0"+
    "\7\20\14\0\5\20\5\0\14\20\1\0\15\20\1\0"+
    "\5\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0"+
    "\154\20\41\0\153\20\22\0\100\20\2\0\66\20\50\0"+
    "\14\20\4\0\20\20\20\0\20\20\3\0\2\20\30\0"+
    "\3\20\40\0\5\20\1\0\207\20\23\0\12\60\7\0"+
    "\32\20\4\0\1\20\1\0\32\20\13\0\131\20\3\0"+
    "\6\20\2\0\6\20\2\0\6\20\2\0\3\20\43\0"+
    "\14\20\1\0\32\20\1\0\23\20\1\0\2\20\1\0"+
    "\17\20\2\0\16\20\42\0\173\20\105\0\65\20\210\0"+
    "\1\20\202\0\35\20\3\0\61\20\17\0\1\20\37\0"+
    "\40\20\15\0\36\20\5\0\53\20\5\0\36\20\2\0"+
    "\44\20\4\0\10\20\1\0\5\20\52\0\236\20\2\0"+
    "\12\60\6\0\44\20\4\0\44\20\4\0\50\20\10\0"+
    "\64\20\234\0\67\20\11\0\26\20\12\0\10\20\230\0"+
    "\6\20\2\0\1\20\1\0\54\20\1\0\2\20\3\0"+
    "\1\20\2\0\27\20\12\0\27\20\11\0\37\20\101\0"+
    "\23\20\1\0\2\20\12\0\26\20\12\0\32\20\106\0"+
    "\70\20\6\0\2\20\100\0\4\20\1\0\2\20\5\0"+
    "\10\20\1\0\3\20\1\0\35\20\2\0\3\20\4\0"+
    "\1\20\40\0\35\20\3\0\35\20\43\0\10\20\1\0"+
    "\36\20\31\0\66\20\12\0\26\20\12\0\23\20\15\0"+
    "\22\20\156\0\111\20\67\0\63\20\15\0\63\20\15\0"+
    "\50\20\10\0\12\60\306\0\35\20\12\0\1\20\10\0"+
    "\41\20\217\0\27\20\11\0\107\20\37\0\12\60\17\0"+
    "\74\20\25\0\31\20\7\0\12\60\6\0\65\20\1\0"+
    "\12\60\4\0\3\20\11\0\44\20\2\0\1\20\11\0"+
    "\105\20\4\0\4\20\3\0\12\60\1\20\1\0\1\20"+
    "\43\0\22\20\1\0\45\20\6\0\1\20\101\0\7\20"+
    "\1\0\1\20\1\0\4\20\1\0\17\20\1\0\12\20"+
    "\7\0\73\20\5\0\12\60\6\0\4\20\1\0\10\20"+
    "\2\0\2\20\2\0\26\20\1\0\7\20\1\0\2\20"+
    "\1\0\5\20\1\0\12\20\2\0\2\20\2\0\3\20"+
    "\2\0\1\20\6\0\1\20\5\0\7\20\2\0\7\20"+
    "\3\0\5\20\213\0\113\20\5\0\12\60\4\0\2\20"+
    "\40\0\106\20\1\0\1\20\10\0\12\60\246\0\66\20"+
    "\2\0\11\20\27\0\6\20\42\0\101\20\3\0\1\20"+
    "\13\0\12\60\46\0\71\20\7\0\12\60\66\0\33\20"+
    "\2\0\17\20\4\0\12\60\306\0\73\20\145\0\100\20"+
    "\12\60\25\0\1\20\240\0\10\20\2\0\56\20\2\0"+
    "\10\20\1\0\2\20\33\0\77\20\10\0\1\20\10\0"+
    "\112\20\3\0\1\20\42\0\71\20\7\0\11\20\1\0"+
    "\55\20\1\0\11\20\17\0\12\60\30\0\36\20\2\0"+
    "\26\20\1\0\16\20\111\0\7\20\1\0\2\20\1\0"+
    "\54\20\3\0\1\20\1\0\2\20\1\0\11\20\10\0"+
    "\12\60\6\0\6\20\1\0\2\20\1\0\45\20\1\0"+
    "\2\20\1\0\6\20\7\0\12\60\u0136\0\27\20\11\0"+
    "\232\20\146\0\157\20\21\0\304\20\274\0\57\20\321\0"+
    "\107\20\271\0\71\20\7\0\37\20\1\0\12\60\146\0"+
    "\36\20\2\0\5\20\13\0\67\20\11\0\4\20\14\0"+
    "\12\60\11\0\25\20\5\0\23\20\260\0\100\20\200\0"+
    "\113\20\4\0\71\20\7\0\21\20\100\0\2\20\1\0"+
    "\1\20\34\0\370\20\10\0\363\20\15\0\37\20\61\0"+
    "\3\20\21\0\4\20\10\0\u018c\20\4\0\153\20\5\0"+
    "\15\20\3\0\11\20\7\0\12\20\3\0\2\20\306\0"+
    "\5\20\3\0\6\20\10\0\10\20\2\0\7\20\36\0"+
    "\4\20\224\0\3\20\273\0\125\20\1\0\107\20\1\0"+
    "\2\20\2\0\1\20\2\0\2\20\2\0\4\20\1\0"+
    "\14\20\1\0\1\20\1\0\7\20\1\0\101\20\1\0"+
    "\4\20\2\0\10\20\1\0\7\20\1\0\34\20\1\0"+
    "\4\20\1\0\5\20\1\0\1\20\3\0\7\20\1\0"+
    "\u0154\20\2\0\31\20\1\0\31\20\1\0\37\20\1\0"+
    "\31\20\1\0\37\20\1\0\31\20\1\0\37\20\1\0"+
    "\31\20\1\0\37\20\1\0\31\20\1\0\10\20\2\0"+
    "\62\60\67\20\4\0\62\20\10\0\1\20\16\0\1\20"+
    "\26\0\5\20\1\0\17\20\120\0\7\20\1\0\21\20"+
    "\2\0\7\20\1\0\2\20\1\0\5\20\325\0\55\20"+
    "\3\0\16\20\2\0\12\60\4\0\1\20\u0171\0\60\20"+
    "\12\60\6\0\305\20\13\0\7\20\51\0\114\20\4\0"+
    "\12\60\246\0\4\20\1\0\33\20\1\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\12\20\1\0\4\20\1\0"+
    "\1\20\1\0\1\20\6\0\1\20\4\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\3\20\1\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\1\0\1\20\2\0"+
    "\4\20\1\0\7\20\1\0\4\20\1\0\4\20\1\0"+
    "\1\20\1\0\12\20\1\0\21\20\5\0\3\20\1\0"+
    "\5\20\1\0\21\20\164\0\32\20\6\0\32\20\6\0"+
    "\32\20\166\0\327\20\51\0\65\20\13\0\336\20\2\0"+
    "\u0182\20\16\0\u0131\20\37\0\36\20\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\55\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\10\1\11\1\2\1\12\2\13\1\14\1\5"+
    "\1\15\1\5\2\16\1\17\1\20\1\5\1\21\1\5"+
    "\1\22\3\21\1\23\1\24\1\25\1\26\2\5\1\27"+
    "\2\30\1\31\1\6\1\31\1\32\4\3\1\33\1\34"+
    "\1\35\2\36\2\37\2\40\1\41\1\42\6\3\1\43"+
    "\1\44\1\45\1\46\1\2\1\47\1\20\2\50\3\3"+
    "\1\51\3\3\1\52\1\53\3\3\1\54\1\55\1\56"+
    "\1\57\1\3\2\60\1\3\1\61\10\3\2\62\1\3"+
    "\2\63\1\3\2\64\2\5\1\65\1\3\2\66\1\67"+
    "\3\70\1\71\1\72\1\73\1\71\22\0\1\66\12\0"+
    "\1\74\10\0\1\63\2\0\1\64\22\0\1\75\34\0"+
    "\1\76\4\0\1\77\14\0\1\100\1\0\1\101\2\0"+
    "\1\102\4\0\1\103\3\0\1\104\2\0\1\105\3\0"+
    "\1\106\3\0\1\107\1\0\1\110\12\0\1\111\5\0"+
    "\1\112\4\0\1\113\1\114\1\115\2\0\1\116\12\0"+
    "\1\117\2\0\1\120\1\121\3\0\1\122\4\0\1\123"+
    "\1\0\1\124\7\0\1\125\10\0\1\124\16\0\1\124"+
    "\6\0\1\126\3\0\1\127\11\0\1\130\1\131\15\0"+
    "\1\132\2\0\1\133\1\0\1\134\3\0\1\135\6\0"+
    "\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u08ff\0\u08ff\0\u08ff\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u08ff\0\u0ab8\0\u08ff\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u08ff\0\u08ff\0\u0b7c\0\u0bad\0\u0bde\0\u08ff\0\u08ff"+
    "\0\u09f4\0\u0930\0\u08ff\0\u08ff\0\u08ff\0\u08ff\0\u0c0f\0\u0c40"+
    "\0\u08ff\0\u0c71\0\u0ca2\0\u0cd3\0\u08ff\0\u0d04\0\u08ff\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u08ff\0\u08ff\0\u08ff\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u08ff\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u08ff\0\u08ff\0\u08ff\0\u08ff"+
    "\0\u08ff\0\u1076\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u08ff\0\u119c\0\u11cd\0\u11fe\0\u08ff\0\u08ff\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u08ff\0\u08ff\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u08ff\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u08ff\0\u1634"+
    "\0\u1665\0\u08ff\0\u1696\0\u16c7\0\u08ff\0\u16f8\0\u1729\0\u175a"+
    "\0\u178b\0\u08ff\0\u0930\0\u17bc\0\u17ed\0\u181e\0\u08ff\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\u08ff\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u08ff\0\u1ddc\0\u1e0d"+
    "\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u17bc\0\u2059\0\u208a\0\u20bb\0\u20ec"+
    "\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274"+
    "\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u08ff\0\u2369\0\u239a\0\u23cb"+
    "\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863"+
    "\0\u2894\0\u08ff\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u08ff\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11"+
    "\0\u2b42\0\u2b73\0\u2ba4\0\u08ff\0\u2bd5\0\u08ff\0\u2c06\0\u2c37"+
    "\0\u08ff\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u08ff\0\u2d2c\0\u2d5d"+
    "\0\u2d8e\0\u08ff\0\u2dbf\0\u2df0\0\u08ff\0\u2e21\0\u2e52\0\u2e83"+
    "\0\u08ff\0\u2eb4\0\u2ee5\0\u2f16\0\u08ff\0\u2f47\0\u08ff\0\u2f78"+
    "\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100"+
    "\0\u3131\0\u08ff\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u08ff"+
    "\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u08ff\0\u08ff\0\u08ff\0\u331b"+
    "\0\u334c\0\u08ff\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472"+
    "\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3131\0\u3567\0\u3598\0\u08ff"+
    "\0\u08ff\0\u35c9\0\u35fa\0\u362b\0\u08ff\0\u365c\0\u368d\0\u36be"+
    "\0\u36ef\0\u08ff\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815"+
    "\0\u3846\0\u3877\0\u38a8\0\u08ff\0\u38d9\0\u390a\0\u393b\0\u396c"+
    "\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4"+
    "\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c"+
    "\0\u3cad\0\u3cde\0\u3d0f\0\u08ff\0\u3d40\0\u3d71\0\u3da2\0\u3dd3"+
    "\0\u3e04\0\u3e35\0\u08ff\0\u3e66\0\u3e97\0\u3ec8\0\u08ff\0\u3ef9"+
    "\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081"+
    "\0\u08ff\0\u08ff\0\u40b2\0\u40e3\0\u4114\0\u4145\0\u4176\0\u41a7"+
    "\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u08ff"+
    "\0\u432f\0\u4360\0\u08ff\0\u4391\0\u08ff\0\u43c2\0\u43f3\0\u4424"+
    "\0\u08ff\0\u4455\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u08ff";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\56\2\57\1\60\1\57\1\56\1\61\52\56\1\62"+
    "\1\63\2\60\1\63\1\62\1\64\1\62\1\65\1\62"+
    "\1\66\2\62\1\67\43\62\1\60\1\70\2\60\1\70"+
    "\1\60\1\61\5\60\1\71\43\60\1\71\1\60\1\70"+
    "\2\60\1\70\1\60\1\61\52\60\1\72\1\70\2\60"+
    "\1\70\1\72\1\73\46\72\1\74\3\72\2\75\1\60"+
    "\2\75\1\76\1\77\52\75\1\100\1\70\2\60\1\70"+
    "\1\100\1\101\46\100\1\102\1\100\1\103\1\100\1\104"+
    "\2\105\1\60\1\105\1\104\1\106\46\104\1\107\3\104"+
    "\1\110\1\111\2\110\1\111\1\110\1\112\1\110\1\113"+
    "\2\110\1\114\2\110\1\115\42\110\1\60\1\70\2\60"+
    "\1\70\1\60\1\61\1\60\1\116\50\60\1\117\1\111"+
    "\2\110\1\111\1\117\1\120\1\117\1\65\2\117\1\121"+
    "\45\117\1\122\1\70\2\60\1\70\1\122\1\123\52\122"+
    "\1\124\1\70\1\125\1\60\1\70\1\124\1\126\52\124"+
    "\1\60\1\70\1\127\1\60\1\70\1\60\1\61\25\60"+
    "\1\130\3\60\1\131\2\60\1\132\1\60\1\133\7\60"+
    "\1\134\1\135\1\136\1\60\1\137\1\70\1\110\1\60"+
    "\1\70\1\137\1\140\47\137\1\110\2\137\1\141\1\70"+
    "\1\110\1\60\1\70\1\141\1\142\47\141\1\110\2\141"+
    "\1\143\1\70\1\110\1\60\1\70\1\143\1\144\47\143"+
    "\1\110\2\143\1\60\1\70\1\110\1\60\1\70\1\60"+
    "\1\61\5\60\1\145\41\60\1\110\1\60\1\145\1\60"+
    "\2\57\1\60\1\57\1\60\1\61\7\60\1\146\6\60"+
    "\1\147\1\150\2\60\1\151\1\152\11\60\1\153\1\60"+
    "\1\154\10\60\1\155\2\60\1\70\1\156\1\60\1\70"+
    "\1\60\1\61\1\60\1\157\2\60\1\157\2\60\1\157"+
    "\43\60\1\70\1\156\1\60\1\70\1\60\1\61\1\60"+
    "\1\157\2\60\1\157\2\60\1\157\36\60\1\160\4\60"+
    "\1\70\1\161\1\60\1\70\1\60\1\61\2\60\1\162"+
    "\2\60\1\162\2\60\2\162\3\60\31\162\2\60\1\163"+
    "\1\162\1\164\1\70\2\60\1\70\1\164\1\165\50\164"+
    "\1\60\1\164\1\60\1\70\1\156\1\60\1\70\1\60"+
    "\1\61\5\60\1\166\4\60\1\167\25\60\1\170\10\60"+
    "\1\166\1\60\1\70\1\171\1\60\1\70\1\60\1\61"+
    "\1\60\1\157\2\60\1\157\2\60\1\157\7\60\1\172"+
    "\4\60\1\173\20\60\1\174\1\175\1\60\1\176\2\60"+
    "\1\70\1\161\1\60\1\70\1\60\1\61\24\60\1\177"+
    "\4\60\1\200\13\60\1\201\2\60\1\110\2\60\1\70"+
    "\1\125\1\60\1\70\1\60\1\61\5\60\1\202\43\60"+
    "\1\202\1\60\1\70\1\125\1\60\1\70\1\60\1\61"+
    "\5\60\1\203\43\60\1\203\1\60\1\70\1\171\1\60"+
    "\1\70\1\204\1\61\1\60\1\157\2\60\1\157\1\145"+
    "\1\60\1\157\36\60\1\205\1\60\1\176\1\145\1\60"+
    "\1\70\1\161\1\60\1\70\1\60\1\61\31\60\1\206"+
    "\16\60\1\110\1\60\1\207\1\70\1\110\1\60\1\70"+
    "\1\204\1\210\52\207\1\60\1\70\1\171\1\60\1\70"+
    "\1\60\1\61\1\60\1\157\2\60\1\157\2\60\1\157"+
    "\7\60\1\211\26\60\1\212\1\60\1\176\2\60\1\70"+
    "\1\161\1\60\1\70\1\60\1\61\17\60\1\213\1\60"+
    "\1\214\1\60\1\215\1\60\1\216\1\217\5\60\1\220"+
    "\1\221\1\222\11\60\1\110\1\60\1\223\1\70\1\125"+
    "\1\60\1\70\1\223\1\224\52\223\1\60\1\70\2\60"+
    "\1\70\1\225\1\61\1\226\1\60\2\226\1\227\1\226"+
    "\2\60\2\226\1\60\1\227\1\60\31\226\3\60\1\226"+
    "\1\60\1\70\1\125\1\60\1\70\1\230\1\61\1\231"+
    "\1\60\2\231\1\232\1\231\2\60\2\231\1\60\1\232"+
    "\1\60\31\231\3\60\1\231\1\233\1\70\1\125\1\60"+
    "\1\70\1\233\1\234\52\233\1\60\1\70\1\161\1\60"+
    "\1\70\1\230\1\61\1\231\1\60\2\231\1\232\1\231"+
    "\2\60\2\231\1\60\1\232\1\60\31\231\1\235\1\60"+
    "\1\103\1\231\1\60\1\70\1\161\1\60\1\70\1\60"+
    "\1\61\35\60\1\236\12\60\1\110\1\60\1\237\1\70"+
    "\1\125\1\60\1\70\1\237\1\240\52\237\1\60\1\70"+
    "\1\125\1\60\1\70\1\60\1\61\5\60\1\241\43\60"+
    "\1\241\1\60\1\70\1\156\1\60\1\70\1\230\1\61"+
    "\1\231\1\60\2\231\1\232\1\231\2\60\2\231\1\60"+
    "\1\232\1\60\31\231\3\60\1\231\1\242\1\70\1\156"+
    "\1\60\1\70\1\242\1\243\1\242\1\157\2\242\1\157"+
    "\1\244\1\242\1\157\2\244\3\242\31\244\3\242\1\244"+
    "\1\60\1\70\1\156\1\60\1\70\1\60\1\61\1\60"+
    "\1\157\2\60\1\157\1\145\1\60\1\157\41\60\1\145"+
    "\1\60\1\70\1\156\1\60\1\70\1\60\1\61\1\60"+
    "\1\157\1\245\1\60\1\157\1\246\1\247\1\157\2\250"+
    "\3\60\31\250\3\60\1\246\1\56\4\0\1\56\1\0"+
    "\52\56\1\0\2\57\1\0\1\57\135\0\2\61\1\0"+
    "\56\61\1\62\4\0\3\62\1\0\1\62\1\0\2\62"+
    "\1\0\43\62\1\0\1\63\2\0\1\63\54\0\1\64"+
    "\1\61\1\0\2\61\3\64\1\61\1\64\1\61\2\64"+
    "\1\61\43\64\1\0\1\70\2\0\1\70\70\0\1\71"+
    "\43\0\1\71\1\72\4\0\50\72\1\0\3\72\1\73"+
    "\1\61\1\0\2\61\50\73\1\61\3\73\2\75\1\0"+
    "\2\75\1\0\53\75\2\77\1\0\2\77\1\61\53\77"+
    "\1\100\4\0\50\100\1\0\1\100\1\0\1\100\1\101"+
    "\1\61\1\0\2\61\50\101\1\61\1\101\1\61\1\101"+
    "\1\104\4\0\50\104\1\0\3\104\1\0\2\105\1\0"+
    "\1\105\54\0\1\106\1\61\1\0\2\61\50\106\1\61"+
    "\3\106\1\117\4\0\3\117\1\0\2\117\1\0\45\117"+
    "\1\120\1\61\1\0\2\61\3\120\1\61\2\120\1\61"+
    "\45\120\1\122\4\0\54\122\1\123\1\61\1\0\2\61"+
    "\54\123\1\124\4\0\54\124\1\126\1\61\1\0\2\61"+
    "\54\126\31\0\1\251\60\0\1\252\54\0\1\253\101\0"+
    "\1\254\12\0\1\137\4\0\51\137\1\0\2\137\1\140"+
    "\1\61\1\0\2\61\51\140\1\61\2\140\1\141\4\0"+
    "\51\141\1\0\2\141\1\142\1\61\1\0\2\61\51\142"+
    "\1\61\2\142\1\143\4\0\51\143\1\0\2\143\1\144"+
    "\1\61\1\0\2\61\51\144\1\61\2\144\14\0\1\145"+
    "\43\0\1\145\26\0\1\255\1\256\56\0\1\257\7\0"+
    "\1\260\64\0\1\261\2\0\1\262\51\0\1\263\54\0"+
    "\1\264\66\0\1\265\32\0\1\162\2\0\1\162\2\0"+
    "\2\162\3\0\31\162\2\0\2\162\1\164\4\0\52\164"+
    "\1\0\1\164\1\165\1\61\1\0\2\61\52\165\1\61"+
    "\1\165\12\0\1\266\1\0\1\267\43\0\1\267\14\0"+
    "\1\270\1\271\1\0\1\270\5\0\6\270\67\0\1\272"+
    "\63\0\1\273\70\0\1\274\51\0\1\275\67\0\1\276"+
    "\31\0\1\277\7\0\1\300\70\0\1\301\27\0\1\202"+
    "\43\0\1\202\14\0\1\203\43\0\1\203\31\0\1\302"+
    "\27\0\1\207\5\0\53\207\1\210\1\61\1\0\3\61"+
    "\53\210\44\0\1\303\60\0\1\304\51\0\1\305\70\0"+
    "\1\306\50\0\1\307\64\0\1\310\44\0\1\311\16\0"+
    "\1\312\56\0\1\313\64\0\1\314\12\0\1\223\4\0"+
    "\54\223\1\224\1\61\1\0\2\61\54\224\4\0\1\315"+
    "\2\0\1\315\1\0\2\315\1\316\1\315\2\0\2\315"+
    "\1\0\1\316\1\0\31\315\3\0\1\315\7\0\1\226"+
    "\1\0\2\226\1\317\1\226\2\0\2\226\1\0\1\317"+
    "\1\0\31\226\3\0\1\226\4\0\1\320\2\0\1\320"+
    "\1\0\2\320\1\321\1\320\2\0\2\320\1\0\1\321"+
    "\1\0\31\320\3\0\1\320\7\0\1\231\1\0\2\231"+
    "\1\322\1\231\2\0\2\231\1\0\1\322\1\0\31\231"+
    "\3\0\1\231\1\233\4\0\54\233\1\234\1\61\1\0"+
    "\2\61\54\234\31\0\1\323\27\0\1\237\4\0\54\237"+
    "\1\240\1\61\1\0\2\61\54\240\14\0\1\241\43\0"+
    "\1\241\14\0\1\324\1\325\1\0\2\324\3\0\31\324"+
    "\3\0\1\324\11\0\1\245\1\326\1\0\1\245\2\0"+
    "\2\245\3\0\31\245\3\0\1\245\11\0\1\245\1\326"+
    "\1\0\1\246\1\325\1\0\2\250\3\0\31\250\3\0"+
    "\1\246\11\0\1\245\1\326\1\0\1\250\1\325\1\0"+
    "\2\250\3\0\31\250\3\0\1\250\25\0\1\327\101\0"+
    "\1\330\60\0\1\331\37\0\1\332\75\0\1\333\56\0"+
    "\1\334\65\0\1\335\54\0\1\336\46\0\1\337\75\0"+
    "\1\340\53\0\1\341\51\0\1\342\14\0\1\343\2\0"+
    "\1\344\55\0\1\345\27\0\1\346\43\0\1\346\12\0"+
    "\1\266\1\0\1\347\43\0\1\347\14\0\1\350\1\271"+
    "\1\0\1\350\5\0\6\350\42\0\1\351\1\352\1\0"+
    "\1\351\5\0\6\351\63\0\1\353\60\0\1\354\71\0"+
    "\1\355\47\0\1\356\71\0\1\357\53\0\1\360\65\0"+
    "\1\361\57\0\1\362\55\0\1\363\60\0\1\364\63\0"+
    "\1\365\43\0\1\366\60\0\1\367\75\0\1\370\44\0"+
    "\1\371\71\0\1\372\43\0\1\373\37\0\1\315\1\227"+
    "\1\0\1\315\1\0\2\315\1\374\1\315\2\0\2\315"+
    "\1\0\1\374\1\0\31\315\3\0\1\315\4\0\1\315"+
    "\2\0\1\315\1\0\2\315\1\0\1\315\2\0\2\315"+
    "\3\0\31\315\3\0\1\315\7\0\1\226\1\0\2\226"+
    "\1\0\1\226\2\0\2\226\3\0\31\226\3\0\1\226"+
    "\4\0\1\320\1\232\1\0\1\320\1\0\2\320\1\375"+
    "\1\320\2\0\2\320\1\0\1\375\1\0\31\320\3\0"+
    "\1\320\4\0\1\320\2\0\1\320\1\0\2\320\1\0"+
    "\1\320\2\0\2\320\3\0\31\320\3\0\1\320\7\0"+
    "\1\231\1\0\2\231\1\0\1\231\2\0\2\231\3\0"+
    "\31\231\3\0\1\231\50\0\1\376\23\0\1\377\56\0"+
    "\1\245\2\0\1\245\2\0\2\245\3\0\31\245\3\0"+
    "\1\245\30\0\1\u0100\64\0\1\u0101\60\0\1\u0102\72\0"+
    "\1\u0103\56\0\1\u0104\45\0\1\u0105\64\0\1\u0106\53\0"+
    "\1\u0107\72\0\1\u0108\60\0\1\u0109\47\0\1\u010a\64\0"+
    "\1\u010b\66\0\1\u010c\46\0\1\u010d\41\0\1\u010e\1\0"+
    "\1\u010f\43\0\1\u010f\12\0\1\266\62\0\1\u0110\1\271"+
    "\1\0\1\u0110\5\0\6\u0110\42\0\1\u0111\1\352\1\0"+
    "\1\u0111\5\0\6\u0111\42\0\1\u0112\1\u0113\1\0\1\u0112"+
    "\3\0\1\u0114\1\0\6\u0112\100\0\1\u0115\51\0\1\273"+
    "\45\0\1\273\73\0\1\u0116\44\0\1\u0117\66\0\1\u0118"+
    "\53\0\1\u0119\75\0\1\u011a\64\0\1\u011b\60\0\1\u011c"+
    "\34\0\1\u011d\64\0\1\u011e\60\0\1\u011f\74\0\1\u0120"+
    "\42\0\1\u0121\77\0\1\u0122\60\0\1\u0123\16\0\1\315"+
    "\1\227\1\0\1\315\1\0\2\315\1\0\1\315\2\0"+
    "\2\315\3\0\31\315\3\0\1\315\4\0\1\320\1\232"+
    "\1\0\1\320\1\0\2\320\1\0\1\320\2\0\2\320"+
    "\3\0\31\320\3\0\1\320\31\0\1\u0124\42\0\1\u0125"+
    "\76\0\1\u0126\71\0\1\u0127\65\0\1\u0128\57\0\1\u0129"+
    "\36\0\1\u012a\63\0\1\u012b\61\0\1\u012c\74\0\1\u012d"+
    "\40\0\1\u012e\100\0\1\u012f\56\0\1\u0130\62\0\1\u0131"+
    "\30\0\1\u0132\43\0\1\u0132\12\0\1\u010e\1\0\1\u0133"+
    "\43\0\1\u0133\14\0\1\u0134\1\271\1\0\1\u0134\5\0"+
    "\6\u0134\42\0\1\u0135\1\352\1\0\1\u0135\5\0\6\u0135"+
    "\42\0\1\u0136\1\u0113\1\0\1\u0136\3\0\1\u0114\1\0"+
    "\6\u0136\42\0\1\u0137\1\u0138\1\0\1\u0137\3\0\1\u0114"+
    "\1\0\6\u0137\41\0\1\u0139\101\0\1\u013a\64\0\1\u013b"+
    "\45\0\1\u013c\100\0\1\u013d\60\0\1\u013e\41\0\1\u013f"+
    "\104\0\1\u0140\32\0\1\u0141\76\0\1\u0142\65\0\1\u0143"+
    "\36\0\1\u0144\77\0\1\u0145\44\0\1\u0146\75\0\1\u0147"+
    "\60\0\1\u0148\37\0\1\u0149\65\0\1\u014a\74\0\1\u014b"+
    "\54\0\1\u014c\64\0\1\u014d\25\0\1\u014e\1\0\1\u014f"+
    "\43\0\1\u014f\12\0\1\u010e\63\0\1\271\57\0\1\u0150"+
    "\1\352\1\0\1\u0150\5\0\6\u0150\42\0\1\u0151\1\u0113"+
    "\1\0\1\u0151\3\0\1\u0114\1\0\6\u0151\42\0\1\u0152"+
    "\1\u0138\1\0\1\u0152\3\0\1\u0114\1\0\6\u0152\42\0"+
    "\1\u0153\1\u0154\1\0\1\u0153\3\0\1\u0114\1\0\6\u0153"+
    "\26\0\1\u0155\4\0\54\u0155\47\0\1\u0156\44\0\1\u0157"+
    "\56\0\1\u0158\60\0\1\u0159\66\0\1\u015a\67\0\1\u015b"+
    "\52\0\1\u015c\65\0\1\u015d\52\0\1\u015e\52\0\1\u015f"+
    "\54\0\1\u0160\64\0\1\u0161\57\0\1\u0162\61\0\1\u0163"+
    "\43\0\1\u0164\43\0\1\u0164\12\0\1\u014e\1\0\1\u0165"+
    "\43\0\1\u0165\15\0\1\352\57\0\1\u0166\1\u0113\1\0"+
    "\1\u0166\3\0\1\u0114\1\0\6\u0166\42\0\1\u0167\1\u0138"+
    "\1\0\1\u0167\3\0\1\u0114\1\0\6\u0167\42\0\1\u0168"+
    "\1\u0154\1\0\1\u0168\3\0\1\u0114\1\0\6\u0168\42\0"+
    "\1\u0169\1\u016a\1\0\1\u0169\3\0\1\u0114\1\0\6\u0169"+
    "\66\0\1\u016b\51\0\1\u016c\60\0\1\u016d\63\0\1\u016e"+
    "\67\0\1\u016f\41\0\1\u0170\100\0\1\u0171\63\0\1\u0172"+
    "\55\0\1\u0173\40\0\1\u0174\50\0\1\u0175\43\0\1\u0175"+
    "\12\0\1\u014e\63\0\1\u0113\5\0\1\u0114\51\0\1\u0176"+
    "\1\u0138\1\0\1\u0176\3\0\1\u0114\1\0\6\u0176\42\0"+
    "\1\u0177\1\u0154\1\0\1\u0177\3\0\1\u0114\1\0\6\u0177"+
    "\42\0\1\u0178\1\u016a\1\0\1\u0178\3\0\1\u0114\1\0"+
    "\6\u0178\42\0\1\u0179\1\u017a\1\0\1\u0179\3\0\1\u0114"+
    "\1\0\6\u0179\52\0\1\u017b\60\0\1\u017c\100\0\1\u017d"+
    "\60\0\1\u017e\61\0\1\u017f\63\0\1\u0180\56\0\1\u0181"+
    "\62\0\1\u0182\53\0\1\u0183\31\0\1\u0184\43\0\1\u0184"+
    "\15\0\1\u0138\5\0\1\u0114\51\0\1\u0185\1\u0154\1\0"+
    "\1\u0185\3\0\1\u0114\1\0\6\u0185\42\0\1\u0186\1\u016a"+
    "\1\0\1\u0186\3\0\1\u0114\1\0\6\u0186\42\0\1\u0187"+
    "\1\u017a\1\0\1\u0187\3\0\1\u0114\1\0\6\u0187\42\0"+
    "\1\u0188\2\0\1\u0188\3\0\1\u0114\1\0\6\u0188\65\0"+
    "\1\u0189\50\0\1\u018a\100\0\1\u018b\42\0\1\u018c\102\0"+
    "\1\u018d\36\0\1\u018e\63\0\1\u018f\55\0\1\u0190\73\0"+
    "\1\u0191\31\0\1\u0154\5\0\1\u0114\51\0\1\u0192\1\u016a"+
    "\1\0\1\u0192\3\0\1\u0114\1\0\6\u0192\42\0\1\u0193"+
    "\1\u017a\1\0\1\u0193\3\0\1\u0114\1\0\6\u0193\42\0"+
    "\1\u0194\2\0\1\u0194\3\0\1\u0114\1\0\6\u0194\57\0"+
    "\1\u0195\54\0\1\u0196\100\0\1\u0197\53\0\1\u0198\64\0"+
    "\1\u0199\60\0\1\u019a\56\0\1\u019b\33\0\1\u016a\5\0"+
    "\1\u0114\51\0\1\u019c\1\u017a\1\0\1\u019c\3\0\1\u0114"+
    "\1\0\6\u019c\42\0\1\u019d\2\0\1\u019d\3\0\1\u0114"+
    "\1\0\6\u019d\67\0\1\u019e\60\0\1\u019f\64\0\1\u01a0"+
    "\52\0\1\u01a1\73\0\1\u01a2\23\0\1\u017a\5\0\1\u0114"+
    "\51\0\1\u01a3\2\0\1\u01a3\3\0\1\u0114\1\0\6\u01a3"+
    "\61\0\1\u01a4\67\0\1\u01a5\47\0\1\u01a6\64\0\1\u01a7"+
    "\76\0\1\u01a8\30\0\1\u0114\103\0\1\u01a9\53\0\1\u01aa"+
    "\47\0\1\u01ab\71\0\1\u01ac\53\0\1\u01ad\61\0\1\u01ae"+
    "\61\0\1\u01af\51\0\1\u01b0\76\0\1\u01b1\40\0\1\u01b2"+
    "\72\0\1\u01b3\45\0\1\u01b4\103\0\1\u01b5\55\0\1\u01b6"+
    "\51\0\1\u01b7\70\0\1\u01b8\13\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17787];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\55\0\2\1\1\11\4\1\3\11\4\1\1\11\1\1"+
    "\1\11\3\1\2\11\3\1\2\11\2\1\4\11\2\1"+
    "\1\11\3\1\1\11\1\1\1\11\4\1\3\11\7\1"+
    "\1\11\6\1\5\11\7\1\1\11\3\1\2\11\5\1"+
    "\2\11\4\1\1\11\14\1\1\11\2\1\1\11\2\1"+
    "\1\11\4\1\1\11\4\1\1\11\1\1\22\0\1\11"+
    "\12\0\1\11\10\0\1\1\2\0\1\1\22\0\1\11"+
    "\34\0\1\11\4\0\1\11\14\0\1\11\1\0\1\11"+
    "\2\0\1\11\4\0\1\11\3\0\1\11\2\0\1\11"+
    "\3\0\1\11\3\0\1\11\1\0\1\11\12\0\1\11"+
    "\5\0\1\11\4\0\3\11\2\0\1\11\12\0\1\1"+
    "\2\0\2\11\3\0\1\11\4\0\1\11\1\0\1\1"+
    "\7\0\1\11\10\0\1\1\16\0\1\11\6\0\1\11"+
    "\3\0\1\11\11\0\2\11\15\0\1\11\2\0\1\11"+
    "\1\0\1\11\3\0\1\11\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> _stateStack = new Stack<Integer>();
    private void _pushState(int state) {
        _stateStack.push(zzLexicalState);
        yybegin(state);
    }
    private void _popState() {
        yybegin(_stateStack.pop());
    }
    private void _clearStack() {
        _stateStack.clear();
    }
    private boolean _isStackEmpty() {
        return _stateStack.empty();
    }
    private boolean __IN_MATCH_DECLARE_ONE = false;
    private boolean __IN_GROUP_DIRECTIVE_ENCODE_ARGS = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaddyfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(BINDING_HOSTNAME); yypushback(yylength());
            }
          // fall through
          case 95: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 96: break;
          case 3:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 97: break;
          case 4:
            { return CaddyfileTypes.COMMENT;
            }
          // fall through
          case 98: break;
          case 5:
            { return CaddyfileTypes.TEXT;
            }
          // fall through
          case 99: break;
          case 6:
            { _popState(); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 100: break;
          case 7:
            { return CaddyfileTypes.STAR;
            }
          // fall through
          case 101: break;
          case 8:
            { return CaddyfileTypes.DOT;
            }
          // fall through
          case 102: break;
          case 9:
            { _pushState(PORT); return CaddyfileTypes.COLON;
            }
          // fall through
          case 103: break;
          case 10:
            { _popState(); return CaddyfileTypes.PORT;
            }
          // fall through
          case 104: break;
          case 11:
            { _pushState(HOSTNAME_MATCHER); yypushback(yylength());
            }
          // fall through
          case 105: break;
          case 12:
            { yybegin(GROUP); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 106: break;
          case 13:
            { if (yycharat(yylength()-2) != '\\') { _popState(); return CaddyfileTypes.QUOTATION; }
            }
          // fall through
          case 107: break;
          case 14:
            { return CaddyfileTypes.VARIABLE_NAME;
            }
          // fall through
          case 108: break;
          case 15:
            { return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 109: break;
          case 16:
            { _popState(); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 110: break;
          case 17:
            { _popState(); yypushback(yylength());
            }
          // fall through
          case 111: break;
          case 18:
            { _pushState(VARIABLE); yypushback(yylength());
            }
          // fall through
          case 112: break;
          case 19:
            { _pushState(MATCHER_ONE); yypushback(yylength());
            }
          // fall through
          case 113: break;
          case 20:
            { _pushState(MATCHER_TWO); yypushback(yylength());
            }
          // fall through
          case 114: break;
          case 21:
            { _pushState(MATCHER_THR); return CaddyfileTypes.AT;
            }
          // fall through
          case 115: break;
          case 22:
            { _popState(); return CaddyfileTypes.STAR;
            }
          // fall through
          case 116: break;
          case 23:
            { return CaddyfileTypes.SLASH;
            }
          // fall through
          case 117: break;
          case 24:
            { _popState(); return CaddyfileTypes.MATCHER_NAME;
            }
          // fall through
          case 118: break;
          case 25:
            { _pushState(MATCH_DECLARE_DIRECTIVE); return CaddyfileTypes.MATCH_NAME;
            }
          // fall through
          case 119: break;
          case 26:
            { if (!__IN_MATCH_DECLARE_ONE) { _popState(); yypushback(yylength()); } else { return TokenType.WHITE_SPACE; }
            }
          // fall through
          case 120: break;
          case 27:
            { __IN_MATCH_DECLARE_ONE = true; return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 121: break;
          case 28:
            { return CaddyfileTypes.MATCH_DECLARE_TWO_SEP;
            }
          // fall through
          case 122: break;
          case 29:
            { __IN_MATCH_DECLARE_ONE = false; _popState(); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 123: break;
          case 30:
            { _pushState(MATCH_DECLARE_DIR_HEADER_VALUE); return CaddyfileTypes.HEADER;
            }
          // fall through
          case 124: break;
          case 31:
            { _popState(); return CaddyfileTypes.HEADER_VALUE;
            }
          // fall through
          case 125: break;
          case 32:
            { return CaddyfileTypes.METHOD;
            }
          // fall through
          case 126: break;
          case 33:
            { return CaddyfileTypes.STATUS_CODE;
            }
          // fall through
          case 127: break;
          case 34:
            { yybegin(MATCH_DECLARE); return CaddyfileTypes.MATCH_DECLARE;
            }
          // fall through
          case 128: break;
          case 35:
            { yybegin(YYINITIAL); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 129: break;
          case 36:
            { yybegin(GROUP); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 130: break;
          case 37:
            { _pushState(MATCHER); yypushback(yylength());
            }
          // fall through
          case 131: break;
          case 38:
            { _pushState(GROUP_DIRECTIVE_BASIC_AUTH_SERECTS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 132: break;
          case 39:
            { _pushState(GROUP_DIRECTIVE_BASIC_AUTH_PASSWORD); return CaddyfileTypes.USERNAME;
            }
          // fall through
          case 133: break;
          case 40:
            { _popState(); return CaddyfileTypes.PASSWORD;
            }
          // fall through
          case 134: break;
          case 41:
            { if (_isStackEmpty()) yybegin(GROUP); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 135: break;
          case 42:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 136: break;
          case 43:
            { yybegin(GROUP); return CaddyfileTypes.RIGHT_CURLY_BRACE;
            }
          // fall through
          case 137: break;
          case 44:
            { _popState(); return CaddyfileTypes.GZIP_LEVEL;
            }
          // fall through
          case 138: break;
          case 45:
            { _popState(); return CaddyfileTypes.MINIMUM_LENGTH;
            }
          // fall through
          case 139: break;
          case 46:
            { _pushState(QUOTED_STRING); return CaddyfileTypes.QUOTATION;
            }
          // fall through
          case 140: break;
          case 47:
            { _pushState(GROUP_DIRECTIVE_ERROR_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 141: break;
          case 48:
            { _popState(); return CaddyfileTypes.TEXT;
            }
          // fall through
          case 142: break;
          case 49:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 143: break;
          case 50:
            { return CaddyfileTypes.BACKEND;
            }
          // fall through
          case 144: break;
          case 51:
            { _popState(); return CaddyfileTypes.FILEPATH;
            }
          // fall through
          case 145: break;
          case 52:
            { return CaddyfileTypes.FILEPATH;
            }
          // fall through
          case 146: break;
          case 53:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_BROWSE_ARGS); return CaddyfileTypes.LEFT_CURLY_BRACE;
            }
          // fall through
          case 147: break;
          case 54:
            { return CaddyfileTypes.COMPRESSION_METHOD;
            }
          // fall through
          case 148: break;
          case 55:
            { _popState(); return CaddyfileTypes.STATUS_CODE;
            }
          // fall through
          case 149: break;
          case 56:
            { _pushState(VARIABLE_STRING); yypushback(yylength());
            }
          // fall through
          case 150: break;
          case 57:
            { return CaddyfileTypes.HOSTNAME;
            }
          // fall through
          case 151: break;
          case 58:
            { return CaddyfileTypes.PORT;
            }
          // fall through
          case 152: break;
          case 59:
            { return CaddyfileTypes.COLON;
            }
          // fall through
          case 153: break;
          case 60:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_FS); return CaddyfileTypes.FILE_SERVER_ARG_FS;
            }
          // fall through
          case 154: break;
          case 61:
            { yybegin(GROUP_DIRECTIVE_TLS); return CaddyfileTypes.TLS;
            }
          // fall through
          case 155: break;
          case 62:
            { _pushState(MATCHER_TWO); return CaddyfileTypes.MATCH_DECLARE_DIR_PATH;
            }
          // fall through
          case 156: break;
          case 63:
            { yybegin(GROUP_DIRECTIVE_BIND); return CaddyfileTypes.BIND;
            }
          // fall through
          case 157: break;
          case 64:
            { return CaddyfileTypes.IPV6;
            }
          // fall through
          case 158: break;
          case 65:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_GZIP); return CaddyfileTypes.ENCODE_ARG_GZIP;
            }
          // fall through
          case 159: break;
          case 66:
            { return CaddyfileTypes.ENCODE_ARG_ZSTD;
            }
          // fall through
          case 160: break;
          case 67:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_HIDE); return CaddyfileTypes.FILE_SERVER_ARG_HIDE;
            }
          // fall through
          case 161: break;
          case 68:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_ROOT); return CaddyfileTypes.FILE_SERVER_ARG_ROOT;
            }
          // fall through
          case 162: break;
          case 69:
            { return CaddyfileTypes.PROTOCOL;
            }
          // fall through
          case 163: break;
          case 70:
            { yybegin(GROUP_DIRECTIVE_ABORT); return CaddyfileTypes.ABORT;
            }
          // fall through
          case 164: break;
          case 71:
            { yybegin(GROUP_DIRECTIVE_ERROR); return CaddyfileTypes.ERROR;
            }
          // fall through
          case 165: break;
          case 72:
            { yybegin(GROUP_DIRECTIVE_REDIR); return CaddyfileTypes.REDIR;
            }
          // fall through
          case 166: break;
          case 73:
            { _pushState(MATCH_DECLARE_DIRECTIVE); return CaddyfileTypes.MATCH_DIRECTIVE;
            }
          // fall through
          case 167: break;
          case 74:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_INDEX); return CaddyfileTypes.FILE_SERVER_ARG_INDEX;
            }
          // fall through
          case 168: break;
          case 75:
            { _pushState(MATCH_DECLARE_DIR_HEADER); return CaddyfileTypes.MATCH_DECLARE_DIR_HEADER;
            }
          // fall through
          case 169: break;
          case 76:
            { _pushState(MATCH_DECLARE_DIR_METHOD); return CaddyfileTypes.MATCH_DECLARE_DIR_METHOD;
            }
          // fall through
          case 170: break;
          case 77:
            { _pushState(MATCH_DECLARE_DIR_STATUS); return CaddyfileTypes.MATCH_DECLARE_DIR_STATUS;
            }
          // fall through
          case 171: break;
          case 78:
            { yybegin(GROUP_DIRECTIVE_ENCODE); return CaddyfileTypes.ENCODE;
            }
          // fall through
          case 172: break;
          case 79:
            { return CaddyfileTypes.UNIX_SOCKET;
            }
          // fall through
          case 173: break;
          case 80:
            { return CaddyfileTypes.FILE_SERVER_BROWSE;
            }
          // fall through
          case 174: break;
          case 81:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_BROWSE); return CaddyfileTypes.FILE_SERVER_ARG_BROWSE;
            }
          // fall through
          case 175: break;
          case 82:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_STATUS); return CaddyfileTypes.FILE_SERVER_ARG_STATUS;
            }
          // fall through
          case 176: break;
          case 83:
            { yybegin(GROUP_DIRECTIVE_RESPOND); return CaddyfileTypes.RESPOND;
            }
          // fall through
          case 177: break;
          case 84:
            { return CaddyfileTypes.IPV4;
            }
          // fall through
          case 178: break;
          case 85:
            { _pushState(GROUP_DIRECTIVE_ERROR_ARGS_MESSAGE); return CaddyfileTypes.ERROR_ARG_MESSAGE;
            }
          // fall through
          case 179: break;
          case 86:
            { return CaddyfileTypes.FILE_SERVER_ARG_PASS_THRU;
            }
          // fall through
          case 180: break;
          case 87:
            { yybegin(GROUP_DIRECTIVE_BASIC_AUTH); return CaddyfileTypes.BASIC_AUTH;
            }
          // fall through
          case 181: break;
          case 88:
            { yybegin(GROUP_DIRECTIVE_ACME_SERVER); return CaddyfileTypes.ACME_SERVER;
            }
          // fall through
          case 182: break;
          case 89:
            { yybegin(GROUP_DIRECTIVE_FILE_SERVER); return CaddyfileTypes.FILE_SERVER;
            }
          // fall through
          case 183: break;
          case 90:
            { yybegin(GROUP_DIRECTIVE_REVERSE_PROXY); return CaddyfileTypes.REVERSE_PROXY;
            }
          // fall through
          case 184: break;
          case 91:
            { _pushState(GROUP_DIRECTIVE_FILE_SERVER_ARGS_PRECOMPRESSED); return CaddyfileTypes.FILE_SERVER_ARG_PRECOMPRESSED;
            }
          // fall through
          case 185: break;
          case 92:
            { _pushState(GROUP_DIRECTIVE_ENCODE_ARGS_MINIMUM_LENGTH); return CaddyfileTypes.ENCODE_ARG_MINIMUM_LENGTH;
            }
          // fall through
          case 186: break;
          case 93:
            { return CaddyfileTypes.FILE_SERVER_ARG_BROWSE_ARG_REVEAL_SYMLINKS;
            }
          // fall through
          case 187: break;
          case 94:
            { return CaddyfileTypes.FILE_SERVER_ARG_DISABLE_CANONICAL_URIS;
            }
          // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

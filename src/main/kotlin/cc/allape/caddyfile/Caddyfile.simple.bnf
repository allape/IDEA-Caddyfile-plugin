{
  parserClass="cc.allape.caddyfile.language.parser.CaddyfileParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Caddyfile"
  psiImplClassSuffix="Impl"
  psiPackage="cc.allape.caddyfile.language.psi"
  psiImplPackage="cc.allape.caddyfile.language.psi.impl"

  elementTypeHolderClass="cc.allape.caddyfile.language.psi.CaddyfileTypes"
  elementTypeClass="cc.allape.caddyfile.CaddyfileElementType"
  tokenTypeClass="cc.allape.caddyfile.CaddyfileTokenType"

  psiImplUtilClass="cc.allape.caddyfile.CaddyfilePsiImplUtil"
}

caddyfileFile ::= item_*

private item_ ::= (property|block|global_variable|COMMENT|CRLF)

matcher_declaration ::= AT_MATCHER_NAME {
  mixin="cc.allape.caddyfile.element.CaddyfileNamedElementImpl"
  implements="cc.allape.caddyfile.element.CaddyfileNamedElement"
  methods=[getName setName getNameIdentifier]
}

snippet_name ::= SNIPPET_NAME_TEXT {
  mixin="cc.allape.caddyfile.element.CaddyfileNamedElementImpl"
  implements="cc.allape.caddyfile.element.CaddyfileNamedElement"
  methods=[getName setName getNameIdentifier]
}

snippet_declaration ::= LB snippet_name RB

matcher ::= (matcher_one|matcher_two|matcher_thr)
matcher_one ::= STAR
matcher_two ::= SLASH ((TEXT|STAR) SLASH?)*
matcher_thr ::= matcher_declaration

//variable ::= LCB VARIABLE_NAME FALLBACK? RCB
variable ::= LCB VARIABLE_NAME RCB
global_variable ::= LCB GLOBAL_VARIABLE_NAME RCB

base_template_text ::= (TEXT|variable)
quoted_template_text ::= QUOTE base_template_text* QUOTE

template_text ::= (base_template_text+|quoted_template_text)

block ::= LCB (property|global_variable)* RCB

arg ::= template_text

property ::= (DIRECTIVE|template_text|matcher_declaration|snippet_declaration) (matcher|snippet_name)? arg* block?

